/// <reference path="file://C:/maduro/UserInterfaces/VEMSWeb/Scripts/DataContracts/MaduroDC.js'/>
/// <reference path="file://C:/maduro/UserInterfaces/VEMSWeb/Scripts/WCFServiceProxy/serviceProxy.js'/>



////////////////////////////////////////////////////////////////
/*

MADUROSLL PROXY AUTOGENERATED BY MaduroSLLProxyBuilder.cs
Generated on: 8/26/2010 10:40:24 AM

*/
//////////////////////////////////////////////////////////////
    migrateApp.factory('MaduroSllService', ['MaduroProxyService', function (MaduroProxyService) {

var protocol = '';
var hostName = '';
var userName = '';
var password = '';
var applicationID = '9BDB2013-A37F-47EE-836A-98A26C24FBDA';
var clientIP = 'localhost';
var userLanguage = null;


var proxy;
var proxyAuth;
var JSONPproxy;
var MaduroSLL = {};

// isEmbedded: true/false to indicate if template/widget is embedded. If isEmbedded is not provided (undefined or "" or null), this method will determine based on current template/widget.
MaduroSLL.Service = function (isEmbedded) {
		this.isEmbedded = isEmbedded;
};

MaduroSLL.Service.prototype.GroupDelete = function (vbGroup, sessionID, callBackOverride) {
	/// <summary> Deletes group with passed VBGroup data contract. </summary>
	/// <param name="vbGroup" type="MaduroDC.VBGroup">VBGroup data contract to delete.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbGroup": vbGroup,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("GroupDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("GroupDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

function onFailure(err, serviceProxy, xmlHttpRequest) {
    var msg = "";
    var severity = 'FATAL';
    var queryVariable = "";

    if (err.IsAjaxException) {
        if (err.Message === undefined || err.Message == 'Ajax Error: error') return;
        else if (err.Message == "500 System.ServiceModel.ServiceActivationException") {
            msg = windowsAuthenticationFailureMsg + ".\n\n";
        }
        else {
            if (err.IsAjaxException === undefined || err.IsAjaxException == false) {
                msg = webServerCommunicationFailureMsg + ":  ";
            }

            if (err.LocalizedMessage === undefined) {
                if (err.Message == "Ajax Error: timeout")
                    msg = requestTimedOutFailureMsg + ".\n\n";
                else
                    msg += err.Message + "\n\n";
            }
            else {
                msg += err.LocalizedMessage;
                severity = err.Severity;
            }
        }

    }
    else {
        msg = serverErrorFailureMsg + ":  ";
        if (err.LocalizedMessage === undefined) {
            msg += err.Message + "\n\n";
        }
        else {
            msg += err.LocalizedMessage;
            severity = err.Severity;
        }
    }
    console.log(msg);
    //alert(msg);
  }

MaduroSLL.Service.prototype.ContentRecordStatusGetAllByUser = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns list of all content record status created by the current user.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// List of all VBRequestRecord data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {

		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentRecordStatusGetAllByUser",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentRecordStatusGetAllByUser",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentRecordStatusGetAllByUser",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentRecordStatusGetAllByUser",
					args,
					callBackOverride,
					onFailure,
					false)
		}
	}
}


MaduroSLL.Service.prototype.ContentRecordStatusGetAll = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns list of all content record status created by all.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// List of all VBRequestRecord data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {

		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentRecordStatusGetAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentRecordStatusGetAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentFtpStatusGetAllByUser = function (sessionID, callBackOverride) {
	/// <summary>
	/// Gets list of all content ftp status created by the current user.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// List of all VBRequestFtp data contracts
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {

		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentFtpStatusGetAllByUser",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentFtpStatusGetAllByUser",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.ContentRecordStop = function (vbRequestRecord, sessionID, callBackOverride) {
	/// <summary>
	/// Stop recording a live content.
	/// </summary>
	/// <param name="vbRequestRecord" type="MaduroDC.VBRequestRecord">VBRequestRecord data contract</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.RequestRecord">
	/// VBRequestRecord data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbRequestRecord": vbRequestRecord,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentRecordStop",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentRecordStop",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentRecordStop",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentRecordStop",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentRecordCancel = function (vbRequestRecord, sessionID, callBackOverride) {
	/// <summary>
	/// Stop recording a live content.
	/// </summary>
	/// <param name="vbRequestRecord" type="MaduroDC.VBRequestRecord">VBRequestRecord data contract</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.RequestRecord">
	/// VBRequestRecord data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbRequestRecord": vbRequestRecord,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentRecordCancel",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentRecordCancel",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentFtpCancel = function (vbRequestFtp, sessionID, callBackOverride) {

	/// <summary>
	/// Cancel ftp operation.
	/// </summary>
	/// <param name="vbRequestFtp" type="MaduroDC.VBRequestFtp">VBRequestFtp data contract</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.RequestFtp">
	/// VBRequestFtp data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbRequestFtp": vbRequestFtp,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentFtpCancel",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentFtpCancel",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentRecordStart = function (liveContentID, targetContent, sessionID, callBackOverride) {
	/// <summary>
	/// Start recording a live content.  Use the live content name and time stamp as the recorded file name.
	/// </summary>
	/// <param name="liveContentID" type="int">Live content ID</param>
	/// <param name="targetContent" type="MaduroDC.VBContent">Target content with Title, Description and Categories specified.
	/// If the Categories is empty, the recorded file will be ingested to the root of the publishing point.  If the Categories is not empty,
	/// the recorded file will be ingested to the subfolder specified by the first category.
	/// </param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.RequestRecord">
	/// VBRequestRecord data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"liveContentID": liveContentID,
		"targetContent": targetContent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentRecordStart",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentRecordStart",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentRecordStart",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentRecordStart",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentRecordStatusGet = function (requestRecordID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns content record status.
	/// </summary>
	/// <param name="requestRecordID" type="int">RequestRecord ID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.RequestRecord">
	/// VBRequestRecord data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"requestRecordID": requestRecordID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentRecordStatusGet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentRecordStatusGet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentRecordStatusGet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {

			proxy.invoke("ContentRecordStatusGet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.RequestRecordCancel = function (recordRequestID, sessionID, callBackOverride) {

    /// <summary>
    /// Cancel ingestion operation.
    /// </summary>
    /// <param name="vbRequestIngest" type="MaduroDC.VBRequestIngest">VBRequestIngest data contract</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.RequestIngest">
    /// VBVoidData data contract
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "recordRequestID": recordRequestID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("RequestRecordingCancel",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("RequestRecordingCancel",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.ContentRecordUpdateMetadata = function (vbRequestRecord, targetContent, sessionID, callBackOverride) {
	/// <summary>
	/// Update metadata for the content that's currently being recorded.
	/// </summary>
	/// <param name="vbRequestRecord" type="MaduroDC.VBRequestRecord">VBRequestRecord data contract.</param>
	/// <param name="targetContent" type="MaduroDC.VBContent">Target content with Title, Description and Categories specified.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.RequestRecord">
	/// VBVoidData data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbRequestRecord": vbRequestRecord,
		"targetContent": targetContent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentRecordUpdateMetadata",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentRecordUpdateMetadata",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentRecordUpdateMetadata",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentRecordUpdateMetadata",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}


MaduroSLL.Service.prototype.ContentIngestionCancel = function (vbRequestIngest, sessionID, callBackOverride) {

	/// <summary>
	/// Cancel ingestion operation.
	/// </summary>
	/// <param name="vbRequestIngest" type="MaduroDC.VBRequestIngest">VBRequestIngest data contract</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.RequestIngest">
	/// VBVoidData data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbRequestIngest": vbRequestIngest,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentIngestionCancel",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentIngestionCancel",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}



MaduroSLL.Service.prototype.ContentIngestStatusGetAllByUser = function (sessionID, callBackOverride) {
	/// <summary>
	/// Gets list of all content ingestion status create by the current user.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// List of all VBRequestIngest data contracts
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {

		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentIngestStatusGetAllByUser",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentIngestStatusGetAllByUser",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}




MaduroSLL.Service.prototype.FilterDataGetAll = function (vbSearchFilter, sessionID, callBackOverride) {
	/// <summary> Returns a single VBFilterData data contract containing intializtion data for UI Filter Widget </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBFilterData"></returns>

	var args = {
		"vbSearchFilter": vbSearchFilter,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedFilterDataGetAll",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invokeTimeOut("FilterDataGetAll",
						args,
						onSuccess,
						onFailure,
						false, false, 300000)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedFilterDataGetAll",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invokeTimeOut("FilterDataGetAll",
						args,
						callBackOverride,
						onFailure,
						false, false, 300000)
		}
	}
}
MaduroSLL.Service.prototype.GlobalsUpdate = function (vbGlobals, sessionID, callBackOverride) {
	/// <summary> Updates global fields with passed VBGlobals data contract. </summary>
	/// <param name="vbGlobals" type="MaduroDC.VBGlobals">VBGlobals data contract to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBGlobals"> VBGlobals data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbGlobals": vbGlobals,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("GlobalsUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("GlobalsUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.EnumsGetAll = function (applicationID, callBackOverride) {
	/// <summary> Returns ENUMS data contracts </summary>
	/// <param name="applicationID" type="String">Application ID</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"applicationID": applicationID
	};
	if (!callBackOverride) {
		proxy.invoke("EnumsGetAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("EnumsGetAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.EnumsGetByType = function (applicationID, enumType, callBackOverride) {
	/// <summary> Given a type returns Enum Data Contracts </summary>
	/// <param name="applicationID" type="String">Application ID</param>
	/// <param name="enumType" type="String">Enum Type</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"applicationID": applicationID,
		"enumType": enumType
	};
	if (!callBackOverride) {
		proxy.invoke("EnumsGetByType",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("EnumsGetByType",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.EnumsGetClasses = function (applicationID, callBackOverride) {
	/// <summary> Returns instances of our VBEnum classes </summary>
	/// <param name="applicationID" type="String">Application ID</param>
	/// <returns type="MaduroDC.VBEnums">MaduroDC.VBEnums</returns>

	var args = {
		"applicationID": applicationID
	};
	if (!callBackOverride) {
		proxy.invoke("EnumsGetClasses",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("EnumsGetClasses",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.SearchContent = function (vbSearchFilter, sessionID, callBackOverride) {
	/// <summary> Returns all Content meeting passed Search Filter criteria for which the user has permissions (either directly or via his/her group memberships). </summary>
	/// <param name="vbSearchFilter" type="MaduroDC.VBSearchFilter">VBSearchFilter data contract containing search criteria.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBContent data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbSearchFilter": vbSearchFilter,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedSearchContent",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invokeTimeOut("SearchContent",
						args,
						onSuccess,
						onFailure,
						false, false, 300000)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedSearchContent",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invokeTimeOut("SearchContent",
						args,
						callBackOverride,
						onFailure,
						false, false, 300000)
		}
	}
}

MaduroSLL.Service.prototype.SearchContentNoCache = function (vbSearchFilter, sessionID, callBackOverride) {
	/// <summary> Returns all Content meeting passed Search Filter criteria for which the user has permissions (either directly or via his/her group memberships). </summary>
	/// <param name="vbSearchFilter" type="MaduroDC.VBSearchFilter">VBSearchFilter data contract containing search criteria.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBContent data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbSearchFilter": vbSearchFilter,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedSearchContentNoCache",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("SearchContentNoCache",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedSearchContentNoCache",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("SearchContentNoCache",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentRefresh = function (sessionID, callBackOverride) {
	/// <summary> For both live and stored content, discovers, adds, and removes missing content. </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentRefresh",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentRefresh",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ContentLiveRefresh = function (sessionID, callBackOverride) {
	/// <summary> For live content, discovers, adds, and removes missing content. </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentLiveRefresh",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentLiveRefresh",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ContentStoredRefresh = function (sessionID, callBackOverride) {
	/// <summary> For stored content, discovers, adds, and removes missing content. </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentStoredRefresh",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentStoredRefresh",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ContentInstanceDelete = function (instance, sessionID, callBackOverride) {
	/// <summary> Deletes a content instance record from the system. </summary>
	/// <param name="instance" type="VBContentInstance">The instance to delete.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"instance": instance,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentInstanceDelete",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentInstanceDelete",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentInstanceDelete",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentInstanceDelete",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}
MaduroSLL.Service.prototype.EnteredURLInstanceAdd = function (instance, sessionID, callBackOverride) {
	/// <summary> Adds a URL Instance to the Content it references by ContentID, if any. If the ID is not found (or 0), it throws an exception. </summary>
	/// <param name="instance" type="VBContentInstance">The instance to add.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"instance": instance,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedEnteredURLInstanceAdd",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("EnteredURLInstanceAdd",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedEnteredURLInstanceAdd",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("EnteredURLInstanceAdd",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}
MaduroSLL.Service.prototype.ContentAddManual = function (content, isMulticast, sessionID, callBackOverride) {
	/// <summary> Adds a content record to the system, and adds all of its (presumedly Entered URL) Content Instances to the system. </summary>
	/// <param name="content" type="VBContent">The content to add, along with its instances.</param>
	/// <param name="isMulticast" type="Bool">isMulticast flag</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"content": content,
		"isMulticast": isMulticast,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentAddManual",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentAddManual",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.EnteredURLInstanceUpdate = function (newInstance, sessionID, callBackOverride) {
	/// <summary> Updates a URL Instance to new property values. You cannot change the URL from Stored to Live using this method. </summary>
	/// <param name="newInstance" type="VBContentInstance">The instance to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"newInstance": newInstance,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("EnteredURLInstanceUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("EnteredURLInstanceUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ContentUpdateManual = function (content, sessionID, callBackOverride) {
	/// <summary> Updates a content record in the system. This method ignores changes to Instances. </summary>
	/// <param name="content" type="VBContent">The content to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"content": content,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentUpdateManual",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentUpdateManual",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.StateCleanup = function (sessionID, callBackOverride) {
	/// <summary> Deletes expired states based on the Global session expiration interval. </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBIntData">MaduroDC.VBIntData</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("StateCleanup",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StateCleanup",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ActivityPlayContentCleanup = function (sessionID, callBackOverride) {
	/// <summary> Deletes expired activity play content entries (when there is a "start" but no "stop" entry) based on the Global live and stored expiration intervals. </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ActivityPlayContentCleanup",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ActivityPlayContentCleanup",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.GroupGet = function (groupID, sessionID, callBackOverride) {
	/// <summary> Returns a single VBGroup data contract. </summary>
	/// <param name="groupID" type="Number" integer="true">Group's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBGroup"> VBGroup data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"groupID": groupID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invokeTimeOut("GroupGet",
	args,
	onSuccess,
	onFailure,
	false, 3600000)
	} else {
    proxy.invokeTimeOut("GroupGet",
	args,
	callBackOverride,
	onFailure,
	false, 3600000)
	}
}
MaduroSLL.Service.prototype.GroupsGetAll = function (sessionID, callBackOverride) {
	/// <summary> Returns a VBList containing a list of VBGroup data contracts for ALL groups defined in the system. </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBGroup data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedGroupsGetAll",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("GroupsGetAll",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedGroupsGetAll",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("GroupsGetAll",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.GroupsGetPaged = function (searchterm, pageNumber, pageSize, sessionID, callBackOverride) {
	/// <summary> Returns a VBList containing a list of VBGroup data contracts for ALL groups defined in the system. </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBGroup data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"searchterm": searchterm,
		"pageNumber": pageNumber,
		"pageSize": pageSize,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedGroupsGetPaged",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("GroupsGetPaged",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedGroupsGetPaged",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("GroupsGetPaged",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.GroupsGetPagedForApproval = function (searchterm, pageNumber, pageSize, sessionID, callBackOverride) {
    /// <summary> Returns a VBList containing a list of VBGroup data contracts for ALL groups defined in the system. </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList"> VBList of VBGroup data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

    var args = {
        "searchterm": searchterm,
        "pageNumber": pageNumber,
        "pageSize": pageSize,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("GroupsGetPagedForApproval",
						args,
						onSuccess,
						onFailure,
						false)
    } else {
        proxy.invoke("GroupsGetPagedForApproval",
						args,
						callBackOverride,
						onFailure,
						false)
    }
}

MaduroSLL.Service.prototype.UsersGetPaged = function (searchterm, pageNumber, pageSize, sessionID, callBackOverride) {
	/// <summary> Returns a VBList containing a list of VBGroup data contracts for ALL groups defined in the system. </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBGroup data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"searchterm": searchterm,
		"pageNumber": pageNumber,
		"pageSize": pageSize,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedUsersGetPaged",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("UsersGetPaged",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedUsersGetPaged",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("UsersGetPaged",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.UsersGetPagedForApproval = function (searchterm, pageNumber, pageSize, sessionID, callBackOverride) {
    /// <summary> Returns a VBList containing a list of VBGroup data contracts for ALL groups defined in the system. </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList"> VBList of VBGroup data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

    var args = {
        "searchterm": searchterm,
        "pageNumber": pageNumber,
        "pageSize": pageSize,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("UsersGetPagedForApproval",
						args,
						onSuccess,
						onFailure,
						false)
    } else {
        proxy.invoke("UsersGetPagedForApproval",
						args,
						callBackOverride,
						onFailure,
						false)
    }
}

MaduroSLL.Service.prototype.UsersGetPagedByFullName = function (searchterm, pageNumber, pageSize, sessionID, callBackOverride) {
	/// <summary> Returns a VBList containing a list of VBGroup data contracts for ALL groups defined in the system. </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBGroup data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"searchterm": searchterm,
		"pageNumber": pageNumber,
		"pageSize": pageSize,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedUsersGetPagedByFullName",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("UsersGetPagedByFullName",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedUsersGetPagedByFullName",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("UsersGetPagedByFullName",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.GroupAdd = function (vbGroup, sessionID, callBackOverride) {
	/// <summary> Add new group with passed VBGroup data contract. </summary>
	/// <param name="vbGroup" type="MaduroDC.VBGroup">VBGroup data contract to add.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBGroup"> VBGroup data contract of newly added group. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbGroup": vbGroup,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("GroupAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("GroupAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.GroupUpdate = function (vbGroup, sessionID, callBackOverride) {
	/// <summary> Updates existing group with passed VBGroup data contract. </summary>
	/// <param name="vbGroup" type="MaduroDC.VBGroup">VBGroup data contract to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBGroup"> VBGroup data contract of updated group. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbGroup": vbGroup,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("GroupUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("GroupUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.FeatureSetsGetByUser = function (userID, sessionID, callBackOverride) {
	/// <summary> Returns a VBList containing all FeatureSets for which the passed User ID has permissions. </summary>
	/// <param name="userID" type="Number" integer="true">User's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBFeatureSet data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"userID": userID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FeatureSetsGetByUser",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("FeatureSetsGetByUser",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.FeatureSetsGetByUserWithLicenseCheck = function (userID, sessionID, callBackOverride) {
	/// <summary> Returns a VBList containing all FeatureSets for which the passed User ID has permissions. This version of the method will also check the feature licenses and update the VBFeature.FeatureLicenseWrapper property.</summary>
	/// <param name="userID" type="Number" integer="true">User's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBFeatureSet data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"userID": userID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FeatureSetsGetByUserWithLicenseCheck",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("FeatureSetsGetByUserWithLicenseCheck",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.FeatureSetsGetByGroup = function (groupID, sessionID, callBackOverride) {
	/// <summary> Returns a VBList containing all FeatureSets for which the passed Group ID has permissions. </summary>
	/// <param name="groupID" type="Number" integer="true">Group's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBFeatureSet data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"groupID": groupID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FeatureSetsGetByGroup",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("FeatureSetsGetByGroup",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.FeatureSetsGetByGroupWithLicenseCheck = function (groupID, sessionID, callBackOverride) {
	/// <summary> Returns a VBList containing all FeatureSets for which the passed Group ID has permissions. This version of the method will also check the feature licenses and update the VBFeature.FeatureLicenseWrapper property.</summary>
	/// <param name="groupID" type="Number" integer="true">Group's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBFeatureSet data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"groupID": groupID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FeatureSetsGetByGroupWithLicenseCheck",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("FeatureSetsGetByGroupWithLicenseCheck",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ContentGetAll = function (sessionID, callBackOverride) {
	/// <summary> Returns a collection of VBContent objects </summary>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBList"></returns>
	/// <example>ContentGetAll("0FFB13F8-11CE-46B5-AA41-5B2703013086")</example>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentGetAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentGetAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ContentGetByCategoryWithUserPermissions = function (userID, categoryID, sessionID, callBackOverride) {
	/// <summary> Returns a collection of VBContent data contracts that belong to the passed Category. Each VBContent object will contain: VBCategory object with denormalized string ContentPrivledges that exist for passed userID. </summary>
	/// <param name="userID" type="Number" integer="true">groupID</param>
	/// <param name="categoryID" type="Number" integer="true">categoryID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"userID": userID,
		"categoryID": categoryID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentGetByCategoryWithUserPermissions",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentGetByCategoryWithUserPermissions",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ContentGetByCategoryWithGroupPermissions = function (groupID, categoryID, sessionID, callBackOverride) {
	/// <summary> Returns a collection of VBContent data contracts that belong to the passed Category. Each VBContent object will contain: VBCategory object with denormalized string ContentPrivledges that exist for passed groupID. </summary>
	/// <param name="groupID" type="Number" integer="true">groupID</param>
	/// <param name="categoryID" type="Number" integer="true">categoryID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"groupID": groupID,
		"categoryID": categoryID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentGetByCategoryWithGroupPermissions",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentGetByCategoryWithGroupPermissions",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ContentGetUncategorizedWithUserPermissions = function (userID, sessionID, callBackOverride) {
	/// <summary> Returns a collection of VBContent data contracts that do not belong to any Category. Each VBContent object will contain: VBCategory object with denormalized string ContentPrivledges that exist for passed userID. </summary>
	/// <param name="userID" type="Number" integer="true">groupID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"userID": userID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentGetUncategorizedWithUserPermissions",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentGetUncategorizedWithUserPermissions",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ContentGetAllWithUserPermissions = function (userID, sessionID, callBackOverride) {
	/// <summary> Returns a collection of All VBContent data contracts in the system. Each VBContent object will contain: VBCategory object with denormalized string ContentPrivledges that exist for passed userID. </summary>
	/// <param name="userID" type="Number" integer="true">groupID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"userID": userID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentGetAllWithUserPermissions",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentGetAllWithUserPermissions",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ContentGetUncategorizedWithGroupPermissions = function (groupID, sessionID, callBackOverride) {
	/// <summary> Returns a collection of VBContent data contracts that do not belong to any Category. Each VBContent object will contain: VBCategory object with denormalized string ContentPrivledges that exist for passed groupID. </summary>
	/// <param name="groupID" type="Number" integer="true">groupID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"groupID": groupID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentGetUncategorizedWithGroupPermissions",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentGetUncategorizedWithGroupPermissions",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ContentGetAllWithGroupPermissions = function (groupID, sessionID, callBackOverride) {
	/// <summary> Returns a collection of All VBContent data contracts in the system. Each VBContent object will contain: VBCategory object with denormalized string ContentPrivledges that exist for passed groupID. </summary>
	/// <param name="groupID" type="Number" integer="true">groupID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"groupID": groupID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentGetAllWithGroupPermissions",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentGetAllWithGroupPermissions",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.EnteredURLContentGetAll = function (contentType, sessionID, callBackOverride) {
	/// <summary> Returns a collection of all VBContent data contracts in the system that were added to the system via URL rather than discovery, either live or stored. </summary>
	/// <param name="contentType" type="CONTENTTYPE">A choice between Stored and Live content</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"></returns>
	/// <example>EnteredURLContentGetAllLive("0FFB13F8-11CE-46B5-AA41-5B2703013086")</example>

	var args = {
		"contentType": contentType,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("EnteredURLContentGetAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("EnteredURLContentGetAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ContentDelete = function (vbContent, sessionID, callBackOverride) {
	/// <summary> Deletes the Content record and all instance records matching passed in vbConent </summary>
	/// <param name="vbContent" type="MaduroDC.VBContent">VBContent data contract to be deleted.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"vbContent": vbContent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentDelete",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentDelete",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentDelete",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentDelete",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}
MaduroSLL.Service.prototype.LocalizedStringGetSingle = function (itemClass, language, applicationID, callBackOverride) {
	/// <summary> Returns a single VBLanguage data contract. </summary>
	/// <param name="itemClass" type="String">The string element to translate</param>
	/// <param name="language" type="String">The ANSI standard language abbreviation </param>
	/// <param name="applicationID" type="String">Application ID</param>
	/// <returns type="MaduroDC.VBLanguage">MaduroDC.VBLanguage</returns>
	/// <example>LocalizedStringGetSingle("SearchBoxLabel", "EN-US")</example>

	var args = {
		"itemClass": itemClass,
		"language": language,
		"applicationID": applicationID
	};
	if (!callBackOverride) {
		proxy.invoke("LocalizedStringGetSingle",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LocalizedStringGetSingle",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.LocalizedStringGetAll = function (language, applicationID, callBackOverride) {
	/// <summary> Returns a list of VBLanguage data contracts. </summary>
	/// <param name="language" type="String">The ANSI standard language abbreviation</param>
	/// <param name="applicationID" type="String">Application ID</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"language": language,
		"applicationID": applicationID
	};
	if (!callBackOverride) {
		proxy.invoke("LocalizedStringGetAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LocalizedStringGetAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.LocalizedStringGetMultiple = function (itemClasses, language, applicationID, callBackOverride) {
	/// <summary> Returns a list of VBLanguage data contracts. </summary>
	/// <param name="itemClasses" type="Array"></param>
	/// <param name="language" type="String"></param>
	/// <param name="applicationID" type="String"></param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"itemClasses": itemClasses,
		"language": language,
		"applicationID": applicationID
	};
	if (!callBackOverride) {
		proxy.invoke("LocalizedStringGetMultiple",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LocalizedStringGetMultiple",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.LocaleGetAll = function (applicationID, callBackOverride) {
	/// <summary> Gets a list of VBLocale objects for all of the support languages in the systen </summary>
	/// <param name="applicationID" type="String">Application ID</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"applicationID": applicationID
	};
	if (!callBackOverride) {
		proxy.invoke("LocaleGetAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LocaleGetAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.GlobalsGet = function (sessionID, callBackOverride) {
	/// <summary> Returns a single VBGlobals data contract containing all global fields. </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBGlobals"> VBGlobals data contract containing all global fields. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedGlobalsGet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("GlobalsGet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedGlobalsGet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("GlobalsGet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}
MaduroSLL.Service.prototype.UserProfileGet = function (sessionID, callBackOverride) {
    /// <summary> Returns VBUserProfile data contract from user's session state. </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBUserProfile"> VBUserProfile data contract. If an exception is thrown, the.Exception property will be populated. </returns>
    if (!this.isEmbedded) {
        try{
            var isAnonymous = (window.top.location.href.toLowerCase().indexOf('anonymous') > 0);

            if (isAnonymous) {
                sessionID = $.cookie('AnonymousSessionId');
            }
        }
        catch(e) {}
    }

    var args = {
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EmbedUserProfileGet",
			args,
			onSuccess,
			onFailure,
			false,
			true)
        } else {
            proxy.invoke("UserProfileGet",
			args,
			onSuccess,
			onFailure,
			false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EmbedUserProfileGet",
			args,
			callBackOverride,
			onFailure,
			false,
			true)
        } else {
            proxy.invoke("UserProfileGet",
			args,
			callBackOverride,
			onFailure,
			false)
        }
    }
}
MaduroSLL.Service.prototype.UserProfileRefresh = function (sessionID, callBackOverride) {
	/// <summary> Refreshes UserProfile in user's session state. </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("UserProfileRefresh",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("UserProfileRefresh",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ClientProfileValidate = function (applicationID, callBackOverride) {
	/// <summary> Validates a client profile record is available for the passed ApplicationID and the client's current browser type/version/OS (if available, from context). - Returns True if a client profile record is found and the user will be able to login to the SLL. - Returns False if the user's current platform is not supported. </summary>
	/// <param name="applicationID" type="String">Unique application GUID.</param>
	/// <returns type="MaduroDC.VBBoolData"> VBBoolData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"applicationID": applicationID
	};
	if (!callBackOverride) {
		proxy.invoke("ClientProfileValidate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ClientProfileValidate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.UserGetByUserID = function (userID, sessionID, callBackOverride) {
	/// <summary> Returns a single VBUser data contract with passed UserID. </summary>
	/// <param name="userID" type="Number" integer="true">User's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBUser">MaduroDC.VBUser</returns>

	var args = {
		"userID": userID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("UserGetByUserID",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("UserGetByUserID",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.UserGetByUserName = function (userName, sessionID, callBackOverride) {
	/// <summary> Returns a single VBUser data contract with passed UserName. </summary>
	/// <param name="userName" type="String">User's textual network login ID.</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBUser">MaduroDC.VBUser</returns>

	var args = {
		"userName": userName,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("UserGetByUserName",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("UserGetByUserName",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.UsersGetAll = function (sessionID, callBackOverride) {
	/// <summary> Returns a VBList of VBUser data contracts for ALL users defined in the system. </summary>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedUsersGetAll",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("UsersGetAll",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedUsersGetAll",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("UsersGetAll",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}
MaduroSLL.Service.prototype.UserDelete = function (vbUser, sessionID, callBackOverride) {
	/// <summary> Deletes user with passed in VBUser object. </summary>
	/// <param name="vbUser" type="MaduroDC.VBUser">VBUser object</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"vbUser": vbUser,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("UserDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("UserDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.UserUpdate = function (vbUser, sessionID, callBackOverride) {
	/// <summary> Updates existing user. </summary>
	/// <param name="vbUser" type="MaduroDC.VBUser">VBUser data contract of user to update.</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"vbUser": vbUser,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("UserUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("UserUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.UserAdd = function (vbUser, sessionID, callBackOverride) {
	/// <summary> Adds new user. </summary>
	/// <param name="vbUser" type="MaduroDC.VBUser">VBUser data contract of user to add.</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"vbUser": vbUser,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("UserAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("UserAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.STBLogin = function (pin, applicationID, clientIP, userLanguage, callBackOverride) {
	/// <summary> Logs-in user. </summary>
	/// <param name="pin" type="String">User password</param>
	/// <param name="applicationID" type="String">Application ID - Every application allowed to call this service MUST have an ID in the ClientApplication Table</param>
	/// <param name="clientIP" type="String">Client IP</param>
	/// <param name="userLanguage" type="String">User Language</param>
	/// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>

	var args = {
		"pin": pin,
		"applicationID": applicationID,
		"clientIP": clientIP,
		"userLanguage": userLanguage
	};
	if (!callBackOverride) {
		proxy.invoke("STBLogin",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("STBLogin",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.init = function(host, usr, pwd, cIp, lang){
	hostName = host;
	userName = usr;
	password = pwd;
	clientIP = cIp;
	userLanguage = lang;

 proxy = new MaduroProxyService.ServiceProxy(GetURLHostname() + '/madurosll/madurosll.svc/json/');
 proxyAuth = new MaduroProxyService.ServiceProxy(GetURLHostname() + '/madurosll/madurosll.svc/jsonAuth/');
 JSONPproxy = new MaduroProxyService.ServiceProxy(GetURLHostname() + '/madurosll/madurosll.svc/jsonp/');
}
MaduroSLL.Service.prototype.UserLogin = function (callBackOverride) {
	/// <summary> Logs-in user. </summary>
	/// <param name="userName" type="String">User login</param>
	/// <param name="password" type="String">User password</param>
	/// <param name="applicationID" type="String">Application ID - Every application allowed to call this service MUST have an ID in the ClientApplication Table</param>
	/// <param name="clientIP" type="String">Client IP</param>
	/// <param name="userLanguage" type="String">User Language</param>
	/// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>
	var args = {
		"userName": userName,
		"password": password,
		"applicationID": applicationID,
		"clientIP": clientIP,
		"userLanguage": userLanguage
	};

	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedUserLogin",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("UserLogin",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedUserLogin",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("UserLogin",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}
MaduroSLL.Service.prototype.CheckLDAPUserStatusOnLogin = function (userName, password, applicationID, clientIP, userLanguage, callBackOverride) {
    /// <summary> Logs-in user. </summary>
    /// <param name="userName" type="String">User login</param>
    /// <param name="password" type="String">User password</param>
    /// <param name="applicationID" type="String">Application ID - Every application allowed to call this service MUST have an ID in the ClientApplication Table</param>
    /// <param name="clientIP" type="String">Client IP</param>
    /// <param name="userLanguage" type="String">User Language</param>
    /// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>

    var args = {
        "userName": userName,
        "password": password,
        "applicationID": applicationID,
        "clientIP": clientIP,
        "userLanguage": userLanguage
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("CheckLDAPUserStatusOnLogin",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("CheckLDAPUserStatusOnLogin",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("CheckLDAPUserStatusOnLogin",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("CheckLDAPUserStatusOnLogin",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}
MaduroSLL.Service.prototype.UserLogout = function (sessionID, callBackOverride) {
	/// <summary> Logs-out user. </summary>
	/// <param name="sessionID" type="String">User Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedUserLogout",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("UserLogout",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedUserLogout",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("UserLogout",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}
MaduroSLL.Service.prototype.LoginPolicyGet = function (sessionID, callBackOverride) {
	/// <summary> Returns a VBLoginPolicy data contract containing all of the fields pertaining to UserLogin policy information </summary>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBLoginPolicy">MaduroDC.VBLoginPolicy</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LoginPolicyGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LoginPolicyGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.LoginPolicyUpdate = function (vbLoginPolicy, sessionID, callBackOverride) {
	/// <summary> LoginPolicyUpdate method that takes a modified VBPolicy and calls the BLO to update the databaxse. </summary>
	/// <param name="vbLoginPolicy" type="MaduroDC.VBLoginPolicy">MaduroDC.VBLoginPolicy</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"vbLoginPolicy": vbLoginPolicy,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LoginPolicyUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LoginPolicyUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.PasswordPolicyGet = function (sessionID, callBackOverride) {
	/// <summary> PasswordPolicyGet method that calls the BLO to get a list of Password Policies. </summary>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PasswordPolicyGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PasswordPolicyGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.PasswordPolicyAdd = function (sessionID, vbPasswordPolicy, callBackOverride) {
	/// <summary> PasswordPolicyAdd calls the UserBLO to add a new password policy to the database </summary>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <param name="vbPasswordPolicy" type="MaduroDC.VBPasswordPolicy">VBPasswordPolicy</param>
	/// <returns type="MaduroDC.VBPasswordPolicy">MaduroDC.VBPasswordPolicy</returns>

	var args = {
		"sessionID": sessionID,
		"vbPasswordPolicy": vbPasswordPolicy
	};
	if (!callBackOverride) {
		proxy.invoke("PasswordPolicyAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PasswordPolicyAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.PasswordPolicyDelete = function (vbPasswordPolicy, sessionID, callBackOverride) {
	/// <summary> Deletes PasswordPolicy using passed in Policy Object </summary>
	/// <param name="vbPasswordPolicy" type="MaduroDC.VBPasswordPolicy">MaduroDC.VBPasswordPolicy object</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"vbPasswordPolicy": vbPasswordPolicy,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PasswordPolicyDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PasswordPolicyDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PasswordPolicyUpdate = function (sessionID, vbPasswordPolicy, callBackOverride) {
	/// <summary> PasswordPolicyUpdate calls the UserBLO update password policy to the database </summary>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <param name="vbPasswordPolicy" type="MaduroDC.VBPasswordPolicy">VBPasswordPolicy</param>
	/// <returns type="MaduroDC.VBPasswordPolicy">MaduroDC.VBPasswordPolicy</returns>

	var args = {
		"sessionID": sessionID,
		"vbPasswordPolicy": vbPasswordPolicy
	};
	if (!callBackOverride) {
		proxy.invoke("PasswordPolicyUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PasswordPolicyUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.ActivePasswordPolicyGet = function (sessionID, callBackOverride) {
	/// <summary> ActivePasswordPolicyGet gets the Active password policy </summary>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBPasswordPolicy">MaduroDC.VBPasswordPolicy</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ActivePasswordPolicyGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ActivePasswordPolicyGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ActivePasswordPolicySet = function (sessionID, policyID, callBackOverride) {
	/// <summary> ActivePasswordPolicySet method that calls the UserBLO to Set the Active password policy. </summary>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <param name="policyID" type="Number" integer="true">Policy ID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"sessionID": sessionID,
		"policyID": policyID
	};
	if (!callBackOverride) {
		proxy.invoke("ActivePasswordPolicySet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ActivePasswordPolicySet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.SessionGet = function (sessionID, callBackOverride) {
	/// <summary> Given a session ID, retrieve and return the entire VBSessionFull object </summary>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBSessionFull">MaduroDC.VBSessionFull</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedSessionGet",
							args,
							onSuccess,
							onFailure,
							false,
							true)
		} else {
			proxy.invoke("SessionGet",
							args,
							onSuccess,
							onFailure,
							false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedSessionGet",
							args,
							callBackOverride,
							onFailure,
							false,
							true)
		} else {
			proxy.invoke("SessionGet",
							args,
							callBackOverride,
							onFailure,
							false)
		}
	}
}
MaduroSLL.Service.prototype.SessionGetValueByKey = function (sessionID, key, callBackOverride) {
	/// <summary> Given a session ID and a key name, returns the value from state as a VBString </summary>
	/// <param name="key" type="String">Key</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBStringData">MaduroDC.VBStringData</returns>

	var args = {
		"sessionID": sessionID,
		"key": key
	};
	if (!callBackOverride) {
		proxy.invoke("SessionGetValueByKey",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("SessionGetValueByKey",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.SessionSetValueByKey = function (sessionID, key, value, callBackOverride) {
	/// <summary> Given a session ID, a key name, and a value Inserts value into user session state </summary>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <param name="key" type="String">Key</param>
	/// <param name="value" type="String">Value</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"sessionID": sessionID,
		"key": key,
		"value": value
	};
	if (!callBackOverride) {
		proxy.invoke("SessionSetValueByKey",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("SessionSetValueByKey",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.FeaturesGetByFeatureSet = function (featureSetID, sessionID, callBackOverride) {
	/// <summary> Returns a VBList containing all Features for the passed FeatureSet ID. </summary>
	/// <param name="featureSetID" type="Number" integer="true">FeatureSet's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBFeature data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"featureSetID": featureSetID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FeaturesGetByFeatureSet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("FeaturesGetByFeatureSet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.FeatureSetsGetAll = function (sessionID, callBackOverride) {
	/// <summary> Returns a VBList containing all FeatureSets defined in the system. </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBFeatureSet data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FeatureSetsGetAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("FeatureSetsGetAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.FeatureSetsGetAllWithLicenseCheck = function (sessionID, callBackOverride) {
	/// <summary> Returns a VBList containing all FeatureSets defined in the system. This version of the method will also check the feature licenses and update the VBFeature.FeatureLicenseWrapper property.</summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBFeatureSet data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FeatureSetsGetAllWithLicenseCheck",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("FeatureSetsGetAllWithLicenseCheck",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.StoredServerGet = function (storedServerID, sessionID, callBackOverride) {
	/// <summary> Returns a single VBStoredServer data contract. </summary>
	/// <param name="storedServerID" type="Number" integer="true">Stored Server's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBStoredServer"> VBStoredServer data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"storedServerID": storedServerID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("StoredServerGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StoredServerGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.StoredServersGetAll = function (sessionID, callBackOverride) {
	/// <summary> Returns a VBList containing a list of VBStoredServer data contracts for ALL Stored Servers defined in the system. </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBStoredServer data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("StoredServersGetAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StoredServersGetAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.StoredServerAdd = function (vbStoredServer, sessionID, callBackOverride) {
	/// <summary> Adds new Stored Server with passed VBStoredServer data contract. NOTE: This method will NOT add associated Entry Points or Publishing Points. You should use the StoredServerEntryPointAdd and StoredServerPublishingPointAdd methods accordingly. </summary>
	/// <param name="vbStoredServer" type="MaduroDC.VBStoredServer">VBStoredServer data contract to add.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBStoredServer"> VBStoredServer data contract of newly added Stored Server. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbStoredServer": vbStoredServer,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("StoredServerAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StoredServerAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.StoredServerUpdate = function (vbStoredServer, sessionID, callBackOverride) {
	/// <summary> Updates existing Stored Server with passed VBStoredServer data contract. NOTE: This method will NOT update associated Entry Points or Publishing Points. You should use the StoredServerEntryPointUpdate and StoredServerPublishingPointUpdate methods accordingly. </summary>
	/// <param name="vbStoredServer" type="MaduroDC.VBStoredServer">VBStoredServer data contract to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBStoredServer"> VBStoredServer data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbStoredServer": vbStoredServer,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("StoredServerUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StoredServerUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.StoredServerDelete = function (vbStoredServer, sessionID, callBackOverride) {
	/// <summary> Deletes Stored Server with passed VBStoredServer data contract. </summary>
	/// <param name="vbStoredServer" type="MaduroDC.VBStoredServer">VBStoredServer data contract to delete.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbStoredServer": vbStoredServer,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
	    proxy.invokeTimeOut("StoredServerDelete",
	args,
	onSuccess,
	onFailure,
	false,
    false,
    3600000)
	} else {
	    proxy.invokeTimeOut("StoredServerDelete",
	args,
	callBackOverride,
	onFailure,
	false,
    false,
    3600000)
	}
}
MaduroSLL.Service.prototype.StoredServerEntryPointGet = function (storedServerEntryPointID, sessionID, callBackOverride) {
	/// <summary> Returns a single VBStoredServerEntryPoint data contract. </summary>
	/// <param name="storedServerEntryPointID" type="Number" integer="true">Stored Server Entry Point's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBStoredServerEntryPoint"> VBStoredServerEntryPoint data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"storedServerEntryPointID": storedServerEntryPointID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("StoredServerEntryPointGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StoredServerEntryPointGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.StoredServerEntryPointsGetByStoredServer = function (storedServerID, sessionID, callBackOverride) {
	/// <summary> Returns a VBList containing a list of VBStoredServerEntryPoint data contracts associated with the passed Stored Server ID. </summary>
	/// <param name="storedServerID" type="Number" integer="true">Stored Server's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBStoredServerEntryPoint data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"storedServerID": storedServerID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("StoredServerEntryPointsGetByStoredServer",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StoredServerEntryPointsGetByStoredServer",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.StoredServerEntryPointAdd = function (vbStoredServerEntryPoint, sessionID, callBackOverride) {
	/// <summary> Adds new Stored Server Entry Point with passed VBStoredServerEntryPoint data contract. </summary>
	/// <param name="vbStoredServerEntryPoint" type="MaduroDC.VBStoredServerEntryPoint">VBStoredServerEntryPoint data contract to add.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBStoredServerEntryPoint"> VBStoredServerEntryPoint data contract of newly added Stored Server Entry Point. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbStoredServerEntryPoint": vbStoredServerEntryPoint,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("StoredServerEntryPointAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StoredServerEntryPointAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.StoredServerEntryPointUpdate = function (vbStoredServerEntryPoint, sessionID, callBackOverride) {
	/// <summary> Updates existing Stored Server Entry Point with passed VBStoredServerEntryPoint data contract. </summary>
	/// <param name="vbStoredServerEntryPoint" type="MaduroDC.VBStoredServerEntryPoint">VBStoredServerEntryPoint data contract to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBStoredServerEntryPoint"> VBStoredServerEntryPoint data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbStoredServerEntryPoint": vbStoredServerEntryPoint,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("StoredServerEntryPointUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StoredServerEntryPointUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.StoredServerEntryPointDelete = function (vbStoredServerEntryPoint, sessionID, callBackOverride) {
	/// <summary> Deletes Stored Server Entry Point with passed VBStoredServerEntryPoint data contract. </summary>
	/// <param name="vbStoredServerEntryPoint" type="MaduroDC.VBStoredServerEntryPoint">VBStoredServerEntryPoint data contract to delete.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbStoredServerEntryPoint": vbStoredServerEntryPoint,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("StoredServerEntryPointDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StoredServerEntryPointDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.StoredServerPublishingPointGet = function (storedServerPublishingPointID, sessionID, callBackOverride) {
	/// <summary> Returns a single VBStoredServerPublishingPoint data contract. </summary>
	/// <param name="storedServerPublishingPointID" type="Number" integer="true">Stored Server Publishing Point's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBStoredServerPublishingPoint"> VBStoredServerPublishingPoint data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"storedServerPublishingPointID": storedServerPublishingPointID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("StoredServerPublishingPointGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StoredServerPublishingPointGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.StoredServerPublishingPointsGetByStoredServer = function (storedServerID, sessionID, callBackOverride) {
	/// <summary> Returns a VBList containing a list of VBStoredServerPublishingPoint data contracts associated with the passed Stored Server ID. </summary>
	/// <param name="storedServerID" type="Number" integer="true">Stored Server's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBStoredServerPublishingPoint data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"storedServerID": storedServerID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("StoredServerPublishingPointsGetByStoredServer",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StoredServerPublishingPointsGetByStoredServer",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.StoredServerPublishingPointsGetAll = function (sessionID, callBackOverride) {
	/// <summary>
	///  Returns a VBList containing a list of VBStoredServerPublishingPoint data contracts
	/// for all stored servers
	/// </summary>
	/// <param name="sessionID">Unique Session GUID</param>
	/// <returns>
	/// VBList of VBStoredServerPublishingPoint data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedStoredServerPublishingPointsGetAll",
			args,
			onSuccess,
			onFailure,
			false,
			true)
		} else {
			proxy.invoke("StoredServerPublishingPointsGetAll",
			args,
			onSuccess,
			onFailure,
			false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedStoredServerPublishingPointsGetAll",
			args,
			callBackOverride,
			onFailure,
			false,
			true)
		} else {
			proxy.invoke("StoredServerPublishingPointsGetAll",
			args,
			callBackOverride,
			onFailure,
			false)
		}
	}
}
MaduroSLL.Service.prototype.StoredServerPublishingPointAdd = function (vbStoredServerPublishingPoint, sessionID, callBackOverride) {
	/// <summary> Adds new Stored Server Publishing Point with passed VBStoredServerPublishingPoint data contract. </summary>
	/// <param name="vbStoredServerPublishingPoint" type="MaduroDC.VBStoredServerPublishingPoint">VBStoredServerPublishingPoint data contract to add.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBStoredServerPublishingPoint"> VBStoredServerPublishingPoint data contract of newly added Stored Server Publishing Point. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbStoredServerPublishingPoint": vbStoredServerPublishingPoint,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("StoredServerPublishingPointAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StoredServerPublishingPointAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.StoredServerPublishingPointUpdate = function (vbStoredServerPublishingPoint, sessionID, callBackOverride) {
	/// <summary> Updates existing Stored Server Publishing Point with passed VBStoredServerPublishingPoint data contract. </summary>
	/// <param name="vbStoredServerPublishingPoint" type="MaduroDC.VBStoredServerPublishingPoint">VBStoredServerPublishingPoint data contract to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBStoredServerPublishingPoint"> VBStoredServerPublishingPoint data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbStoredServerPublishingPoint": vbStoredServerPublishingPoint,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("StoredServerPublishingPointUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StoredServerPublishingPointUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.StoredServerPublishingPointDelete = function (vbStoredServerPublishingPoint, sessionID, callBackOverride) {
	/// <summary> Deletes Stored Server Publishing Point with passed VBStoredServerPublishingPoint data contract. </summary>
	/// <param name="vbStoredServerPublishingPoint" type="MaduroDC.VBStoredServerPublishingPoint">VBStoredServerPublishingPoint data contract to delete.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbStoredServerPublishingPoint": vbStoredServerPublishingPoint,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("StoredServerPublishingPointDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StoredServerPublishingPointDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.StoredServerPublishingPointSortOrder = function (vbStoredServerPublishingPoints, sessionID, callBackOverride) {
    /// <summary>
    /// Change SortOrder of Stored Server Publishing Points with passed VBStoredServerPublishingPoint data contract.
    /// </summary>
    /// <param name="vbStoredServerPublishingPoints">VBStoredServerPublishingPoint data contract to sort.</param>
    /// <param name="sessionID">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBVoidData">VBVoidData data contract. If an exception is thrown, the .Exception property will be populated.</returns>

    var args = {
        "vbStoredServerPublishingPoints": vbStoredServerPublishingPoints,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("StoredServerPublishingPointSortOrder",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("StoredServerPublishingPointSortOrder",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.PlayContentStart = function (contentID, sessionID, callBackOverride) {
	/// <summary> Selects an instance to play for the passed ContentID and returns a VBContentInstance data contract containing information about the selected instance, general information about the content, a generated URL to play, and an ActivityLogID for the play event. </summary>
	/// <param name="contentID" type="Number" integer="true">Unique numeric ID of Content to play.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBContentInstance"> VBContentInstance data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPlayContentStart",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PlayContentStart",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPlayContentStart",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PlayContentStart",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}
MaduroSLL.Service.prototype.PlayContentStop = function (activityLogID, sessionID, callBackOverride) {
	/// <summary> Stops playing content by closing-out the passed Activity Log event. </summary>
	/// <param name="activityLogID" type="Number" integer="true">Unique numeric ID of Activity Log event to close-out.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"activityLogID": activityLogID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPlayContentStop",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PlayContentStop",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPlayContentStop",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PlayContentStop",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}
MaduroSLL.Service.prototype.CategoryAdd = function (vbCategory, sessionID, callBackOverride) {
	/// <summary> Adds a category record to the database. </summary>
	/// <param name="vbCategory" type="MaduroDC.VBCategory">VB Category</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	/// <example>CategoryAdd(vbCategory, "0FFB13F8-11CE-46B5-AA41-5B2703013086")</example>

	var args = {
		"vbCategory": vbCategory,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CategoryAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CategoryAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.CategoryAddByUser = function (vbCategory, contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Adds a category record to the database and assigns passed content id to that newly created category.
	/// This method is called by user and not the admin
	/// </summary>
	/// <param name="vbCategory" type="MaduroDC.VBCategory">VB Category</param>
	/// <param name="contentID" type="Int">ContentID</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	/// <example>CategoryAdd(vbCategory,23, "0FFB13F8-11CE-46B5-AA41-5B2703013086")</example>

	var args = {
		"vbCategory": vbCategory,
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedCategoryAddByUser",
			args,
			onSuccess,
			onFailure,
			false,
			true)
		} else {
			proxy.invoke("CategoryAddByUser",
			args,
			onSuccess,
			onFailure,
			false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedCategoryAddByUser",
			args,
			callBackOverride,
			onFailure,
			false,
			true)
		} else {
			proxy.invoke("CategoryAddByUser",
			args,
			callBackOverride,
			onFailure,
			false)
		}
	}
}




MaduroSLL.Service.prototype.CategoryUpdate = function (vbCategory, sessionID, callBackOverride) {
	/// <summary> Updates a category record </summary>
	/// <param name="vbCategory" type="MaduroDC.VBCategory">The category object to update</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	/// <example>CategoryUpdate(vbCategoryObj, "0FFB13F8-11CE-46B5-AA41-5B2703013086")</example>

	var args = {
		"vbCategory": vbCategory,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CategoryUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CategoryUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.CategoryMove = function (vbCategory, sessionID, callBackOverride) {
	/// <summary> Moves a category from one parent to another </summary>
	/// <param name="vbCategory" type="MaduroDC.VBCategory">VB Category</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	/// <example>CategoryMove(vbCategory, "0FFB13F8-11CE-46B5-AA41-5B2703013086")</example>

	var args = {
		"vbCategory": vbCategory,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CategoryMove",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CategoryMove",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.CategoryDelete = function (vbCategory, sessionID, cascadeDelete, callBackOverride) {
	/// <summary> Deletes a category record - optional flag allows for cascading delete of content </summary>
	/// <param name="vbCategory" type="MaduroDC.VBCategory">The category object to delete</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <param name="cascadeDelete" type="Boolean">Cascade Delete</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	/// <example>CategoryDelete(vbCategoryObj, "0FFB13F8-11CE-46B5-AA41-5B2703013086", true)</example>

	var args = {
		"vbCategory": vbCategory,
		"sessionID": sessionID,
		"cascadeDelete": cascadeDelete
	};
	if (!callBackOverride) {
		proxy.invoke("CategoryDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CategoryDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.MultipleCategoriesDelete = function (vbCategories, sessionID, cascadeDelete, callBackOverride) {
    /// <summary> Deletes a category record - optional flag allows for cascading delete of content </summary>
    /// <param name="vbCategory" type="List<MaduroDC.VBCategory>">The category list object to delete</param>
    /// <param name="sessionID" type="String">Session ID</param>
    /// <param name="cascadeDelete" type="Boolean">Cascade Delete</param>
    /// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
    /// <example>CategoryDelete(vbCategoryObj, "0FFB13F8-11CE-46B5-AA41-5B2703013086", true)</example>

    var args = {
        "vbCategories": vbCategories,
        "sessionID": sessionID,
        "cascadeDelete": cascadeDelete
    };
    if (!callBackOverride) {
        proxy.invoke("MultipleCategoriesDelete",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("MultipleCategoriesDelete",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.MultipleContentDelete = function (vbContent, sessionID, callBackOverride) {

    var args = {
        "vbContent": vbContent,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invokeTimeOut("MultipleContentDelete",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invokeTimeOut("MultipleContentDelete",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.CategoriesGetAll = function (sessionID, callBackOverride) {
	/// <summary> Returns a collection of VBCategory objects </summary>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBList">VBList of VBCategory data contracts</returns>
	/// <example>CategoryGetAll("0FFB13F8-11CE-46B5-AA41-5B2703013086")</example>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedCategoriesGetAll",
			args,
			onSuccess,
			onFailure,
			false,
			true)
		} else {
			proxy.invoke("CategoriesGetAll",
			args,
			onSuccess,
			onFailure,
			false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedCategoriesGetAll",
			args,
			callBackOverride,
			onFailure,
			false,
			true)
		} else {
			proxy.invoke("CategoriesGetAll",
			args,
			callBackOverride,
			onFailure,
			false)
		}
	}
}
MaduroSLL.Service.prototype.CategoriesGetAllWithUserPermissions = function (userID, sessionID, callBackOverride) {
	/// <summary> Returns a collection of VBCategory data contracts Each VBCategory object will contain: ContentPrivledges that exist for passed userID. </summary>
	/// <param name="userID" type="Number" integer="true">userID</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBList">VBList of VBCategory data contracts</returns>
	/// <example>CategoriesGetAllWithUserPermissions(3, "0FFB13F8-11CE-46B5-AA41-5B2703013086")</example>

	var args = {
		"userID": userID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CategoriesGetAllWithUserPermissions",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CategoriesGetAllWithUserPermissions",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.CategoriesGetAllWithGroupPermissions = function (groupID, sessionID, callBackOverride) {
	/// <summary> Returns a collection of VBCategory data contracts Each VBCategory object will contain: ContentPrivledges that exist for passed groupID. </summary>
	/// <param name="groupID" type="Number" integer="true">groupID</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBList">VBList of VBCategory data contracts</returns>
	/// <example>CategoriesGetAllWithGroupPermissions(4, "0FFB13F8-11CE-46B5-AA41-5B2703013086")</example>

	var args = {
		"groupID": groupID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CategoriesGetAllWithGroupPermissions",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CategoriesGetAllWithGroupPermissions",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
//
MaduroSLL.Service.prototype.FeatureSetPermissionsUpdateByGroup = function (vbFeatureSets, groupID, sessionID, callBackOverride) {
	/// <summary> Replaces all FeatureSet permissions for the passed Group ID with the FeatureSets in the passed VBList. </summary>
	/// <param name="vbFeatureSets" type="MaduroDC.VBList">VBList of VBFeatureSet data contracts to replace.</param>
	/// <param name="userID" type="Number" integer="true">User's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbFeatureSets": vbFeatureSets,
		"groupID": groupID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FeatureSetPermissionsUpdateByGroup",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("FeatureSetPermissionsUpdateByGroup",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.FeatureSetPermissionsUpdateByUser = function (vbFeatureSets, userID, sessionID, callBackOverride) {
	/// <summary> Replaces all FeatureSet permissions for the passed User ID with the FeatureSets in the passed VBList. </summary>
	/// <param name="vbFeatureSets" type="MaduroDC.VBList">VBList of VBFeatureSet data contracts to replace.</param>
	/// <param name="userID" type="Number" integer="true">User's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbFeatureSets": vbFeatureSets,
		"userID": userID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FeatureSetPermissionsUpdateByUser",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("FeatureSetPermissionsUpdateByUser",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}





MaduroSLL.Service.prototype.ContentPermissionsUpdateByCategoryByUser = function (userID, categoryID, vbContent, sessionID, callBackOverride) {
	/// <summary>
	/// Replaces all Content permissions for the passed UserID in the specified Category
	/// Take UserID, categoryID, collection of Content Objects
	///		Each Content Object will have:
	///			- it's Content Permission Object
	/// </summary>
	/// <param name="userID" type="Number" integer="true">userID</param>
	/// <param name="categoryID" type="Number" integer="true">categoryID</param>
	/// <param name="vbContent" type="MaduroDC.VBList">VBList of VBContent data contracts to replace.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"userID": userID,
		"categoryID": categoryID,
		"vbContent": vbContent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentPermissionsUpdateByCategoryByUser",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentPermissionsUpdateByCategoryByUser",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}




MaduroSLL.Service.prototype.ContentPermissionsUpdateByCategoryByGroup = function (groupID, categoryID, vbContent, sessionID, callBackOverride) {
	/// <summary>
	/// Replaces all Content permissions for the passed GroupID in the specified Category
	/// Take UserID, categoryID, collection of Content Objects
	///		Each Content Object will have:
	///			- it's Content Permission Object
	/// </summary>
	/// <param name="groupID" type="Number" integer="true">groupID</param>
	/// <param name="categoryID" type="Number" integer="true">categoryID</param>
	/// <param name="vbContent" type="MaduroDC.VBList">VBList of VBContent data contracts to replace.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"groupID": groupID,
		"categoryID": categoryID,
		"vbContent": vbContent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentPermissionsUpdateByCategoryByGroup",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentPermissionsUpdateByCategoryByGroup",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentGetByUserByContent = function (userID, contentID, sessionID, callBackOverride) {
	/// <summary> Returns a VBContent data contract that matches passed Content ID and to which passed userID has privledges. This VBContent Object will exist only if Content record has a permission bridge table record for the passed user. This VBContent Object will contain any categories which contain said content </summary>
	/// <param name="userID" type="Number" integer="true">userID</param>
	/// <param name="contentID" type="Number" integer="true">contentID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBContent">MaduroDC.VBContent</returns>

	var args = {
		"userID": userID,
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentGetByUserByContent",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentGetByUserByContent",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.CategoryPermissionsUpdateByUser = function (userID, vbCategory, sessionID, callBackOverride) {

	/// <summary>
	/// Replaces all Category permissions for the passed UserID
	/// Take UserID, collection of Category Objects
	///		Each Category Object will have:
	///			- it's Category Permission Object
	/// </summary>
	/// <param name="userID" type="Number" integer="true">userID</param>
	/// <param name="vbCategory" type="MaduroDC.VBCategory[]">List of VBCategory data contracts to replace.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"userID": userID,
		"vbCategory": vbCategory,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CategoryPermissionsUpdateByUser",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CategoryPermissionsUpdateByUser",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.CategoryPermissionsUpdateByGroup = function (groupID, vbCategory, sessionID, callBackOverride) {

	/// <summary>
	/// Replaces all Category permissions for the passed GroupID
	/// Take UserID, collection of Category Objects
	///		Each Category Object will have:
	///			- it's Category Permission Object
	/// </summary>
	/// <param name="groupID" type="Number" integer="true">groupID</param>
	/// <param name="vbCategory" type="MaduroDC.VBCategory[]">List of VBCategory data contracts to replace.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"groupID": groupID,
		"vbCategory": vbCategory,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CategoryPermissionsUpdateByGroup",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CategoryPermissionsUpdateByGroup",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}




MaduroSLL.Service.prototype.ContentPermissionsUpdateUncategorizedByUser = function (userID, vbContent, sessionID, callBackOverride) {

	/// <summary>
	/// Replaces all Content permissions for the passed UserID that do not belong to a Category
	/// Take UserID, collection of Content Objects
	///		Each Content Object will have:
	///			- it's Content Permission Object
	/// </summary>
	/// <param name="userID" type="Number" integer="true">userID</param>
	/// <param name="vbContent" type="MaduroDC.VBContent[]">List of VBContent data contracts to replace.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"userID": userID,
		"vbContent": vbContent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentPermissionsUpdateUncategorizedByUser",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentPermissionsUpdateUncategorizedByUser",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}



MaduroSLL.Service.prototype.ContentPermissionsUpdateUncategorizedByGroup = function (groupID, vbContent, sessionID, callBackOverride) {

	/// <summary>
	/// Replaces all Content permissions for the passed GroupID that do not belong to a Category
	/// Take groupID, collection of Content Objects
	///		Each Content Object will have:
	///			- it's Content Permission Object
	/// </summary>
	/// <param name="groupID" type="Number" integer="true">groupID</param>
	/// <param name="vbContent" type="MaduroDC.VBContent[]">List of VBContent data contracts to replace.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"groupID": groupID,
		"vbContent": vbContent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentPermissionsUpdateUncategorizedByGroup",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentPermissionsUpdateUncategorizedByGroup",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.ContentPermissionsUpdateByUsers = function (vbContentPermissions, sessionID, callBackOverride) {

    /// <summary>
    /// Updates ContentUserPermissions in the passed VBList if any permission has been changed.
    /// Note: VBContentPermission.ContentID, VBContentPermission.UserGroupID and VBContentPermission.IsCustomized are required.
    /// </summary>
    /// <param name="vbContentPermissions" type="MaduroDC.VBContentPermission[]">List of VBContentPermission data contracts to update.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList">List of user IDs that are actually updated</returns>
    var args = {
        "vbContentPermissions": vbContentPermissions,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EmbedContentPermissionsUpdateByUsers",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("ContentPermissionsUpdateByUsers",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EmbedContentPermissionsUpdateByUsers",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("ContentPermissionsUpdateByUsers",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}

MaduroSLL.Service.prototype.ContentPermissionsUpdateByUser = function (userID, vbContent, sessionID, callBackOverride) {

	/// <summary>
	/// Replaces all ContentUserPermissions for the passed UserID
	/// with the ContentUserPermissions in the passed VBList.
	/// </summary>
	/// <param name="userID" type="Number" integer="true">userID</param>
	/// <param name="vbContent" type="MaduroDC.VBContent[]">List of VBContent data contracts to replace.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"userID": userID,
		"vbContent": vbContent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentPermissionsUpdateByUser",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentPermissionsUpdateByUser",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentPermissionsUpdateByUser",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentPermissionsUpdateByUser",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentPermissionsUpdateByGroups = function (vbContentPermissions, sessionID, callBackOverride) {

    /// <summary>
    /// Update ContentGroupPermissions in the passed VBList if any permissions has been changed.
    /// Note: VBContentPermission.ContentID, VBContentPermission.UserGroupID and VBContentPermission.IsCustomized are required.
    /// </summary>
    /// <param name="vbContent" type="MaduroDC.VBContentPermission[]">List of VBContentPermission data contracts to replace.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList">List of group IDs that are actually updated </returns>
    var args = {
        "vbContentPermissions": vbContentPermissions,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EmbedContentPermissionsUpdateByGroups",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("ContentPermissionsUpdateByGroups",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EmbedContentPermissionsUpdateByGroups",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("ContentPermissionsUpdateByGroups",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}

MaduroSLL.Service.prototype.ContentPermissionsUpdateByGroup = function (groupID, vbContent, sessionID, callBackOverride) {

	/// <summary>
	/// Replaces all ContentUserPermissions for the passed GrouID
	/// with the ContentUserPermissions in the passed VBList.
	/// </summary>
	/// <param name="groupID" type="Number" integer="true">groupID</param>
	/// <param name="vbContent" type="MaduroDC.VBContent[]">List of VBContent data contracts to replace.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"groupID": groupID,
		"vbContent": vbContent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentPermissionsUpdateByGroup",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentPermissionsUpdateByGroup",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentPermissionsUpdateByGroup",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentPermissionsUpdateByGroup",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.PlayContentStartWithPlayerController = function (contentID, sessionID, callBackOverride) {


	/// <summary>
	/// Selects an instance to play for the passed ContentID and
	/// returns:
	/// - A VBContentInstance data contract containing information
	///   about the selected instance, general information about the content,
	///   a generated URL to play, and an ActivityLogID for the play event.
	/// - A VBPlayerController data contract containing an object tag and
	///   JavaScript to controll the appropriate client-side player.
	/// </summary>
	/// <param name="contentID" type="Number" integer="true">Unique numeric ID of Content to play.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBPlayContentInfo">
	/// VBPlayContentInfo data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>


	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPlayContentStartWithPlayerController",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PlayContentStartWithPlayerController",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPlayContentStartWithPlayerController",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PlayContentStartWithPlayerController",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}

}

MaduroSLL.Service.prototype.UserClone = function (vbUser, sessionID, callBackOverride) {


	/// <summary>
	/// Clones existing user.
	/// </summary>
	/// <param name="vbUser" type="MaduroDC.VBUser">VBUser data contract of user to clone.</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBUser">MaduroDC.VBUser</returns>


	var args = {
		"vbUser": vbUser,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("UserClone",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("UserClone",
	args,
	callBackOverride,
	onFailure,
	false)
	}

}

MaduroSLL.Service.prototype.GroupClone = function (vbGroup, sessionID, callBackOverride) {


	/// <summary>
	/// Clones existing group with passed VBGroup data contract.
	/// </summary>
	/// <param name="vbGroup" type="MaduroDC.VBGroup">VBGroup data contract to clone.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBGroup">
	/// VBGroup data contract of cloned group.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>


	var args = {
		"vbGroup": vbGroup,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("GroupClone",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("GroupClone",
	args,
	callBackOverride,
	onFailure,
	false)
	}

}

MaduroSLL.Service.prototype.TaskGetAll = function (sessionID, callBackOverride) {


	/// <summary>
	/// Returns a collection of VBTask objects but excludes private.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>


	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("TaskGetAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("TaskGetAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}

}

MaduroSLL.Service.prototype.TaskUpdate = function (vbTask, sessionID, callBackOverride) {


	/// <summary>
	/// Updates existing task with passed VBTask data contract but excludes private.
	/// </summary>
	/// <param name="vbTask" type="MaduroDC.VBTask">VBTask data contract to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBTask">
	/// VBTask data contract of updated task.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>

	var args = {
		"vbTask": vbTask,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("TaskUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("TaskUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}

}

MaduroSLL.Service.prototype.TaskRunNow = function (taskID, sessionID, callBackOverride) {


	/// <summary>
	/// Tells the Task Service to start (i.e. run) the task as soon as possible (i.e. now).
	/// Used by Admin UI.
	/// </summary>
	/// <param name="taskID" type="Number" integer="true">Task's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>

	var args = {
		"taskID": taskID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("TaskRunNow",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("TaskRunNow",
	args,
	callBackOverride,
	onFailure,
	false)
	}

}

MaduroSLL.Service.prototype.TaskGet = function (taskID, sessionID, callBackOverride) {


	/// <summary>
	/// Returns a single VBTask data contract but excludes private.
	/// Used by Admin UI.
	/// </summary>
	/// <param name="taskID" type="Number" integer="true">Task's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBTask">
	/// VBTask data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>

	var args = {
		"taskID": taskID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("TaskGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("TaskGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}

}

MaduroSLL.Service.prototype.KeywordAdd = function (vbKeyword, sessionID, callBackOverride) {
	/// <summary>
	/// Adds a keyword record to the database.
	/// </summary>
	/// <param name="vbKeyword" type="MaduroDC.VBKeyword">VB Keyword</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	/// <example>KeywordAdd(vbKeyword, "0FFB13F8-11CE-46B5-AA41-5B2703013086")</example>
	var args = {
		"vbKeyword": vbKeyword,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("KeywordAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("KeywordAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.KeywordUpdate = function (vbKeyword, sessionID, callBackOverride) {
	/// <summary>
	/// Updates a keyword record
	/// </summary>
	/// <param name="vbKeyword" type="MaduroDC.VBKeyword">The keyword object to update</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	/// <example>KeywordUpdate(vbKeywordObj, "0FFB13F8-11CE-46B5-AA41-5B2703013086")</example>
	var args = {
		"vbKeyword": vbKeyword,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("KeywordUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("KeywordUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.KeywordDelete = function (vbKeyword, sessionID, callBackOverride) {
	/// <summary>
	/// Deletes a keyword record - optional flag allows for cascading delete of content
	/// </summary>
	/// <param name="vbKeyword" type="MaduroDC.VBKeyword">The keyword object to delete</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <param name="cascadeDelete" type="Boolean">Cascade Delete</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	/// <example>KeywordDelete(vbKeywordObj, "0FFB13F8-11CE-46B5-AA41-5B2703013086", true)</example>
	var args = {
		"vbKeyword": vbKeyword,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("KeywordDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("KeywordDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.KeywordsGetAll = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns a collection of VBKeyword objects
	/// </summary>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBList">VBList of VBKeyword data contracts</returns>
	/// <example>KeywordsGetAll("0FFB13F8-11CE-46B5-AA41-5B2703013086")</example>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("KeywordsGetAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("KeywordsGetAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.KeywordsGetByContentID = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Retrieves all keywords for a content record.
	/// </summary>
	/// <param name="contentID">The content record requested</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="VBList<VBKeyword>">A list of Keywords</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedKeywordsGetByContentID",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("KeywordsGetByContentID",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedKeywordsGetByContentID",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("KeywordsGetByContentID",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.CategoriesGetByContentID = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Retrieves all categories for a content record.
	/// </summary>
	/// <param name="contentID">The content record requested</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="VBList<VBCategory>">A list of Categories</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedCategoriesGetByContentID",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("CategoriesGetByContentID",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedCategoriesGetByContentID",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("CategoriesGetByContentID",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentInstanceGetWithMetadata = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Uses the Content Search to find the content record for the passed ContentID and
	/// returns a VBContentInstance data contract containing information
	/// about the selected instance, general information about the content,
	/// and a generated URL to play.
	/// </summary>
	/// <param name="contentID" type="Number" integer="true">Unique numeric ID of Content to play.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBContentInstance">VBContentInstance data contract.</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentInstanceGetWithMetadata",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentInstanceGetWithMetadata",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.ContentInstanceGetAll = function (contentID, useCache, sessionID, callBackOverride) {
	/// <summary> Returns the Content meeting passed contentID criteria for which the user has permissions (either directly or via his/her group memberships). </summary>
	/// <param name="contentID" type="int">ID of the Content record.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBContent data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"contentID": contentID,
		"useCache": useCache,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentInstanceGetAll",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentInstanceGetAll",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentInstanceGetAll",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentInstanceGetAll",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.PlayContentLogStart = function (vbContentInstance, sessionID, callBackOverride) {
	/// <summary>
	/// Takes a VBContentInstance, logs the Playing of the content in the database,
	/// and returns the ActivityLogID for the log entry inside the returned VBContentInstance.
	/// </summary>
	/// <param name="vbContentInstance" type="MaduroDC.VBContentInstance">VBContentInstance data contract.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBContentInstance">VBContentInstance data contract.</returns>
	var args = {
		"vbContentInstance": vbContentInstance,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPlayContentLogStart",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PlayContentLogStart",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPlayContentLogStart",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PlayContentLogStart",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.PlayContentLogStartOrResume = function (activityLogID, vbContentInstance, sessionID, callBackOverride) {
    /// <summary>
    /// Takes a VBContentInstance, logs the Playing of the content in the database,
    /// and returns the ActivityLogID for the log entry inside the returned VBContentInstance.
    /// </summary>
    /// <param name="vbContentInstance" type="MaduroDC.VBContentInstance">VBContentInstance data contract.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBContentInstance">VBContentInstance data contract.</returns>
    var args = {
        "activityLogID": activityLogID,
        "vbContentInstance": vbContentInstance,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EmbedPlayContentLogStartOrResume",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("PlayContentLogStartOrResume",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EmbedPlayContentLogStartOrResume",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("PlayContentLogStartOrResume",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}

MaduroSLL.Service.prototype.PlayCliporPlaylistContentLogStart = function (ContentID, sessionID, callBackOverride) {
	/// <summary>
	/// Takes a clip or playlist content id and logs the playing of a clip or
	/// </summary>
	/// <param name="ContentID">content id of a clip or playlist</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBIntData</returns>
	var args = {
		"ContentID": ContentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPlayCliporPlaylistContentLogStart",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PlayCliporPlaylistContentLogStart",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPlayCliporPlaylistContentLogStart",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PlayCliporPlaylistContentLogStart",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.PlayCliporPlaylistContentLogStartOrResume = function (activityLogID, ContentID, sessionID, callBackOverride) {
    /// <summary>
    /// Takes a clip or playlist content id and logs the playing of a clip or
    /// </summary>
    /// <param name="ContentID">content id of a clip or playlist</param>
    /// <param name="sessionID">Unique session GUID.</param>
    /// <returns>MaduroDC.VBIntData</returns>
    var args = {
        "activityLogID": activityLogID,
        "ContentID": ContentID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EmbedPlayCliporPlaylistContentLogStart",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("PlayCliporPlaylistContentLogStartOrResume",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EmbedPlayCliporPlaylistContentLogStart",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("PlayCliporPlaylistContentLogStartOrResume",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}

MaduroSLL.Service.prototype.PlayContentLoadWithPlayerController = function (contentID, sessionID, allowUnfiltered, lyncTypeInstance , callBackOverride) {
    /// <summary>
    /// Uses the Content Search to find the content record for the passed ContentID and
    /// returns a VBContentInstance data contract containing information
    /// about the selected instance, general information about the content,
    /// and a generated URL to play.
    /// Also returns a VBPlayerController data contract containing an object tag and
    ///   JavaScript to control the appropriate client-side player.
    /// </summary>
    /// <param name="contentID" type="Number" integer="true">Unique numeric ID of Content to play.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <param name="allowUnfiltered" type="String">allowUnfiltered.</param>
    /// <returns type="MaduroDC.VBPlayContentInfo">VBPlayContentInfo data contract.</returns>
    var args = {
        "contentID": contentID, "sessionID": sessionID
    };

    var args2 = {
        "contentID": contentID, "sessionID": sessionID, "allowUnfiltered": allowUnfiltered, "lyncTypeInstance": lyncTypeInstance
    }
if (!callBackOverride) {
    if (this.isEmbedded) {
        JSONPproxy.invoke("EmbedPlayContentLoadWithPlayerController",
						args,
						onSuccess,
						onFailure,
						false,
						true)
    } else {
        proxy.invoke("PlayContentLoadWithPlayerController",
						args2,
						onSuccess,
						onFailure,
						false)
    }
} else {
    if (this.isEmbedded) {
        JSONPproxy.invoke("EmbedPlayContentLoadWithPlayerController",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
    } else {
        proxy.invoke("PlayContentLoadWithPlayerController",
						args2,
						callBackOverride,
						onFailure,
						false)
    }
}
}

MaduroSLL.Service.prototype.ContentCommentsGet = function (contentID, commentPage, commentCount, sessionID, callBackOverride) {
	/// <summary>
	/// Get the list of comments for the selected Content, paged via the page number and number of items per page.
	/// </summary>
	/// <param name="contentID">The ID of the Content record</param>
	/// <param name="commentPage">The page number to return</param>
	/// <param name="commentCount">The number of records to return</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBContentCommentSet</returns>
	var args = {
		"contentID": contentID,
		"commentPage": commentPage,
		"commentCount": commentCount,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentCommentsGet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentCommentsGet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentCommentsGet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentCommentsGet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentCommentAdd = function (comment, contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Add a new comment to a Content record
	/// </summary>
	/// <param name="comment">The comment object</param>
	/// <param name="contentID">The ID of the Content record</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"comment": comment,
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentCommentAdd",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentCommentAdd",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentCommentAdd",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentCommentAdd",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentCommentDelete = function (comment, sessionID, callBackOverride) {
	/// <summary>
	/// Delete a comment from a Content record.
	/// </summary>
	/// <param name="comment">The comment to delete</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"comment": comment,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentCommentDelete",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentCommentDelete",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentCommentDelete",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentCommentDelete",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentViewCountGet = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns the current view count for a given Content ID
	/// </summary>
	/// <param name="contentID" type="Number" integer="true">Unique numeric ID of the Content.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns>A VBIntData with the total view count</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentViewCountGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentViewCountGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentViewCountIncrement = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Increments and returns the view count for a given Content ID
	/// </summary>
	/// <param name="contentID" type="Number" integer="true">Unique numeric ID of the Content.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns>A VBIntData with the total view count</returns>
	var args = {
		"contentID": contentID, "sessionID": sessionID
	};

	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentViewCountIncrement",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentViewCountIncrement",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentViewCountIncrement",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentViewCountIncrement",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentRatingGet = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns the current rating for a given Content ID
	/// </summary>
	/// <param name="contentID" type="Number" integer="true">Unique numeric ID of the Content.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns>A VBContentRating object with the average rating and number of ratings</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentRatingGet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentRatingGet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentRatingGet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentRatingGet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentRatingSet = function (contentID, userRating, sessionID, callBackOverride) {
	/// <summary>
	/// Calculates a new average rating for a given Content ID and returns it
	/// </summary>
	/// <param name="contentID" type="int">The Content ID to add this rating to</param>
	/// <param name="userRating" type="double">The rating the user gave this content</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns>A VBContentRating with the total view count</returns>
	var args = {
		"contentID": contentID,
		"userRating": userRating,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentRatingSet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentRatingSet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentRatingSet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentRatingSet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentDescriptionUpdate = function (instance, sessionID, callBackOverride) {
	/// <summary>
	/// Updates the Description of this instance's Content (by Content ID)
	/// </summary>
	/// <param name="instance" type="MaduroDC.VBContentInstance">VBContentInstance data contract to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"instance": instance,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentDescriptionUpdate",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentDescriptionUpdate",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentDescriptionUpdate",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentDescriptionUpdate",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}


MaduroSLL.Service.prototype.ContentTitleUpdate = function (instance, sessionID, callBackOverride) {
	/// <summary>
	/// Updates the title of this instance's Content (by Content ID)
	/// </summary>
	/// <param name="instance" type="MaduroDC.VBContentInstance">VBContentInstance data contract to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"instance": instance,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentTitleUpdate",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentTitleUpdate",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentTitleUpdate",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentTitleUpdate",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}


MaduroSLL.Service.prototype.ContentKeywordsUpdate = function (contentID, keywords, sessionID, callBackOverride) {

	/// <summary>
	/// Updates the keywords of this Content record.
	/// Fails and returns an exception if any of the keywords do not exist. You must add new ones first via KeywordAdd
	/// </summary>
	/// <param name="contentID" type="Number">Content Id.</param>
	/// <param name="keywords" type="MaduroDC.VBList">The new list of Content Keywords</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"contentID": contentID,
		"keywords": keywords,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentKeywordsUpdate",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentKeywordsUpdate",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentKeywordsUpdate",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentKeywordsUpdate",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}


MaduroSLL.Service.prototype.ContentFullPermissionsGet = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Determines if the user has any permissions for the
	/// passed content DTO object.
	/// NOTE: The user may have permission for 3 reasons:
	///   1) The user has explicit content-level permission.
	///   2) The user has permission for uncategorized content
	///      IF this content has no categories AND is not private.
	///   3) The user has permission for any category this content is in
	///      IF the content is not private.
	/// </summary>
	/// <param name="contentID">ID of the Content to get the permissions for</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBContentPermission">The complete permissions for this Content</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentFullPermissionsGet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentFullPermissionsGet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentFullPermissionsGet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentFullPermissionsGet",
					args,
					callBackOverride,
					onFailure,
					false)
		}
	}
}



MaduroSLL.Service.prototype.ContentRelatedContentGet = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Gets a list of the related content for a content piece:
	/// 1. If the user has published his own list of related content for this item in the database, use those and exit.
	/// 2. If the user has not published his own list and AutogenRelatedContent is true, auto-generate a list of related content
	///		(Currently based on the first 10 items that are in at least one of the same Categories)
	///	3. Otherwise, return an empty list: there is no related content.
	/// </summary>
	/// <param name="contentID">ID of the Content to get the related Content for</param>
	/// <param name="sessionID">Unique session GUID.</param>
    /// <returns>A list of the related Content items</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentRelatedContentGet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {

		    proxy.invokeTimeOut("ContentRelatedContentGet",
						args,
						onSuccess,
						onFailure,
						false,false,900000)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentRelatedContentGet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {

		    proxy.invokeTimeOut("ContentRelatedContentGet",
					args,
					callBackOverride,
					onFailure,
					false, false, 900000)
		}
	}
}

MaduroSLL.Service.prototype.ContentRelatedForSharePointContentGet = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Gets a list of the related content for a content but restricted to the content that the user could also see in SharePoint (see ContentGetAllForSharePointSearch().
	/// We want to make sure the user does not see content here that they would not see in the content returned to SharePoint.
	/// We ignore any content published to user's own list (ContentRelatedSet) because this is a special use of related content based on videos that user would see in SharePoint.
	///	Currently based on the first 10 items that are in at least one of the same Categories.
	/// </summary>
	/// <param name="contentID">ID of the Content to get the related Content for</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>A list of the related Content items</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentRelatedForSharePointContentGet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentRelatedForSharePointContentGet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentRelatedForSharePointContentGet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentRelatedForSharePointContentGet",
					args,
					callBackOverride,
					onFailure,
					false)
		}
	}
}

MaduroSLL.Service.prototype.ContentCategoriesGetAvailableForEdit = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// This method returns the Categories, and CategoryPermissions, for all Categories that either:
	/// 1. Contain the passed Content, or
	/// 2. The current user has Add permissions to
	/// </summary>
	/// <param name="contentID">The content record requested</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBList">A list of Categories</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentCategoriesGetAvailableForEdit",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentCategoriesGetAvailableForEdit",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentCategoriesGetAvailableForEdit",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentCategoriesGetAvailableForEdit",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentCategoriesUpdate = function (contentID, categories, sessionID, callBackOverride) {
	/// <summary>
	/// Updates the Categories of this Content record.
	/// Fails and returns an exception if any of the categories do not exist or you do not have permissions to all of them. You must add new ones first via CategoryAdd
	/// </summary>
	/// <param name="contentID" type="Number" integer="true">Content ID.</param>
	/// <param name="categories" type="MaduroDC.VBCategory[]">The new list of Content Categories</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"contentID": contentID,
		"categories": categories,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentCategoriesUpdate",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentCategoriesUpdate",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentCategoriesUpdate",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentCategoriesUpdate",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.AnnouncementsGet = function (sessionID, callBackOverride) {
	/// <summary>
	/// Return the list of Administrative Broadcasts in the system
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>The list of Announcements</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("AnnouncementsGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("AnnouncementsGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.AnnouncementsClear = function (sessionID, callBackOverride) {
	/// <summary>
	/// Remove all Administrative Broadcasts from the system.
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("AnnouncementsClear",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("AnnouncementsClear",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.AnnouncementsAdd = function (message, sessionID, callBackOverride) {
	/// <summary>
	/// Add a new Administrative Broadcast to the system.
	/// </summary>
	/// <param name="message">The message to be seen by all users</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"message": message,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("AnnouncementsAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("AnnouncementsAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.FavoriteContentGet = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get the list of the current user's Favorites
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>The list of the current user's Favorited VBContent items</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FavoriteContentGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("FavoriteContentGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.MySubmittedContentGet = function (sessionID, callBackOverride) {
	var args = {
		"sessionID": sessionID

	};
	if (!callBackOverride) {
		proxy.invoke("MySubmittedContentGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("MySubmittedContentGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.MySubmittedContentGetFilteredData = function (sessionID, activityStartDate, activityEndDate, callBackOverride) {
    var timeNow = new Date();
    var timezone = timeNow.getTimezoneOffset() / 60;

    var args = {
        "sessionID": sessionID,
        "activityStartDate": activityStartDate,
        "activityEndDate": activityEndDate,
        "timeZoneOffset": timezone
    };

    if (!callBackOverride) {
        proxy.invoke("MySubmittedContentGetFilteredData",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("MySubmittedContentGetFilteredData",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.VideosForApprovalGet = function (sessionID, callBackOverride) {
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("VideosForApprovalGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("VideosForApprovalGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.VideosForApprovalGetByContentID = function (contentID, sessionID, callBackOverride) {
    var args = {
        "contentID": contentID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("VideosForApprovalGetByContentID",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("VideosForApprovalGetByContentID",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.VideosForApprovalGetFilterData = function (sessionID, enumID, callBackOverride) {

    var args = {
        "sessionID": sessionID,
         "enumID": enumID
    };
    if (!callBackOverride) {
        proxy.invoke("VideosForApprovalGetFilterData",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("VideosForApprovalGetFilterData",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}



MaduroSLL.Service.prototype.FeaturedContentGetActive = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get the currently active list of Featured Content
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>The list of Featured Content</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
	    proxy.invokeTimeOut("FeaturedContentGetActive",
	args,
	onSuccess,
	onFailure,
	false, false, 300000)
	} else {
	    proxy.invokeTimeOut("FeaturedContentGetActive",
	args,
	callBackOverride,
	onFailure,
	false, false, 300000)
	}
}

MaduroSLL.Service.prototype.PopularContentGet = function (sessionID, callBackOverride) {
	/// <summary>
	/// This retrieves the 10 Content Records with the highest View Counts
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>the 10 VBContent records with the highest View Counts</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PopularContentGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PopularContentGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PopularContentFirstPageGet = function (sessionID, displayNumber, callBackOverride) {
    /// <summary>
    /// This retrieves the {displayNumber} Content Records with the highest View Counts
    /// </summary>
    /// <param name="sessionID">Unique session GUID.</param>
    /// <param name="displayNumber">Number of records to return</param>
    /// <returns>the {displayNumber} VBContent records with the highest View Counts</returns>
    var args = {
        "sessionID": sessionID,
        "displayNumber": displayNumber
    };
    if (!callBackOverride) {
        proxy.invokeTimeOut("PopularContentFirstPageGet",
	args,
	onSuccess,
	onFailure,
	false, false, 300000)
    } else {
        proxy.invokeTimeOut("PopularContentFirstPageGet",
	args,
	callBackOverride,
	onFailure,
	false, false, 300000)
    }
}


MaduroSLL.Service.prototype.RecommendedContentGet = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get all content that has been recommended to the current user.
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>The list of recommended content</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RecommendedContentGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("RecommendedContentGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.RecentContentGet = function (sessionID, callBackOverride) {
	/// <summary>
	/// This retrieves the 10 Content Records most recently watched, according to the Activity Log
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>Up to 10 VBContent records</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RecentContentGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("RecentContentGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.MyRecentContentGet = function (sessionID, callBackOverride) {
	/// <summary>
	/// This retrieves the 12 Content Records most recently watched by the logged in user, according to the Activity Log
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>Up to 12 VBContent records</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("MyRecentContentGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("MyRecentContentGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.FavoriteContentAdd = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Add a Content item to the current user's Favorites
	/// </summary>
	/// <param name="contentID">The content record to add</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FavoriteContentAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("FavoriteContentAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.FavoriteContentRemove = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Remove a Content item from the current user's Favorites
	/// </summary>
	/// <param name="contentID">The content record to remove</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FavoriteContentRemove",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("FavoriteContentRemove",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.RecommendedContentRemoveFromCurrentUser = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Remove a Content from your Recommended Content list
	/// </summary>
	/// <param name="contentID">The content to remove from your list</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RecommendedContentRemoveFromCurrentUser",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("RecommendedContentRemoveFromCurrentUser",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.RemoveRequiredContentFromCurrentUser = function (contentID, sessionID, callBackOverride) {
    /// <summary>
    /// Remove a Content from your Required Content list
    /// </summary>
    /// <param name="contentID">The content to remove from your list</param>
    /// <param name="sessionID">Unique session GUID.</param>
    /// <returns>MaduroDC.VBVoidData</returns>
    var args = {
        "contentID": contentID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("RemoveRequiredContentFromCurrentUser",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("RemoveRequiredContentFromCurrentUser",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.FeaturedContentAdd = function (vbFeaturedContent, sessionID, callBackOverride) {
	/// <summary>
	/// Add a content record to the Featured Content schedule
	/// </summary>
	/// <param name="vbFeaturedContent">The Featured Content record: ContentID, StartDate, EndDate</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"vbFeaturedContent": vbFeaturedContent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FeaturedContentAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("FeaturedContentAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

/*
MaduroSLL.Service.prototype.RecommendContentToUser = function (vbRecommendedContent, sessionID, callBackOverride) {
	/// <summary>
	/// Add a Content to another user's Recommended Content list
	/// </summary>
	/// <param name="vbRecommendedContent">The Record to add to the system: ContentID, UserID, Message</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"vbRecommendedContent": vbRecommendedContent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RecommendContentToUser",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("RecommendContentToUser",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}*/


MaduroSLL.Service.prototype.RecommendedContentAddToUsers = function (vbRecommendedContent, userIDs, sessionID, callBackOverride) {
	/// <summary>
	/// Add a piece of Recommended Content to the system based on a set of User IDs
	/// </summary>
	/// <param name="vbRecommendedContent">Recommended Content Record</param>
	/// <param name="userIDs">The User IDs to search for</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"vbRecommendedContent": vbRecommendedContent,
		"userIDs": userIDs,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RecommendedContentAddToUsers",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("RecommendedContentAddToUsers",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.RecommendedContentAddToGroups = function (vbRecommendedContent, groupIDs, sessionID, callBackOverride) {
	/// <summary>
	/// Add a piece of Recommended Content to the system based on a set of Group IDs
	/// </summary>
	/// <param name="vbRecommendedContent">Recommended Content Record</param>
	/// <param name="groupIDs">The Group IDs to search for</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"vbRecommendedContent": vbRecommendedContent,
		"groupIDs": groupIDs,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RecommendedContentAddToGroups",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("RecommendedContentAddToGroups",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.LdapServerGetAll = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns a collection of VBLdapServer objects.
	/// </summary>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBList"></returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LdapServerGetAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LdapServerGetAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.LdapServerGet = function (ldapServerID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBLdapServer object by LdapServerID.
	/// </summary>
	/// <param name="ldapServerID" type="Number" integer="true">ldapServerID</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBLdapServer"></returns>
	var args = {
		"ldapServerID": ldapServerID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LdapServerGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LdapServerGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.LdapServerAdd = function (ldapServer, ldapServerTree, sessionID, callBackOverride) {
	/// <summary>
	/// Adds a VBLdapServer and VBLdapServerTree object to the system.
	/// </summary>
	/// <param name="ldapServer" type="MaduroDC.VBLdapServer">ldapServer</param>
	/// <param name="ldapServerTree" type="MaduroDC.VBLdapServerTree">ldapServerTree</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBVoidData"></returns>
	var args = {
		"ldapServer": ldapServer,
		"ldapServerTree": ldapServerTree,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LdapServerAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LdapServerAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.LdapServerUpdate = function (ldapServer, ldapServerTree, sessionID, callBackOverride) {
	/// <summary>
	/// Updates a VBLdapServer and VBLdapServerTree object in the system.
	/// </summary>
	/// <param name="ldapServer" type="MaduroDC.VBLdapServer">ldapServer</param>
	/// <param name="ldapServerTree" type="MaduroDC.VBLdapServerTree">ldapServerTree</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBVoidData"></returns>
	var args = {
		"ldapServer": ldapServer,
		"ldapServerTree": ldapServerTree,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LdapServerUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LdapServerUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.LdapServerDelete = function (ldapServer, sessionID, callBackOverride) {
	/// <summary>
	/// Deletes a VBLdapServer object from the system.
	/// </summary>
	/// <param name="ldapServer" type="MaduroDC.VBLdapServer">ldapServer</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBVoidData"></returns>
	var args = {
		"ldapServer": ldapServer,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LdapServerDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LdapServerDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.LdapServerGetDefault = function (ldapServerTypeID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a default VBLdapServer object based on LDAPSERVERTYPE.
	/// </summary>
	/// <param name="ldapServerTypeID" type="Number" integer="true">ldapServerTypeID</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBLdapServer"></returns>
	var args = {
		"ldapServerTypeID": ldapServerTypeID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LdapServerGetDefault",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LdapServerGetDefault",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.LdapServerTreeGet = function (ldapServerTreeID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBLdapServerTree object by LdapServerTreeID.
	/// </summary>
	/// <param name="ldapServerTreeID" type="Number" integer="true">ldapServerTreeID</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBLdapServerTree"></returns>
	var args = {
		"ldapServerTreeID": ldapServerTreeID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LdapServerTreeGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LdapServerTreeGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.LdapServerTreeGetByServerID = function (ldapServerID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBLdapServerTree object by LdapServerID.
	/// </summary>
	/// <param name="ldapServerID" type="Number" integer="true">ldapServerID</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBLdapServerTree"></returns>
	var args = {
		"ldapServerID": ldapServerID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LdapServerTreeGetByServerID",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LdapServerTreeGetByServerID",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.LdapServerTreeGetDefault = function (ldapServerTypeID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a default VBLdapServerTree object based on LDAPSERVERTYPE.
	/// </summary>
	/// <param name="ldapServerTypeID" type="Number" integer="true">ldapServerTypeID</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBLdapServerTree"></returns>
	var args = {
		"ldapServerTypeID": ldapServerTypeID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LdapServerTreeGetDefault",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LdapServerTreeGetDefault",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.RequiredContentGet = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get the current user's Required Content
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>A list of Required Content for the current user</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RequiredContentGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("RequiredContentGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.MyRecommendedGet = function (sessionID, callBackOverride) {
    /// <summary>
    /// Get the current user's Required Content
    /// </summary>
    /// <param name="sessionID">Unique session GUID.</param>
    /// <returns>A list of Recommended Content by the current user</returns>
    var args = {
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("MyRecommendedGet",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("MyRecommendedGet",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.MyRequiredGet = function (sessionID, callBackOverride) {
    /// <summary>
    /// Get the current user's Required Content
    /// </summary>
    /// <param name="sessionID">Unique session GUID.</param>
    /// <returns>A list of Required Content by the current user</returns>
    var args = {
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("MyRequiredGet",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("MyRequiredGet",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}


MaduroSLL.Service.prototype.MyRecommendedContentFilteredGet = function (vbSearchFilter, sessionID, callBackOverride) {
    /// <summary>
    /// Get the current Popular Content, Filtered like a Content Search
    /// </summary>
    /// <param name="vbSearchFilter">The Search Filters to use</param>
    /// <param name="sessionID">Unique session GUID.</param>
    /// <returns>The list of popular content</returns>
    var args = {
        "vbSearchFilter": vbSearchFilter,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("MyRecommendedContentFilteredGet",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("MyRecommendedContentFilteredGet",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.MyRequiredContentFilteredGet = function (vbSearchFilter, sessionID, callBackOverride) {
    /// <summary>
    /// Get the current Popular Content, Filtered like a Content Search
    /// </summary>
    /// <param name="vbSearchFilter">The Search Filters to use</param>
    /// <param name="sessionID">Unique session GUID.</param>
    /// <returns>The list of popular content</returns>
    var args = {
        "vbSearchFilter": vbSearchFilter,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("MyRequiredContentFilteredGet",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("MyRequiredContentFilteredGet",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}


MaduroSLL.Service.prototype.RecommendedUserGroupGet = function (contentID, userID, sessionID, callBackOverride) {
    /// <summary>
    /// Gets the required users and Group of a content
    /// </summary>
    /// <param name="contentID">Content ID</param>
    /// <param name="userID">userID ID</param>
    /// <param name="sessionID">session ID</param>
    /// <returns></returns>
    var args = {
        "sessionID": sessionID,
        "contentID": contentID,
        "userID": userID
    };
    if (!callBackOverride) {
        proxy.invoke("RecommendedUserGroupGet",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("RecommendedUserGroupGet",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.RequiredUserGroupGet = function (contentID, userID, sessionID, callBackOverride) {
    /// <summary>
    /// Gets the required users and Group of a content
    /// </summary>
    /// <param name="contentID">Content ID</param>
    /// <param name="userID">userID ID</param>
    /// <param name="sessionID">session ID</param>
    /// <returns></returns>
    var args = {
        "sessionID": sessionID,
        "contentID": contentID,
        "userID": userID
    };
    if (!callBackOverride) {
        proxy.invoke("RequiredUserGroupGet",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("RequiredUserGroupGet",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.UnRecommendContent = function (userGroup, userID, sessionID, callBackOverride) {
    /// <summary>
    /// Gets the required users and Group of a content
    /// </summary>
    /// <param name="contentID">Content ID</param>
    /// <param name="userID">userID ID</param>
    /// <param name="sessionID">session ID</param>
    /// <returns></returns>
    var args = {
        "userGroup": userGroup,
        "userID": userID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("UnRecommendContent",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("UnRecommendContent",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

/*
MaduroSLL.Service.prototype.RequiredContentGetAll = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get all Required Content in the system
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>A list of Required Content for all users</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RequiredContentGetAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("RequiredContentGetAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
*/

MaduroSLL.Service.prototype.RequiredContentAddToGroups = function (vbRequiredContent, groupIDs, sessionID, callBackOverride) {
	/// <summary>
	/// Add a piece of Required Content to the system based on a set of Group IDs
	/// </summary>
	/// <param name="vbRequiredContent">Required Content Record</param>
	/// <param name="groupIDs">The Group IDs to search for</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"vbRequiredContent": vbRequiredContent,
		"groupIDs": groupIDs,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RequiredContentAddToGroups",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("RequiredContentAddToGroups",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.RequiredContentAddToUsers = function (vbRequiredContent, userIDs, sessionID, callBackOverride) {
	/// <summary>
	/// Add a piece of Required Content to the system based on a set of User IDs
	/// </summary>
	/// <param name="vbRequiredContent">Required Content Record</param>
	/// <param name="groupIDs">The User IDs to search for</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"vbRequiredContent": vbRequiredContent,
		"userIDs": userIDs,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RequiredContentAddToUsers",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("RequiredContentAddToUsers",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
/*
MaduroSLL.Service.prototype.RequiredContentAddToAll = function (vbRequiredContent, sessionID, callBackOverride) {
	/// <summary>
	/// Add a piece of Required Content to the system for all users
	/// </summary>
	/// <param name="vbRequiredContent">Required Content Record</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"vbRequiredContent": vbRequiredContent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RequiredContentAddToAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("RequiredContentAddToAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.RequiredContentRemoveFromGroups = function (vbRequiredContent, groupIDs, sessionID, callBackOverride) {
	/// <summary>
	/// Remove a piece of Required Content from all users in a set of Groups
	/// </summary>
	/// <param name="contentID">The Content ID to search for</param>
	/// <param name="groupIDs">The Group IDs to search for</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"vbRequiredContent": vbRequiredContent,
		"groupIDs": groupIDs,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RequiredContentRemoveFromGroups",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("RequiredContentRemoveFromGroups",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.RequiredContentRemoveFromUsers = function (vbRequiredContent, userIDs, sessionID, callBackOverride) {

	/// <summary>
	/// Remove a piece of Required Content from a set of users
	/// </summary>
	/// <param name="contentID">The Content ID to search for</param>
	/// <param name="userIDs">The User IDs to search for</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"vbRequiredContent": vbRequiredContent,
		"userIDs": userIDs,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RequiredContentRemoveFromUsers",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("RequiredContentRemoveFromUsers",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
*/

MaduroSLL.Service.prototype.RequiredContentRemoveFromCurrentUser = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Remove a piece of Required Content from the current user
	/// </summary>
	/// <param name="contentID">The Content ID to search for</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RequiredContentRemoveFromCurrentUser",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("RequiredContentRemoveFromCurrentUser",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.LandingWidgetInfoGetByWidget = function (widgetName, sessionID, callBackOverride) {

	/// <summary>
	/// Get the Landing Widget properties for a single widget for the current user
	/// </summary>
	/// <param name="widgetName">The identifying name of the widget</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>The Widget Properties</returns>
	var args = {
		"widgetName": widgetName,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LandingWidgetInfoGetByWidget",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LandingWidgetInfoGetByWidget",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.LandingWidgetInfoGet = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get the Landing Widget Properties for all Widgets for the current user
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>The Widget Properties, listed by widget</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LandingWidgetInfoGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LandingWidgetInfoGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.LandingWidgetPropertySet = function (widgetName, propertyName, propertyValue, sessionID, callBackOverride) {
	/// <summary>
	/// Save a property add or update for a given widget for the current user
	/// </summary>
	/// <param name="widgetName">The identifying name of the widget</param>
	/// <param name="propertyName">The name of the property</param>
	/// <param name="propertyValue">The string value of the property</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"widgetName": widgetName,
		"propertyName": propertyName,
		"propertyValue": propertyValue,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LandingWidgetPropertySet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LandingWidgetPropertySet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.LdapGroupGetAll = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns a collection of all VBLdapGroup objects.
	/// </summary>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBList"></returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LdapGroupGetAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LdapGroupGetAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.LdapGroupGet = function (ldapServers, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a collection of VBLdapGroup objects for the sent list of VBLdapServer objects.
	/// </summary>
	/// <param name="ldapServers" type="MaduroDC.VBList">ldapServers</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBList"></returns>
	var args = {
		"ldapServers": ldapServers,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LdapGroupGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LdapGroupGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.LdapGroupGetPaged = function (ldapServers, searchterm, pageNumber, pageSize, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a collection of VBLdapGroup objects for the sent list of VBLdapServer objects.
	/// </summary>
	/// <param name="ldapServers">ldapServers</param>
	/// <param name="pageNumber">pageNumber</param>
	/// <param name="pageSize">pageSize</param>
	/// <param name="sessionID">sessionID</param>
	/// <returns type="MaduroDC.VBList"></returns>
	var args = {
		"ldapServers": ldapServers,
		"searchterm": searchterm,
		"pageNumber": pageNumber,
		"pageSize": pageSize,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LdapGroupGetPaged",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LdapGroupGetPaged",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.LdapGroupGetTopDirectQuery = function (ldapServers, searchterm, enumSearchComparisonID, size, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a collection of VBLdapGroup objects for the sent list of VBLdapServer objects.
	/// </summary>
	/// <param name="ldapServers">ldapServers</param>
	/// <parma name="enumSearchComparisonID">enumSearchComparisonID</param>
	/// <param name="size">size</param>
	/// <param name="sessionID">sessionID</param>
	/// <returns type="MaduroDC.VBList"></returns>
	var args = {
		"ldapServers": ldapServers,
		"searchterm": searchterm,
		"enumSearchComparisonID": enumSearchComparisonID,
		"size": size,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LdapGroupGetTopDirectQuery",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LdapGroupGetTopDirectQuery",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}



MaduroSLL.Service.prototype.LdapGroupDiscover = function (ldapServers, sessionID, callBackOverride) {
	/// <summary>
	/// Discovers the Groups from the sent list of VBLdapServer objects, and adds them to the database.
	/// </summary>
	/// <param name="ldapServers" type="MaduroDC.VBList">ldapServers</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBVoidData"></returns>
	var args = {
		"ldapServers": ldapServers,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LdapGroupDiscover",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LdapGroupDiscover",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.LdapGroupImport = function (ldapGroups, sessionID, callBackOverride) {
	/// <summary>
	/// Imports a collection of VBLdapGroup objects into the group system.
	/// </summary>
	/// <param name="ldapGroups" type="MaduroDC.VBList">ldapGroups</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBVoidData"></returns>
	var args = {
		"ldapGroups": ldapGroups,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LdapGroupImport",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LdapGroupImport",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.LdapCSVImport = function (appServerID, csvFileName, sessionID, callBackOverride) {
    /// <summary>
    /// Imports a collection of VBLdapGroup objects into the group system.
    /// </summary>
	/// <param name="appServerID">ID of the application server where the file is located</param>
    /// <param name="ldapGroups" type="MaduroDC.VBList">ldapGroups</param>
    /// <param name="sessionID" type="String">sessionID</param>
    /// <returns type="MaduroDC.VBVoidData"></returns>
    var args = {
		"appServerID": appServerID,
        "csvFileName": csvFileName,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("LdapCSVImport",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("LdapCSVImport",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}


MaduroSLL.Service.prototype.CustomFieldsGet = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get a list of the Custom Fields that apply to Content in this system.
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>A list of all Custom Field records</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CustomFieldsGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CustomFieldsGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.CustomFieldAdd = function (field, sessionID, callBackOverride) {
	/// <summary>
	/// Add a new Custom Field to Content in this system.
	/// </summary>
	/// <param name="field">The Custom Field record to add.</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"field": field,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CustomFieldAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CustomFieldAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.CustomFieldUpdate = function (field, sessionID, callBackOverride) {
	/// <summary>
	/// Update the Name of a given custom field.
	/// </summary>
	/// <param name="field">The field to update, and the new value</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"field": field,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CustomFieldUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CustomFieldUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.CustomFieldDelete = function (fieldID, sessionID, callBackOverride) {
	/// <summary>
	/// Remove a Custom Field from the system
	/// </summary>
	/// <param name="fieldID">The field ID to remove the field</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"fieldID": fieldID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CustomFieldDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CustomFieldDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.CustomFieldOptionsGet = function (fieldID, sessionID, callBackOverride) {
	/// <summary>
	/// Get the list of possible values for a Custom Option Field
	/// </summary>
	/// <param name="fieldID">The field to get the options of</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>A list of Custom Field Options</returns>
	var args = {
		"fieldID": fieldID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedCustomFieldOptionsGet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("CustomFieldOptionsGet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedCustomFieldOptionsGet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("CustomFieldOptionsGet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}


MaduroSLL.Service.prototype.CustomFieldOptionAdd = function (fieldID, option, sessionID, callBackOverride) {

	/// <summary>
	/// Add a new possible value to a Custom Field of type Option
	/// </summary>
	/// <param name="fieldID">The id of the Field</param>
	/// <param name="option">The displayed value</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"fieldID": fieldID,
		"option": option,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CustomFieldOptionAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CustomFieldOptionAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}



MaduroSLL.Service.prototype.CustomFieldOptionUpdate = function (newOption, sessionID, callBackOverride) {
	/// <summary>
	/// Change the value of a given Custom Field Option
	/// This method maintains the ID so all Content referencing it will know the new value
	/// </summary>
	/// <param name="newOption">The new displayed value of the Field Option</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>

	var args = {
		"newOption": newOption,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CustomFieldOptionUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CustomFieldOptionUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.CustomFieldOptionDelete = function (fieldOptionValueID, sessionID, callBackOverride) {
	/// <summary>
	/// Remove a selectable Option from a Custom Field
	/// </summary>
	/// <param name="fieldOptionValueID">The Option ID to remove</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>

	var args = {
		"fieldOptionValueID": fieldOptionValueID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CustomFieldOptionDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CustomFieldOptionDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.ContentCustomFieldsGet = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Gets the list of Custom Fields and their values for a piece of Content.
	/// </summary>
	/// <param name="contentID">The content to see the fields of</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>List of Fields, including null ones.</returns>

	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentCustomFieldsGet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentCustomFieldsGet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentCustomFieldsGet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentCustomFieldsGet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}


MaduroSLL.Service.prototype.ContentCustomFieldsSet = function (contentID, fieldSelections, sessionID, callBackOverride) {
	/// <summary>
	/// Set the values of the Custom Fields for a given piece of Content
	/// </summary>
	/// <param name="contentID">The Content to set</param>
	/// <param name="fieldSelections">The selected values for the fields.</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>

	var args = {
		"contentID": contentID,
		"fieldSelections": fieldSelections,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentCustomFieldsSet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentCustomFieldsSet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentCustomFieldsSet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentCustomFieldsSet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}


MaduroSLL.Service.prototype.ContentCustomFieldsClear = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Deletes the value set for the given Content record's given custom Field
	/// </summary>
	/// <param name="contentID">The content item to remove the field value of</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>


	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentCustomFieldsClear",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentCustomFieldsClear",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.ContentCustomFieldClear = function (contentID, fieldID, sessionID, callBackOverride) {
	/// <summary>
	/// Deletes the value set for the given Content record's given custom Field
	/// </summary>
	/// <param name="contentID">The content item to remove the field value of</param>
	/// <param name="fieldID">The custom field to find and clear</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"contentID": contentID,
		"fieldID": fieldID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentCustomFieldClear",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentCustomFieldClear",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.LdapUserLogin = function (ldapServerID, userName, password, applicationID, clientIP, userLanguage, callBackOverride) {
	/// <summary>
	/// Logs-in user using the specified ldapServerID.
	/// </summary>
	/// <param name="ldapServerID" type="Number" integer="true">ldapServerID</param>
	/// <param name="userName" type="String">User login</param>
	/// <param name="password" type="String">User password</param>
	/// <param name="applicationID" type="String">Application ID - Every application allowed to call this
	/// service MUST have an ID in the ClientApplication Table</param>
	/// <param name="clientIP" type="String">Client IP</param>
	/// <param name="userLanguage" type="String">User Language</param>
	/// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>
	var args = {
		"ldapServerID": ldapServerID,
		"userName": userName,
		"password": password,
		"applicationID": applicationID,
		"clientIP": clientIP,
		"userLanguage": userLanguage
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedLdapUserLogin",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("LdapUserLogin",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedLdapUserLogin",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("LdapUserLogin",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}



MaduroSLL.Service.prototype.LdapUserLoginSingleSignOn = function (applicationID, clientIP, userLanguage, callBackOverride) {
    /// <summary>
    /// Logs-in user using single sign on if enabled.
    /// </summary>
    /// <param name="applicationID" type="String">Application ID - Every application allowed to call this
    /// service MUST have an ID in the ClientApplication Table</param>
    /// <param name="clientIP" type="String">Client IP</param>
    /// <param name="userLanguage" type="String">User Language</param>
    /// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>
    var args = {
        "applicationID": applicationID,
        "clientIP": clientIP,
        "userLanguage": userLanguage
    };
    //NOTE: The JSONPproxy proxy cannot be used for LDAP login because the endpoint is never configured with Windows Authentication.
    if (!callBackOverride) {
        proxyAuth.invokeTimeOut("LdapUserLoginSingleSignOn",
						args,
						onSuccess,
						onFailure,
						false,
                        false,
                        300000)
    } else {
        proxyAuth.invokeTimeOut("LdapUserLoginSingleSignOn",
						args,
						callBackOverride,
						onFailure,
						false,
                        false,
                        300000)
    }
}


MaduroSLL.Service.prototype.LdapGetLoginInfo = function (applicationID, clientIP, userLanguage, callBackOverride) {
	/// <summary>
	/// Returns LDAP configuration information.
	/// </summary>
	/// <param name="applicationID" type="String">Application ID - Every application allowed to call this
	/// service MUST have an ID in the ClientApplication Table</param>
	/// <param name="clientIP" type="String">Client IP</param>
	/// <param name="userLanguage" type="String">User Language</param>
	/// <returns type="MaduroDC.VBLdapLoginInfo"></returns>
	var args = {
		"applicationID": applicationID,
		"clientIP": clientIP,
		"userLanguage": userLanguage
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedLdapGetLoginInfo",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("LdapGetLoginInfo",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedLdapGetLoginInfo",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("LdapGetLoginInfo",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentLinksGet = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// This method gets a list of the links and attachments for a content record.
	/// </summary>
	/// <param name="contentID">The Content to get the links for</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>A list of the Content's Links and Attachments</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentLinksGet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentLinksGet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentLinksGet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentLinksGet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentLinkAddWithURL = function (link, sessionID, callBackOverride) {
	/// <summary>
	/// This method adds a Link to a piece of content.
	/// Note: To attach an uploaded file to a content item, use ContentFileUpload instead.
	/// </summary>
	/// <param name="link">The URL, the content to attach it to, and the various names.</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>VBVoidData</returns>
	var args = {
		"link": link,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentLinkAddWithURL",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentLinkAddWithURL",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentLinkAddWithURL",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentLinkAddWithURL",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentLinkUpdateWithURL = function (link, sessionID, callBackOverride) {
	/// <summary>
	/// Updates the metadata for a Link or Attachment, without changing the file itself.
	/// If you intend to upload a new file to the Attachment, use ContentFileUpdate, and then use this method if necessary to update any relevant metadata.
	/// </summary>
	/// <param name="link">The URL, the content to attach it to, and the various names.</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>VBVoidData</returns>
	var args = {
		"link": link,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentLinkUpdateWithURL",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentLinkUpdateWithURL",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentLinkUpdateWithURL",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentLinkUpdateWithURL",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentLinkDelete = function (contentLinkID, sessionID, callBackOverride) {
	/// <summary>
	/// Deletes the record and deletes any related uploaded file.
	/// </summary>
	/// <param name="contentLinkID">The ID to remove from the system</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>VBVoidData</returns>
	var args = {
		"contentLinkID": contentLinkID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentLinkDelete",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentLinkDelete",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentLinkDelete",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentLinkDelete",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.LicenseGetAll = function (sessionID, callBackOverride) {
	/// <summary> Returns a VBList of VBLicense data contracts for ALL licenses regardless of validity. </summary>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LicenseGetAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LicenseGetAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.LicenseGetAllValid = function (sessionID, callBackOverride) {
	/// <summary> Returns a VBList of VBLicense data contracts for valid licenses only. </summary>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LicenseGetAllValid",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LicenseGetAllValid",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.LicenseGet = function (enumLicenseTypeID, sessionID, callBackOverride) {
	/// Returns the VBLicense data contract for a particular license type.
	/// Throws VBDBArgumentException if the license type is not valid.
	/// Throws VBInvalidInstallationException if installation keys are missing from the registry.

	var args = {
		"enumLicenseTypeID": enumLicenseTypeID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LicenseGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LicenseGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ZoneDelete = function (zoneID, sessionID, callBackOverride) {
	/// <summary>
	/// Delete a Zone from the system.
	/// </summary>
	/// <param name="zoneID" type="Number" integer="true">zoneID</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"zoneID": zoneID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ZoneDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ZoneDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.SubZoneGetAll = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBList of all VBSubZone in the system.
	/// </summary>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("SubZoneGetAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("SubZoneGetAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.SubZoneUpdate = function (zone, sessionID, callBackOverride) {
	/// <summary>
	/// Updates a VBSubZone in the system.
	/// </summary>
	/// <param name="zone" type="MaduroDC.VBSubZone">zone</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"zone": zone,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("SubZoneUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("SubZoneUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}



MaduroSLL.Service.prototype.SubZoneAdd = function (zone, sessionID, callBackOverride) {
	/// <summary>
	/// Adds a VBSubZone to the system.
	/// </summary>
	/// <param name="zone" type="MaduroDC.VBSubZone">zone</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"zone": zone,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("SubZoneAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("SubZoneAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.ZoneGetDefault = function (sessionID, callBackOverride) {

	/// <summary>
	/// Returns the VBDefaultZone for the default zone.
	/// </summary>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBDefaultZone">MaduroDC.VBDefaultZone</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ZoneGetDefault",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ZoneGetDefault",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.ZoneGetGlobal = function (sessionID, callBackOverride) {

	/// <summary>
	/// Returns the VBGlobalZone for the global zone.
	/// </summary>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBGlobalZone">MaduroDC.VBGlobalZone</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ZoneGetGlobal",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ZoneGetGlobal",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.ZoneAddGlobal = function (zone, sessionID, callBackOverride) {
	/// <summary>
	/// Adds a VBGlobalZone to the system.
	/// </summary>
	/// <param name="zone" type="MaduroDC.VBGlobalZone">zone</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"zone": zone,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ZoneAddGlobal",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ZoneAddGlobal",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}





MaduroSLL.Service.prototype.UserChangePassword = function (originalPassword, newPassword, sessionID, callBackOverride) {
	/// <summary>
	/// Performs a password update for a user
	/// </summary>
	/// <param name="originalPassword" type="String">Original Password</param>
	/// <param name="newPassword" type="String">New Password</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"originalPassword": originalPassword,
		"newPassword": newPassword,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("UserChangePassword",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("UserChangePassword",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.ZoneAddDefault = function (zone, sessionID, callBackOverride) {
	/// <summary>
	/// Adds a VBDefaultZone to the system.
	/// </summary>
	/// <param name="zone" type="MaduroDC.VBGlobalZone">zone</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"zone": zone,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ZoneAddDefault",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ZoneAddDefault",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.ZoneUpdateGlobal = function (zone, sessionID, callBackOverride) {
	/// <summary>
	/// Updates a VBGlobalZone in the system.
	/// </summary>
	/// <param name="zone" type="MaduroDC.VBGlobalZone">zone</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"zone": zone,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ZoneUpdateGlobal",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ZoneUpdateGlobal",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.ZoneUpdateDefault = function (zone, sessionID, callBackOverride) {
	/// <summary>
	/// Updates a VBDefaultZone in the system.
	/// </summary>
	/// <param name="zone" type="MaduroDC.VBGlobalZone">zone</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"zone": zone,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ZoneUpdateDefault",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ZoneUpdateDefault",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.EmbedLdapUserLogin = function (ldapServerID, userName, password, applicationID, clientIP, userLanguage, callBackOverride) {
	/// <summary>
	/// Logs-in user using the specified ldapServerID.
	/// </summary>
	/// <param name="ldapServerID" type="Number" integer="true">ldapServerID</param>
	/// <param name="userName" type="String">User login</param>
	/// <param name="password" type="String">User password</param>
	/// <param name="applicationID" type="String">Application ID - Every application allowed to call this
	/// service MUST have an ID in the ClientApplication Table</param>
	/// <param name="clientIP" type="String">Client IP</param>
	/// <param name="userLanguage" type="String">User Language</param>
	/// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>
	var args = {
		"ldapServerID": ldapServerID,
		"userName": userName,
		"password": password,
		"applicationID": applicationID,
		"clientIP": clientIP,
		"userLanguage": userLanguage
	};
	if (!callBackOverride) {
		JSONPproxy.invoke("EmbedLdapUserLogin",
	args,
	onSuccess,
	onFailure,
	false,
	true)
	} else {
		JSONPproxy.invoke("EmbedLdapUserLogin",
	args,
	callBackOverride,
	onFailure,
	false,
	true)
	}
}

MaduroSLL.Service.prototype.EmbedLdapUserLoginSingleSignOn = function (applicationID, clientIP, userLanguage, callBackOverride) {
	/// <summary>
	/// Logs-in user using single sign on if enabled.
	/// </summary>
	/// <param name="applicationID" type="String">Application ID - Every application allowed to call this
	/// service MUST have an ID in the ClientApplication Table</param>
	/// <param name="clientIP" type="String">Client IP</param>
	/// <param name="userLanguage" type="String">User Language</param>
	/// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>
	var args = {
		"applicationID": applicationID,
		"clientIP": clientIP,
		"userLanguage": userLanguage
	};
	if (!callBackOverride) {
		JSONPproxy.invoke("EmbedLdapUserLoginSingleSignOn",
	args,
	onSuccess,
	onFailure,
	false,
	true)
	} else {
		JSONPproxy.invoke("EmbedLdapUserLoginSingleSignOn",
	args,
	callBackOverride,
	onFailure,
	false,
	true)
	}
}


MaduroSLL.Service.prototype.EmbedLdapGetLoginInfo = function (applicationID, clientIP, userLanguage, callBackOverride) {
	/// <summary>
	/// Returns LDAP configuration information.
	/// </summary>
	/// <param name="applicationID" type="String">Application ID - Every application allowed to call this
	/// service MUST have an ID in the ClientApplication Table</param>
	/// <param name="clientIP" type="String">Client IP</param>
	/// <param name="userLanguage" type="String">User Language</param>
	/// <returns type="MaduroDC.VBLdapLoginInfo"></returns>
	var args = {
		"applicationID": applicationID,
		"clientIP": clientIP,
		"userLanguage": userLanguage
	};
	if (!callBackOverride) {
		JSONPproxy.invoke("EmbedLdapGetLoginInfo",
	args,
	onSuccess,
	onFailure,
	false,
	true)
	} else {
		JSONPproxy.invoke("EmbedLdapGetLoginInfo",
	args,
	callBackOverride,
	onFailure,
	false,
	true)
	}
}
MaduroSLL.Service.prototype.EmbedUserLogin = function (userName, password, applicationID, clientIP, userLanguage, callBackOverride) {
	/// <summary> Logs-in user. </summary>
	/// <param name="userName" type="String">User login</param>
	/// <param name="password" type="String">User password</param>
	/// <param name="applicationID" type="String">Application ID - Every application allowed to call this service MUST have an ID in the ClientApplication Table</param>
	/// <param name="clientIP" type="String">Client IP</param>
	/// <param name="userLanguage" type="String">User Language</param>
	/// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>

	var args = {
		"userName": userName,
		"password": password,
		"applicationID": applicationID,
		"clientIP": clientIP,
		"userLanguage": userLanguage
	};
	if (!callBackOverride) {
		JSONPproxy.invoke("EmbedUserLogin",
	args,
	onSuccess,
	onFailure,
	false,
	true)
	} else {
		JSONPproxy.invoke("EmbedUserLogin",
	args,
	callBackOverride,
	onFailure,
	false,
	true)
	}
}
MaduroSLL.Service.prototype.EmbedUserLogout = function (sessionID, callBackOverride) {
	/// <summary> Logs-out user. </summary>
	/// <param name="sessionID" type="String">User Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		JSONPproxy.invoke("EmbedUserLogout",
	args,
	onSuccess,
	onFailure,
	false,
	true)
	} else {
		JSONPproxy.invoke("EmbedUserLogout",
	args,
	callBackOverride,
	onFailure,
	false,
	true)
	}
}
MaduroSLL.Service.prototype.EmbedUserProfileGet = function (sessionID, callBackOverride) {
	/// <summary> Returns VBUserProfile data contract from user's session state. </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBUserProfile"> VBUserProfile data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		JSONPproxy.invoke("EmbedUserProfileGet",
	args,
	onSuccess,
	onFailure,
	false,
	true)
	} else {
		JSONPproxy.invoke("EmbedUserProfileGet",
	args,
	callBackOverride,
	onFailure,
	false,
	true)
	}
}

MaduroSLL.Service.prototype.EmbedPlayContentLogStart = function (vbContentInstance, sessionID, callBackOverride) {
	/// <summary>
	/// Takes a VBContentInstance, logs the Playing of the content in the database,
	/// and returns the ActivityLogID for the log entry inside the returned VBContentInstance.
	/// </summary>
	/// <param name="vbContentInstance" type="MaduroDC.VBContentInstance">VBContentInstance data contract.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBContentInstance">VBContentInstance data contract.</returns>
	var args = {
		"vbContentInstance": vbContentInstance,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		JSONPproxy.invoke("EmbedPlayContentLogStart",
	args,
	onSuccess,
	onFailure,
	false,
	true)
	} else {
		JSONPproxy.invoke("EmbedPlayContentLogStart",
	args,
	callBackOverride,
	onFailure,
	false,
	true)
	}
}

MaduroSLL.Service.prototype.EmbedPlayContentStartWithPlayerController = function (contentID, sessionID, callBackOverride) {


	/// <summary>
	/// Selects an instance to play for the passed ContentID and
	/// returns:
	/// - A VBContentInstance data contract containing information
	///   about the selected instance, general information about the content,
	///   a generated URL to play, and an ActivityLogID for the play event.
	/// - A VBPlayerController data contract containing an object tag and
	///   JavaScript to controll the appropriate client-side player.
	/// </summary>
	/// <param name="contentID" type="Number" integer="true">Unique numeric ID of Content to play.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBPlayContentInfo">
	/// VBPlayContentInfo data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>


	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		JSONPproxy.invoke("EmbedPlayContentStartWithPlayerController",
	args,
	onSuccess,
	onFailure,
	false,
	true)
	} else {
		JSONPproxy.invoke("EmbedPlayContentStartWithPlayerController",
	args,
	callBackOverride,
	onFailure,
	false,
	true)
	}

}

MaduroSLL.Service.prototype.EmbedPlayContentLoadWithPlayerController = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Uses the Content Search to find the content record for the passed ContentID and
	/// returns a VBContentInstance data contract containing information
	/// about the selected instance, general information about the content,
	/// and a generated URL to play.
	/// Also returns a VBPlayerController data contract containing an object tag and
	///   JavaScript to control the appropriate client-side player.
	/// </summary>
	/// <param name="contentID" type="Number" integer="true">Unique numeric ID of Content to play.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBPlayContentInfo">VBPlayContentInfo data contract.</returns>
	var args = {
		"contentID": contentID, "sessionID": sessionID
	};
	if (!callBackOverride) {
		JSONPproxy.invoke("EmbedPlayContentLoadWithPlayerController",
	args,
	onSuccess,
	onFailure,
	false,
	true)
	} else {
		JSONPproxy.invoke("EmbedPlayContentLoadWithPlayerController",
	args,
	callBackOverride,
	onFailure,
	false,
	true)
	}
}

MaduroSLL.Service.prototype.EmbedPlayContentStop = function (activityLogID, sessionID, callBackOverride) {
	/// <summary> Stops playing content by closing-out the passed Activity Log event. </summary>
	/// <param name="activityLogID" type="Number" integer="true">Unique numeric ID of Activity Log event to close-out.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"activityLogID": activityLogID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		JSONPproxy.invoke("EmbedPlayContentStop",
	args,
	onSuccess,
	onFailure,
	false,
	true)
	} else {
		JSONPproxy.invoke("EmbedPlayContentStop",
	args,
	callBackOverride,
	onFailure,
	false,
	true)
	}
}

MaduroSLL.Service.prototype.EmbedContentViewCountIncrement = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Increments and returns the view count for a given Content ID
	/// </summary>
	/// <param name="contentID" type="Number" integer="true">Unique numeric ID of the Content.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns>A VBIntData with the total view count</returns>
	var args = {
		"contentID": contentID, "sessionID": sessionID
	};
	if (!callBackOverride) {
		JSONPproxy.invoke("EmbedContentViewCountIncrement",
	args,
	onSuccess,
	onFailure,
	false,
	true)
	} else {
		JSONPproxy.invoke("EmbedContentViewCountIncrement",
	args,
	callBackOverride,
	onFailure,
	false,
	true)
	}
}

MaduroSLL.Service.prototype.EmbedContentFullPermissionsGet = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Determines if the user has any permissions for the
	/// passed content DTO object.
	/// NOTE: The user may have permission for 3 reasons:
	///   1) The user has explicit content-level permission.
	///   2) The user has permission for uncategorized content
	///      IF this content has no categories AND is not private.
	///   3) The user has permission for any category this content is in
	///      IF the content is not private.
	/// </summary>
	/// <param name="contentID">ID of the Content to get the permissions for</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBContentPermission">The complete permissions for this Content</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		JSONPproxy.invoke("EmbedContentFullPermissionsGet",
	args,
	onSuccess,
	onFailure,
	false,
	true)
	} else {
		JSONPproxy.invoke("EmbedContentFullPermissionsGet",
	args,
	callBackOverride,
	onFailure,
	false,
	true)
	}
}

MaduroSLL.Service.prototype.GuestLogin = function (applicationID, clientIP, userLanguage, callBackOverride) {
	/// <summary>
	/// Allows a user to log in as the Guest account, if it is available.
	/// </summary>
	/// <param name="applicationID" type="String">Application ID - Every application allowed to call this
	/// service MUST have an ID in the ClientApplication Table</param>
	/// <param name="clientIP" type="String">Client IP</param>
	/// <param name="userLanguage" type="String">User Language</param>
	/// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>
	var args = {
		"applicationID": applicationID,
		"clientIP": clientIP,
		"userLanguage": userLanguage
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedGuestLogin",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("GuestLogin",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedGuestLogin",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("GuestLogin",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.EmbedGuestLogin = function (applicationID, clientIP, userLanguage, callBackOverride) {
	/// <summary>
	/// Allows a user to log in as the Guest account, if it is available.
	/// </summary>
	/// <param name="applicationID" type="String">Application ID - Every application allowed to call this
	/// service MUST have an ID in the ClientApplication Table</param>
	/// <param name="clientIP" type="String">Client IP</param>
	/// <param name="userLanguage" type="String">User Language</param>
	/// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>
	var args = {
		"applicationID": applicationID,
		"clientIP": clientIP,
		"userLanguage": userLanguage
	};
	if (!callBackOverride) {
		JSONPproxy.invoke("EmbedGuestLogin",
	args,
	onSuccess,
	onFailure,
	false,
	true)
	} else {
		JSONPproxy.invoke("EmbedGuestLogin",
	args,
	callBackOverride,
	onFailure,
	false,
	true)
	}
}

MaduroSLL.Service.prototype.GuestPermissionsGet = function (contentID, applicationID, clientIP, userLanguage, callBackOverride) {
	/// <summary>
	/// Checks to see if the Guest account has permissions to the specified content.
	/// </summary>
	/// <param name="contentID">The Content ID of the content to get the permissions object for.</param>
	/// <param name="applicationID" type="String">Application ID - Every application allowed to call this
	/// service MUST have an ID in the ClientApplication Table</param>
	/// <param name="clientIP" type="String">Client IP</param>
	/// <param name="userLanguage" type="String">User Language</param>
	/// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>
	var args = {
		"contentID": contentID,
		"applicationID": applicationID,
		"clientIP": clientIP,
		"userLanguage": userLanguage
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedGuestPermissionsGet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("GuestPermissionsGet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedGuestPermissionsGet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("GuestPermissionsGet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.EmbedGuestPermissionsGet = function (contentID, applicationID, clientIP, userLanguage, callBackOverride) {
	/// <summary>
	/// Checks to see if the Guest account has permissions to the specified content.
	/// </summary>
	/// <param name="contentID">The Content ID of the content to get the permissions object for.</param>
	/// <param name="applicationID" type="String">Application ID - Every application allowed to call this
	/// service MUST have an ID in the ClientApplication Table</param>
	/// <param name="clientIP" type="String">Client IP</param>
	/// <param name="userLanguage" type="String">User Language</param>
	/// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>
	var args = {
		"contentID": contentID,
		"applicationID": applicationID,
		"clientIP": clientIP,
		"userLanguage": userLanguage
	};
	if (!callBackOverride) {
		JSONPproxy.invoke("EmbedGuestPermissionsGet",
	args,
	onSuccess,
	onFailure,
	false,
	true)
	} else {
		JSONPproxy.invoke("EmbedGuestPermissionsGet",
	args,
	callBackOverride,
	onFailure,
	false,
	true)
	}
}

//TODO put in SLL builder
function GetURLHostname() {
	//var url = document.location.href;
	//var re = new RegExp('^(?:f|ht)tp(?:s)?\://([^/]+)', 'im');
	//return url.match(re)[1].toString();

  return hostName;
}



// *************  SLL METHODS ADDED BY MONETIZEMEDIA TEAM  *************  //

MaduroSLL.Service.prototype.ExternalSearchContent = function (vbSearchFilter, sessionID, callBackOverride) {
	/// <summary> Returns Video Content meeting passed Search Filter criteria from the external video sites for which the user has permissions (either directly or via his/her group memberships). </summary>
	/// <param name="vbSearchFilter" type="MaduroDC.VBExternalSearchFilter">VBExternalSearchFilter data contract containing search criteria.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBContentExternalVideo">returns MaduroDC.VBContentExternalVideo If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbSearchFilter": vbSearchFilter,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedExternalSearchContent",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ExternalSearchContent",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedExternalSearchContent",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ExternalSearchContent",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}


MaduroSLL.Service.prototype.ExternalVideoInstanceAdd = function (instance, contentID, sessionID, callBackOverride) {
	/// <summary> Adds a External URL Instance to the Content. </summary>
	/// <param name="VBCEinstance" type="MaduroDC.VBContentExternalVideoInstance">The External Content instance to add.</param>
	/// <param name="contentID" type="Int">Content ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"instance": instance,
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedExternalVideoInstanceAdd",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ExternalVideoInstanceAdd",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedExternalVideoInstanceAdd",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ExternalVideoInstanceAdd",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentInstanceMove = function (vbContentInstanceMove, vbContentInstanceDelete, sessionID, callBackOverride) {
	/// <summary> Move Content Instance to Another Content </summary>
	/// <param name="vbContentInstanceMove" type="MaduroDC.VBContentInstance">Move Content instance</param>
	/// <param name="vbContentInstanceDelete" type="MaduroDC.VBContentInstance">Delete Content instance</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"vbContentInstanceMove": vbContentInstanceMove,
		"vbContentInstanceDelete": vbContentInstanceDelete,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentInstanceMove",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentInstanceMove",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentInstanceMove",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentInstanceMove",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}
MaduroSLL.Service.prototype.ContentThumbnailGetAllByContent = function (contentID, sessionID, callBackOverride) {
	/// <summary> Returns VBList of VBContentThumbnail (data contracts) with all thumbnails for the content. </summary>
	/// <param name="contentID">Content ID</param>
	/// <param name="sessionID">The unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">List of VBContentThumbnail</returns>

	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentThumbnailGetAllByContent",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentThumbnailGetAllByContent",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentThumbnailGetAllByContent",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentThumbnailGetAllByContent",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}
MaduroSLL.Service.prototype.ContentThumbnailDelete = function (vbContentThumbnail, sessionID, callBackOverride) {
	/// <summary> Deletes the selected thumbnail for a content. This method will not delete the Active thumbnail </summary>
	/// <param name="vbContentThumbnail">VBContentThumbnail-Thumbnail to be deleted</param>
	/// <param name="sessionID">The unique session GUID.</param>
	/// <returns type="VBVoidData">VBVoidData</returns>

	var args = {
		"vbContentThumbnail": vbContentThumbnail,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentThumbnailDelete",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentThumbnailDelete",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentThumbnailDelete",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentThumbnailDelete",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}
MaduroSLL.Service.prototype.ContentThumbnailSetActive = function (vbContentThumbnail, sessionID, callBackOverride) {
	/// <summary> Sets the Active thumbnail for a content Existing Active thumbnail will be set as inactive and new selected thumbnail will be set as active. </summary>
	/// <param name="vbContentThumbnail">VBContentThumbnail- Thumbnail to be set active</param>
	/// <param name="sessionID">The unique session GUID.</param>
	/// <returns type="VBVoidData">VBVoidData</returns>

	var args = {
		"vbContentThumbnail": vbContentThumbnail,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentThumbnailSetActive",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentThumbnailSetActive",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentThumbnailSetActive",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentThumbnailSetActive",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentThumbnailAdd = function (vbContentThumbnail, appServerID, sessionID, callBackOverride) {
	/// <summary> Adds new thumbnail for the specific content. </summary>
	/// <param name="vbContentThumbnail">VBContentThumbnail - new thumbnail object</param>
	/// <param name="appServerID">ID of the application server where the file is located</param>
	/// <param name="sessionID">The unique session GUID.</param>
	/// <returns type="VBVoidData">VBVoidData</returns>

	var args = {
		"vbContentThumbnail": vbContentThumbnail,
		"appServerID": appServerID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentThumbnailAdd",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentThumbnailAdd",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentThumbnailAdd",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentThumbnailAdd",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}
MaduroSLL.Service.prototype.ContentPermissionGetForContentByGroup = function (contentID, sessionID, callBackOverride) {
	/// <summary> This method gives out the collection of group Content Permission passed for a content. Returns collection of VBContentPermission Objects - Each VBContentPermission Object will have: - it's Content Permission values with respective to their GroupID </summary>
	/// <param name="contentID" type="Number" integer="true">contentID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList of VBContentPermission</returns>

	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentPermissionGetForContentByGroup",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {

			proxy.invoke("ContentPermissionGetForContentByGroup",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentPermissionGetForContentByGroup",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {

			proxy.invoke("ContentPermissionGetForContentByGroup",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}
MaduroSLL.Service.prototype.ContentPermissionGetForContentByUser = function (contentID, sessionID, callBackOverride) {
	/// <summary> This method gives out the collection of User Content Permission passed for a content. Returns collection of VBContentPermission Objects - Each VBContentPermission Object will have: - it's Content Permission values with respective to their UserID </summary>
	/// <param name="contentID" type="Number" integer="true">contentID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList of VBContentPermission</returns>

	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentPermissionGetForContentByUser",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentPermissionGetForContentByUser",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentPermissionGetForContentByUser",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentPermissionGetForContentByUser",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}
MaduroSLL.Service.prototype.PlayContentInstanceLoadWithPlayerController = function (vbContentInstance, sessionID, callBackOverride) {
	/// <summary> Pass VBContent and Checks for client zone and a generated VBContentInstance. Also returns a VBPlayerController data contract containing an object tag and JavaScript to control the appropriate client-side player. </summary>
	/// <param name="MaduroDC.VBContentInstance" type="Number" integer="true">Content Instance data contract.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBPlayContentInfo">VBPlayContentInfo data contract.</returns>

	var args = {
		"vbContentInstance": vbContentInstance,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPlayContentInstanceLoadWithPlayerController",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PlayContentInstanceLoadWithPlayerController",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPlayContentInstanceLoadWithPlayerController",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PlayContentInstanceLoadWithPlayerController",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentGetPrivateStatus = function (contentID, sessionID, callBackOverride) {
	/// <summary> Returns the Private Permission Status for the content. </summary>
	/// <param name="contentID">ID of the Content to get the content private Status</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>

	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentGetPrivateStatus",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentGetPrivateStatus",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentGetPrivateStatus",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentGetPrivateStatus",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}
MaduroSLL.Service.prototype.ContentGetPublicStatus = function (contentID, sessionID, callBackOverride) {
	/// <summary> Returns the Public Permission Status for the content. </summary>
	/// <param name="contentID">ID of the Content to get the content public Status</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>

	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentGetPublicStatus",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentGetPublicStatus",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentGetPublicStatus",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentGetPublicStatus",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}
MaduroSLL.Service.prototype.ContentPrivateStatusSet = function (contentID, privateStatus, sessionID, callBackOverride) {
	/// <summary> Set the private status for the Content. </summary>
	/// <param name="contentID">ID of the Content to set the status as private </param>
	/// <param name="privateStatus">The private status for the related Content</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>

	var args = {
		"contentID": contentID,
		"privateStatus": privateStatus,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentPrivateStatusSet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentPrivateStatusSet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentPrivateStatusSet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentPrivateStatusSet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}
MaduroSLL.Service.prototype.ContentPublicStatusSet = function (contentID, publicStatus, sessionID, callBackOverride) {
	/// <summary> Set the Public Permission Status for the content. </summary>
	/// <param name="contentID">ID of the Content to set the status as Public</param>
	/// <param name="privateStatus">The public status for the related Content</param>
	/// <returns>MaduroDC.VBVoidData</returns>

	var args = {
		"contentID": contentID,
		"publicStatus": publicStatus,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentPublicStatusSet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentPublicStatusSet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentPublicStatusSet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentPublicStatusSet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.EnumGetByTypeForApprover = function (enumType, sessionID, contentID, callBackOverride) {
    /// <summary>
    /// Returns a VBList of all VBEnum data contracts for all Enums for a specific EnumType not marked as private and gets the localized value based on the user language defined with session.
    /// This method should be used after a user login has been performed and a valid session obtained.
    /// </summary>
    /// <param name="enumType" type="String">Enum Type.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList">
    /// VBList of VBEnum data contracts.
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "enumType": enumType,
        "sessionID": sessionID,
        "contentID": contentID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EmbedEnumGetByType",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("EnumGetByTypeForApprover",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EmbedEnumGetByType",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("EnumGetByTypeForApprover",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}



MaduroSLL.Service.prototype.EnumGetByType = function (enumType, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBList of all VBEnum data contracts for all Enums for a specific EnumType not marked as private and gets the localized value based on the user language defined with session.
	/// This method should be used after a user login has been performed and a valid session obtained.
	/// </summary>
	/// <param name="enumType" type="String">Enum Type.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBEnum data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"enumType": enumType,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedEnumGetByType",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("EnumGetByType",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedEnumGetByType",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("EnumGetByType",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ScheduleEventCalendarGetEvents = function (vbScheduledCalendarEventFilter, sessionID, callBackOverride) {
	/// <summary>
	/// Returns all scheduled events occurrences used to populate the FullCalendar jQuery Plug-in meeting passed Search Filter criteria.
	/// </summary>
	/// <param name="vbScheduledCalendarEventFilter" type="MaduroDC.VBScheduledCalendarEventFilter">VBScheduledCalendarEventFilter data contract containing search criteria.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBScheduledCalendarEvent data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbScheduledCalendarEventFilter": vbScheduledCalendarEventFilter,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ScheduleEventCalendarGetEvents",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ScheduleEventCalendarGetEvents",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ScheduleEventConfigDataGet = function (enumScheduledEventCreatedBySourceID, scheduledEventID, metadataContentID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBScheduledEventConfigData data contract that contains configuration data needed for maintaining scheduled events in the UI including data for the datepicker.
	/// Configuation data includes values needed for drop down list (i.e. FTP servers) and the datepicker config values such as month names.
	/// </summary>
	/// <param name="enumScheduledEventCreatedBySourceID" type="Number" integer="true">EnumID for ScheduledEventCreatedBySource. i.e. Scheduler, Channel Guide. The enumScheduledEventCreatedBySourceID will be ignored if scheduledEventID or metadataContentID passed and > 0.</param>
	/// <param name="scheduledEventID" type="Number" integer="true">The scheduledEventID for the existing scheduled event or 0 if a new scheduled event.</param>
	/// <param name="metadataContentID" type="Number" integer="true">If scheduledEventID is not known, the metadataContentID associated with the scheduled event can be passed (used for live presentation usage).  Pass 0 if scheduledEventID passed.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBScheduledEventConfigData">
	/// VBScheduledEventConfigData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"enumScheduledEventCreatedBySourceID": enumScheduledEventCreatedBySourceID,
		"scheduledEventID": scheduledEventID,
		"metadataContentID": metadataContentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ScheduleEventConfigDataGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ScheduleEventConfigDataGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ApprovalEmailTestSend = function (SMTPServerName, SMTPUserName, SMTPPassword, enableSSL, port, ContentApprovalEmailFromAddress, ContentApprovalEmailToAddress, sessionID, callBackOverride) {
	var args = {
		"SMTPServerName": SMTPServerName,
		"SMTPUserName": SMTPUserName,
		"SMTPPassword": SMTPPassword,
		"enableSSL": enableSSL,
		"port": port,
		"ContentApprovalEmailFromAddress": ContentApprovalEmailFromAddress,
		"ContentApprovalEmailToAddress": ContentApprovalEmailToAddress,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ApprovalEmailTestSend",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ApprovalEmailTestSend",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ScheduleEventCalendarConfigDataGet = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBScheduledEventCalendarConfigData data contract that contains configuration data needed for the calendar and datepicker used by the scheduled event calendar UI.
	/// Configuation data includes values needed for the calendar and datepicker such as month names.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBScheduledEventCalendarConfigData">
	/// VBScheduledEventCalendarConfigData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ScheduleEventCalendarConfigDataGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ScheduleEventCalendarConfigDataGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ScheduleEventCalendarUserPropertySet = function (propertyName, propertyValue, sessionID, callBackOverride) {
	/// <summary>
	/// Saves a property (add or update) for the current user for the scheduled event Calendar UI.
	/// These properties are persisted to the database so the Calendar UI will display them on re-open of Calendar UI.
	/// </summary>
	/// <param name="propertyName" type="String">The name of the calendar property.</param>
	/// <param name="propertyValue" type="String">The string value of the calendar property.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"propertyName": propertyName,
		"propertyValue": propertyValue,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ScheduleEventCalendarUserPropertySet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ScheduleEventCalendarUserPropertySet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ScheduleEventWithPermissionsGet = function (scheduledEventID, metadataContentID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBScheduledEvent data contract with permissions for passed ScheduledEventID for the current user.
	/// </summary>
	/// <param name="scheduledEventID" type="Number" integer="true">Scheduled Event unique numeric ID. Pass 0 if metadataContentID passed.</param>
	/// <param name="metadataContentID" type="Number" integer="true">If scheduledEventID is not known, the metadataContentID associated with the scheduled event can be passed (used for live presentation usage).  Pass 0 if scheduledEventID passed.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBScheduledEvent">
	/// VBScheduledEvent data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"scheduledEventID": scheduledEventID,
		"metadataContentID": metadataContentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ScheduleEventWithPermissionsGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ScheduleEventWithPermissionsGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ScheduleEventUpdate = function (vbScheduledEvent, sessionID, callBackOverride) {
	/// <summary>
	/// Update the scheduled event in the system.
	/// </summary>
	/// <param name="vbScheduledEvent" type="MaduroDC.VBScheduledEvent">VBScheduledEvent data contract containing information on scheduled event to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBScheduledEventAddUpdateDeleteReturn">
	/// VBScheduledEventAddUpdateDeleteReturn data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// Returns the ScheduledEventID and optionally PresentationID and any PresentationEmailWarnings.
	/// </returns>
	var args = {
		"vbScheduledEvent": vbScheduledEvent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
	    proxy.invokeTimeOut("ScheduleEventUpdate",
	args,
	onSuccess,
	onFailure,
	false,
    false,
    3600000)
	} else {
	    proxy.invokeTimeOut("ScheduleEventUpdate",
	args,
	callBackOverride,
	onFailure,
	false,
    false,
    3600000)
	}
}

MaduroSLL.Service.prototype.ScheduleEventAdd = function (vbScheduledEvent, sessionID, callBackOverride) {
	/// <summary>
	/// Add a new scheduled event to the database.
	/// </summary>
	/// <param name="vbScheduledEvent" type="MaduroDC.VBScheduledEvent">VBScheduledEvent data contract containing information on scheduled event to add.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBScheduledEventAddUpdateDeleteReturn">
	/// VBScheduledEventAddUpdateDeleteReturn data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// Returns the ScheduledEventID and optionally PresentationID created and any PresentationEmailWarnings.
	/// </returns>
	var args = {
		"vbScheduledEvent": vbScheduledEvent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
	    proxy.invokeTimeOut("ScheduleEventAdd",
	args,
	onSuccess,
	onFailure,
	false,
    false,
    900000)
	} else {
	    proxy.invokeTimeOut("ScheduleEventAdd",
	args,
	callBackOverride,
	onFailure,
	false,
    false,
    900000)
	}
}

MaduroSLL.Service.prototype.ScheduleEventDelete = function (scheduledEventID, sessionID, callBackOverride) {
	/// <summary>
	/// Deletes the scheduled event from the database.
	/// </summary>
	/// <param name="scheduledEventID" type="Number" integer="true">Scheduled Event unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBScheduledEventAddUpdateDeleteReturn">
	/// VBScheduledEventAddUpdateDeleteReturn data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// Returns any PresentationEmailWarnings.
	/// </returns>
	var args = {
		"scheduledEventID": scheduledEventID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ScheduleEventDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ScheduleEventDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ScheduleEventContentInfoGet = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBScheduledEventDeviceVBrickSlotInfo data contract with information (VBrick Device Slot Info) on the passed deviceVBrickSlotID for the current user.
	/// </summary>
	/// <param name="deviceVBrickSlotID" type="Number" integer="true">VBrick device slot unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBScheduledEventDeviceVBrickSlotInfo">
	/// VBScheduledEventDeviceVBrickSlotInfo data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ScheduleEventContentInfoGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ScheduleEventContentInfoGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ScheduleEventDeviceSlotInfoGet = function (deviceSlotID, deviceSlotTypeID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBScheduledEventDeviceSlotInfo data contract with information (VBrick or Presentation Device Slot Info) on the passed deviceSlotID for the current user.
	/// </summary>
	/// <param name="deviceSlotID" type="Number" integer="true">VBrick or Presentation device slot unique numeric ID.</param>
	/// <param name="deviceSlotTypeID" type="Number" integer="true">VBrick or Presentation device slot type ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBScheduledEventDeviceSlotInfo">
	/// VBScheduledEventDeviceSlotInfo data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"deviceSlotID": deviceSlotID,
		"deviceSlotTypeID": deviceSlotTypeID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ScheduleEventDeviceSlotInfoGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ScheduleEventDeviceSlotInfoGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ScheduleEventDeviceSlotsGet = function (filterString, sessionID, scheduledEventSourceTypes, callBackOverride) {
	/// <summary>
	/// Returns a collection of VBScheduledEventDeviceSlotInfo (VBrick or Presentation Slot) data contracts for VBrick Encoder or Presentation devices with optional filter.
	/// </summary>
	/// <param name="filterString" type="String">
	///         Return only vbrick slots that have the passed filter text in either the DeviceVBrick.HostName, DeviceVBrick.IPAddress, DeviceVBrickSlot.Name, DeviceModel.PartNumber, or DeviceModel.Description.
	///         Or presentation slots that have the passed filter text in either the DevicePresentation.HostName, DevicePresentation.IPAddress, DevicePresentationSlot.Name, DeviceModel.PartNumber, or DeviceModel.Description.
	/// </param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <param name="scheduledEventSourceTypes">A list of allowed enum schedule event source type IDs.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBScheduledEventDeviceSlotInfo data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"filterString": filterString,
		"sessionID": sessionID,
		"scheduledEventSourceTypes": scheduledEventSourceTypes
	};
	if (!callBackOverride) {
		proxy.invoke("ScheduleEventDeviceSlotsGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ScheduleEventDeviceSlotsGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ScheduleIsSchedulingAllowed = function (sessionID, callBackOverride) {
	/// <summary>
	/// Determines if the Scheduling menu can be displayed based on licenses.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBBoolData">
	/// VBBoolData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ScheduleIsSchedulingAllowed",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ScheduleIsSchedulingAllowed",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.FeaturedContentRemove = function (featuredContentID, sessionID, callBackOverride) {
	var args = {
		"featuredContentID": featuredContentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FeaturedContentRemove",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("FeaturedContentRemove",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.FeaturesGetForCurrentUser = function (sessionID, callBackOverride) {
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedFeaturesGetForCurrentUser",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("FeaturesGetForCurrentUser",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedFeaturesGetForCurrentUser",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("FeaturesGetForCurrentUser",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.GetAllLiveContent = function (sessionID, callBackOverride) {
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("GetAllLiveContent",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("GetAllLiveContent",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.GetStoredContent = function (searchtext, sortbyField, pageNumber, pageSize, sessionID, callBackOverride) {
    var args = {
        "searchtext": searchtext,
        "sortbyField": sortbyField,
        "pageNumber": pageNumber,
        "pageSize": pageSize,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("GetStoredContent",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("GetStoredContent",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.VODContentUpdate = function (editContentID, title, expiration, OwnerID, sessionID, callBackOverride) {
    var args = {
        "editContentID": editContentID,
        "title": title,
        "expirationDate": expiration,
        "OwnerID": OwnerID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("VODContentUpdate",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("VODContentUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.ContentInstanceGet = function (ContentID, sessionID, callBackOverride) {
    var args = {
        "ContentID": ContentID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("ContentInstanceGet",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("ContentInstanceGet",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.ScheduleDeriveDateTimeBasedOnAnotherDateTime = function (vbScheduleDateAdjustmentHelper, sessionID, callBackOverride) {
	/// <summary>
	/// This helper method will derive a new date and time based on the passed date and time and an adjustment in minutes.
	/// This method was needed because Javascript has issues when a new Date() is created on the start of DST (i.e. 3/13/11 2AM EST will be created as 3/13/11 1AM EST)
	/// so this method can be called to create a new datetime without the DST issue.
	/// </summary>
	/// <param name="vbScheduleDateAdjustmentHelper" type="MaduroDC.VBScheduleDateAdjustmentHelper">DC populated with date information to convert From as well as the adjustment in minutes.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBScheduleDateAdjustmentHelper">
	/// VBScheduleDateAdjustmentHelper data contract with derived date time information.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbScheduleDateAdjustmentHelper": vbScheduleDateAdjustmentHelper,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ScheduleDeriveDateTimeBasedOnAnotherDateTime",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ScheduleDeriveDateTimeBasedOnAnotherDateTime",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}



//code added by Team Monetizemedia

MaduroSLL.Service.prototype.ContentTitleDescriptionUpdate = function (vbContent, sessionID, callBackOverride) {
	/// <summary> Updates the Description of this instance's Content (by Content ID) </summary>
	/// <param name="vbContent" type="MaduroDC.VBContent">VBContentInstance data contract to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"vbContent": vbContent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentTitleDescriptionUpdate",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invokeTimeOut("ContentTitleDescriptionUpdate",
						args,
						onSuccess,
						onFailure,
						false,
                        false,
                        120000)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentTitleDescriptionUpdate",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invokeTimeOut("ContentTitleDescriptionUpdate",
						args,
						callBackOverride,
						onFailure,
						false,
                        false,
                        120000)
		}
	}
}
MaduroSLL.Service.prototype.ContentIsSeedUpdate = function (vbContent, sessionID, callBackOverride) {
	/// <summary> Updates the IsSeedContent by Content ID </summary>
	/// <param name="vbContent" type="MaduroDC.VBContent">VBContent data contract to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"vbContent": vbContent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentIsSeedUpdate",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentIsSeedUpdate",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentIsSeedUpdate",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentIsSeedUpdate",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentAddExternalVideo = function (vbExternalVideoAddCredentials, deleteVideo, appServerID, ingestOriginal, transcodingProfileID, sessionID, callBackOverride) {
	/// <summary> Uploads the video corresponding to the input credential server. Adds a content record to the system, and adds all of its (presumedly Entered URL) Content Instances to the system. </summary>
	/// <param name="vbExternalVideoAddCredentials">External Video Server User Credentials</param>
	/// <param name="deleteVideo">Boolean Value to delete the video from web server</param>
	/// <param name="appServerID" type="int?">ID of the AppServer where the file is uploaded to. </param>
	/// <param name="ingestOriginal" type="bool">Whether to ingest original </param>
	/// <param name="transcodingProfileID" type="int?">Transcoding profile ID.  Use 0 or null if no profile id is specified.</param>
	/// <param name="sessionID">Unique Session ID</param>
	/// <returns>MaduroDC.VBVoidData</returns>

	var args = {
		"vbExternalVideoAddCredentials": vbExternalVideoAddCredentials,
		"deleteVideo": deleteVideo,
		"appServerID": appServerID,
		"ingestOriginal": ingestOriginal,
		"transcodingProfileID": transcodingProfileID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invokeTimeOut("EmbedContentAddExternalVideo",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invokeTimeOut("ContentAddExternalVideo",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invokeTimeOut("EmbedContentAddExternalVideo",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invokeTimeOut("ContentAddExternalVideo",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}


MaduroSLL.Service.prototype.ContentAddExternalURL = function (vbContent, vbContentThumbnail, sessionID, callBackOverride) {
	/// <summary> Adds a content record to the system, and adds all of its (presumedly Entered URL) Content Instances to the system. </summary>
	/// <param name="vbContent" type="MaduroDC.VBContent">The video Content to be added</param>
	/// <param name="vbContentThumbnail" type="MaduroDC.VBContentThumbnail">Content Thumbnail to be added</param>
	/// <param name="sessionID" type="String">Unique Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"vbContent": vbContent,
		"vbContentThumbnail": vbContentThumbnail,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentAddExternalURL",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentAddExternalURL",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentAddExternalURL",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentAddExternalURL",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentUploadedVideoAdd = function (uploadedFile, targetContentID, appServerID, ingestOriginal, transcodingProfileID, sessionID, callBackOverride) {
	/// <summary>
	/// Start ingest an uploaded file.
	/// </summary>
	/// <param name="uploadedFile" type="string">File Name of the uploaded file</param>
	/// <param name="targetContentID" type="int">Target (seed) content ID. </param>
	/// <param name="appServerID" type="int?">ID of the AppServer where the file is uploaded to. </param>
	/// <param name="ingestOriginal" type="bool">Whether to ingest original </param>
	/// <param name="transcodingProfileID" type="int?">Transcoding profile ID.  Use 0 or null if no profile id is specified.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>

	var args = {
		"uploadedFile": uploadedFile,
		"targetContentID": targetContentID,
		"appServerID": appServerID,
		"ingestOriginal": ingestOriginal,
		"transcodingProfileID": transcodingProfileID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentUploadedVideoAdd",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentUploadedVideoAdd",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentUploadedVideoAdd",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentUploadedVideoAdd",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.GetContentInfoForMetadata = function (contentID, sessionID, callBackOverride) {

	/// <summary>
	/// This method is used by the metadata widget.Determines all the seed info about the content.
	/// </summary>
	/// <param name="contentID">ContentID(can be a seed content)</param>
	/// <param name="sessionID">Unique SessionID</param>
	/// <returns>VBContent</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedGetContentInfoForMetadata",
						   args,
						   onSuccess,
						   onFailure,
						   false,
						   true)
		} else {
			proxy.invoke("GetContentInfoForMetadata",
						   args,
						   onSuccess,
						   onFailure,
						   false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedGetContentInfoForMetadata",
						   args,
						   callBackOverride,
						   onFailure,
						   false,
						   true)
		} else {
			proxy.invoke("GetContentInfoForMetadata",
						   args,
						   callBackOverride,
						   onFailure,
						   false)
		}
	}
}
MaduroSLL.Service.prototype.ContentFileUpload = function (vbLink, appServerID, sessionID, callBackOverride) {
	/// <summary>
	/// This method gets a list of the links and attachments for a content record.
	/// </summary>
	/// <param name="contentID">The Content to get the links for</param>
	/// <param name="appServerID">ID of the application server where the file is located</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>A list of the Content's Links and Attachments</returns>
	var args = {
		"vbLink": vbLink,
		"appServerID": appServerID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentFileUpload",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentFileUpload",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
	if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentFileUpload",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentFileUpload",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentSeedFullPermissionGet = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Verifies the seed content permission for the content based on the content id passed.
	/// This method is called by metadata widget to verify the seed enum source and related permissions.
	/// It returns the valid permission object.
	/// </summary>
	/// <param name="contentID">ContentID</param>
	/// <param name="sessionID">Unique SessionID</param>
	/// <returns>VBContentPermission</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentSeedFullPermissionGet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentSeedFullPermissionGet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentSeedFullPermissionGet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentSeedFullPermissionGet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}


MaduroSLL.Service.prototype.ContentVerifyIsReal = function (contentID, sessionID, callBackOverride) {

	/// <summary>
	/// Based on the content id,verifies if the content is seed content or real content.
	/// </summary>
	/// <param name="contentID">ContentID</param>
	/// <param name="sessionID">SessionID</param>
	/// <returns>VBBoolData</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentVerifyIsReal",
						   args,
						   onSuccess,
						   onFailure,
						   false,
						   true)
		} else {
			proxy.invoke("ContentVerifyIsReal",
						   args,
						   onSuccess,
						   onFailure,
						   false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentVerifyIsReal",
						   args,
						   callBackOverride,
						   onFailure,
						   false,
						   true)
		} else {
			proxy.invoke("ContentVerifyIsReal",
						   args,
						   callBackOverride,
						   onFailure,
						   false)
		}
	}
}
MaduroSLL.Service.prototype.PresentationPollAdd = function (vbPresentationPoll, sessionID, callBackOverride) {
	/// <summary> D Presentation Poll with passed VBPresentationPoll data contract. </summary>
	/// <param name="VBPresentationPoll" type="MaduroDC.VBPresentationPoll">VBPresentationPoll data contract to create new poll.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbPresentationPoll": vbPresentationPoll,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationPollAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationPollAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationPollGet = function (presentationID, sessionID, callBackOverride) {
	/// <summary> Get Presentation Poll with passed presentationID. </summary>
	/// <param name="presentationID" type="String">PresentationID to get related Polls.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBPresentationPoll"> VBPresentationPoll data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"presentationID": presentationID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationPollGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationPollGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationPollGetForViewer = function (presentationID, userID, sessionID, callBackOverride) {
	/// <summary> Get Presentation Poll with passed presentationID. </summary>
	/// <param name="presentationID" type="String">PresentationID to get related Polls.</param>
	/// <param name="userID" type="String">UserID to get related Polls.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBPresentationPoll"> VBPresentationPoll data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"presentationID": presentationID,
		"userID": userID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationPollGetForViewer",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationPollGetForViewer",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationPollDelete = function (vbPresentationPoll, sessionID, callBackOverride) {
	/// <summary> Delete Presentation Poll with passed VBPresentationPoll data contract </summary>
	/// <param name="VBPresentationPoll" type="MaduroDC.VBPresentationPoll">VBPresentationPoll data contract to create new poll.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbPresentationPoll": vbPresentationPoll,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationPollDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationPollDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationPollLiveAdd = function (vbPollLives, sessionID, callBackOverride) {
	/// <summary> Add Presentation Poll Live with passed VBPresentationPollLive data contract </summary>
	/// <param name="vbPollLives" type="MaduroDC.VBPresentationPollLive">VBPresentationPollLive data contract to save session and active polls.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbPollLives": vbPollLives,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationPollLiveAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationPollLiveAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationPollAnswerDelete = function (vbPresentationPoll, sessionID, callBackOverride) {
	/// <summary> Clear Presentation Poll Responds with passed VBPresentationPoll data contract </summary>
	/// <param name="VBPresentationPoll" type="MaduroDC.VBPresentationPoll">VBPresentationPoll data contract to clear poll responds.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbPresentationPoll": vbPresentationPoll,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationPollAnswerDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationPollAnswerDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationPollAnswerAdd = function (vbPresentationPollAnswer, sessionID, callBackOverride) {
	/// <summary> Send Presentation Poll Respond with passed VBPresentationPollAnswer data contract </summary>
	/// <param name="VBPresentationPollAnswer" type="MaduroDC.VBPresentationPollAnswer">VBPresentationPollAnswer data contract to send poll respond.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbPresentationPollAnswer": vbPresentationPollAnswer,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationPollAnswerAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationPollAnswerAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationAudienceLiveGet = function (presentationID, sessionID, callBackOverride) {
	/// <summary> Get Live Audience with passed presentationID. </summary>
	/// <param name="presentationID" type="String">PresentationID to get live audience.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBPresentationAudienceLive">VBPresentationAudienceLive data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"presentationID": presentationID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationAudienceLiveGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationAudienceLiveGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationLiveViewersGet = function (contentID, sessionID, callBackOverride) {
	/// <summary> Get Live Audience with passed contentID. </summary>
	/// <param name="contentID" type="Int">ContentID to get live audience.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBPresentationViewers">VBPresentationViewers data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationLiveViewersGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationLiveViewersGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationLiveViewersNumberGet = function (contentID, sessionID, callBackOverride) {
	/// <summary> Get number of Live Audience with passed contentID. </summary>
	/// <param name="contentID" type="Int">ContentID to get live audience.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBIntData">VBIntData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationLiveViewersNumberGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationLiveViewersNumberGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationActivityAdd = function (vbPresentationActivity, sessionID, callBackOverride) {
	/// <summary> Add presentation activity (share website , overlay text) with passed VBPresentationActivity data contract </summary>
	/// <param name="VBPresentationActivity" type="MaduroDC.VBPresentationActivity">VBPresentationActivity data contract to add activity.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbPresentationActivity": vbPresentationActivity,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationActivityAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationActivityAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationViewersQuestionGet = function (presentationID, presentationSessionLiveID, sessionID, userID, callBackOverride) {
    /// <summary> Get Live Audience with passed presentationID. </summary>
    /// <param name="presentationID" type="String">PresentationID to get live audience.</param>
    /// <param name="presentationSessionLiveID" type="String">Unique session live ID.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBPresentationViewerQuestion"> VBPresentationViewerQuestion data contract. If an exception is thrown, the.Exception property will be populated. </returns>
    /// new param timeStamp added to ensure refresh of new data specially in iOS safari (where ajax requests are cached)
    var args = {
        "presentationID": presentationID,
        "presentationSessionLiveID": presentationSessionLiveID,
        "sessionID": sessionID,
        "userID": userID
    };
    if (!callBackOverride) {
        proxy.invoke("PresentationViewersQuestionGet",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("PresentationViewersQuestionGet",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.PresentationSetViewPublicQAUnanswered = function (presentationSessionLiveID, allowViewPublicQAUnanswered, sessionID, callBackOverride) {
    /// <summary> Get Live Audience with passed presentationID. </summary>
    /// <param name="presentationSessionLiveID" type="int">Unique session live ID.</param>
    /// <param name="allowViewPublicQAUnanswered" type="bool">To allow public QA Unanswered to be visible.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>

    var args = {
        "presentationSessionLiveID": presentationSessionLiveID,
        "allowViewPublicQAUnanswered": allowViewPublicQAUnanswered,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("PresentationSetViewPublicQAUnanswered",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("PresentationSetViewPublicQAUnanswered",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.PresentationSetAllowAnonymousQuestions = function (presentationSessionLiveID, allowAnonymousQuestions, sessionID, callBackOverride) {
    /// <summary> Get Live Audience with passed presentationID. </summary>
    /// <param name="presentationSessionLiveID" type="int">Unique session live ID.</param>
    /// <param name="allowAnonymousQuestions" type="bool">To allow public Anonymous Questions to be visible.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>

    var args = {
        "presentationSessionLiveID": presentationSessionLiveID,
        "allowAnonymousQuestions": allowAnonymousQuestions,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("PresentationSetAllowAnonymousQuestions",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("PresentationSetAllowAnonymousQuestions",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.PresentationViewersQuestionAdd = function (vbPresentationViewerQuestion, sessionID, callBackOverride) {
	/// <summary> Add question with passed VBPresentationViewerQuestion data contract </summary>
	/// <param name="VBPresentationViewerQuestion" type="MaduroDC.VBPresentationViewerQuestion">VBPresentationActivity data contract to send question.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbPresentationViewerQuestion": vbPresentationViewerQuestion,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationViewersQuestionAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationViewersQuestionAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.PresentationPresenterQuestionAdd = function (vbPresentationViewerQuestion, sessionID, callBackOverride) {
    /// <summary> Add question with passed VBPresentationViewerQuestion data contract </summary>
    /// <param name="VBPresentationViewerQuestion" type="MaduroDC.VBPresentationViewerQuestion">VBPresentationActivity data contract to send question.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

    var args = {
        "vbPresentationViewerQuestion": vbPresentationViewerQuestion,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("PresentationPresenterQuestionAdd",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("PresentationPresenterQuestionAdd",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.PresentationPresenterQuestionGet = function (presentationID, presentationSessionLiveID, sessionID, userID, callBackOverride) {
    /// <summary> Get the Presenter Questions. </summary>
    /// <param name="presentationID" type="String">PresentationID to get live audience.</param>
    /// <param name="presentationSessionLiveID" type="String">Unique session live ID.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBPresentationPresenterQuestion"> VBPresentationPresenterQuestion data contract. If an exception is thrown, the.Exception property will be populated. </returns>
    /// new param timeStamp added to ensure refresh of new data specially in iOS safari (where ajax requests are cached)
    var args = {
        "presentationID": presentationID,
        "presentationSessionLiveID": presentationSessionLiveID,
        "sessionID": sessionID,
        "userID": userID
    };
    if (!callBackOverride) {
        proxy.invoke("PresentationPresenterQuestionGet",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("PresentationPresenterQuestionGet",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.PresentationViewerAnswerAdd = function (vbPresentationViewerAnswer, sessionID, callBackOverride) {
    /// <summary> Get the Presenter Questions. </summary>
    /// <param name="presentationID" type="String">PresentationID to get live audience.</param>
    /// <param name="presentationSessionLiveID" type="String">Unique session live ID.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBPresentationPresenterQuestion"> VBPresentationPresenterQuestion data contract. If an exception is thrown, the.Exception property will be populated. </returns>
    /// new param timeStamp added to ensure refresh of new data specially in iOS safari (where ajax requests are cached)
    var args = {
        "vbPresentationViewerAnswer": vbPresentationViewerAnswer,
        "sessionID": sessionID,
        "userID": userID
    };
    if (!callBackOverride) {
        proxy.invoke("PresentationViewerAnswerAdd",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("PresentationViewerAnswerAdd",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.PresentationViewerAnswerDelete = function (presentationViewerAnswerID, sessionID, callBackOverride) {
    /// <summary>
    /// Delete answer of any presenter viewer
    /// </summary>
    /// <param name="presentationViewerAnswerID"></param>
    /// <param name="sessionID"></param>
    /// <returns></returns>
    var args = {
        "presentationViewerAnswerID": presentationViewerAnswerID,
        "sessionID": sessionID,
        "userID": userID
    };
    if (!callBackOverride) {
        proxy.invoke("PresentationViewerAnswerDelete",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("PresentationViewerAnswerDelete",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.PresentationViewerQuestionAssignModerator = function (presentationViewerQuestionID, userID, sessionID, callBackOverride) {
    /// <summary> Add question with passed VBPresentationViewerQuestion data contract </summary>
    /// <param name="presentationViewerQuestionID" type="int">The Presentation Viewer Question ID.</param>
    /// <param name="userID" type="int">The User ID to assign this question.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

    var args = {
        "presentationViewerQuestionID": presentationViewerQuestionID,
        "userID": userID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("PresentationViewerQuestionAssignModerator",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("PresentationViewerQuestionAssignModerator",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.PresentationViewerQuestionSetAnswer = function (presentationViewerQuestionID, answer, userID, sessionID, callBackOverride) {
    /// <summary> Add question with passed VBPresentationViewerQuestion data contract </summary>
    /// <param name="presentationViewerQuestionID" type="int">The Presentation Viewer Question ID.</param>
    /// <param name="userID" type="int">The User ID to assign this question.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

    var args = {
        "presentationViewerQuestionID": presentationViewerQuestionID,
        "userID": userID,
        "answer": answer,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("PresentationViewerQuestionSetAnswer",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("PresentationViewerQuestionSetAnswer",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.PresentationGet = function (contentID, sessionID, callBackOverride) {
	/// <summary> Add question with passed VBPresentationViewerQuestion data contract </summary>
	/// <param name="VBPresentationViewerQuestion" type="MaduroDC.VBPresentationViewerQuestion">VBPresentationActivity data contract to send question.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationScheduleTimeLeftGet = function (presentationSessionLiveID, sessionID, callBackOverride) {
	/// <summary> Get presentation schedule time left with passed presentationSessionLiveID</summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBIntData"> VBIntData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"presentationSessionLiveID": presentationSessionLiveID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationScheduleTimeLeftGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationScheduleTimeLeftGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationPresenterGet = function (presentationID, sessionID, callBackOverride) {
	/// <summary> Get Presentation presenters with passed presentationID. </summary>
	/// <param name="presentationID" type="String">PresentationID to get presenters.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBPresentationPresenter"> VBPresentationPresenter data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"presentationID": presentationID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationPresenterGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationPresenterGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationQAModeratorsGet = function (presentationID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns the collection of presentation Q&A moderators for the presentation ID.
	/// </summary>
	/// <param name="presentationID" type="int">Presentation ID</param>
	/// <param name="sessionID" type="string">Session ID</param>
	/// <returns>list of VBPresentationQAModerator</returns>
	var args = {
		"presentationID": presentationID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationQAModeratorsGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationQAModeratorsGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.PresentationGoOnline = function (presentationID, sessionID, callBackOverride) {
	/// <summary> Make presentation online with passed presentationID. </summary>
	/// <param name="presentationID" type="String">PresentationID to set presentation online.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBIntData"> VBIntData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"presentationID": presentationID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationGoOnline",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationGoOnline",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationGoOffline = function (presentationID, presentationSessionLiveID, sendQuestionsToEmail, sessionID, callBackOverride) {
	/// <summary> Make presentation offline with passed presentationID. </summary>
	/// <param name="presentationID" type="String">PresentationID to set presentation offline.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
	    "presentationID": presentationID,
        "presentationSessionLiveID": presentationSessionLiveID,
        "sendQuestionsToEmail": sendQuestionsToEmail,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationGoOffline",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationGoOffline",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.PresentationPreGoOffline = function (presentationID, sessionID, callBackOverride) {
	/// <summary> Make presentation offline with passed presentationID. </summary>
	/// <param name="presentationID" type="String">PresentationID to set presentation offline.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"presentationID": presentationID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationPreGoOffline",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationPreGoOffline",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationStateGet = function (presentationID, sessionID, callBackOverride) {
	/// <summary> Get the presentation state with passed presentationID. </summary>
	/// <param name="presentationID" type="String">PresentationID to set presentation state.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBPresentationState"> VBPresentationState data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"presentationID": presentationID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationStateGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationStateGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationRecordStart = function (presentationID, sessionID, callBackOverride) {
	/// <summary> Start recording of presentation with passed presentationID. </summary>
	/// <param name="presentationID" type="String">PresentationID to start recording.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"presentationID": presentationID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationRecordStart",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationRecordStart",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationRecordStop = function (presentationID, sessionID, callBackOverride) {
	/// <summary> Stop recording of presentation with passed presentationID. </summary>
	/// <param name="presentationID" type="String">PresentationID to stop recording.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"presentationID": presentationID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationRecordStop",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationRecordStop",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationRecordPublish = function (presentationID, sessionID, callBackOverride) {
	/// <summary> Publish recording of presentation with passed presentationID. </summary>
	/// <param name="presentationID" type="String">PresentationID to publish recording.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"presentationID": presentationID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationRecordPublish",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationRecordPublish",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationSessionLiveGet = function (presentationID, sessionID, callBackOverride) {
	/// <summary> Get presentation session id with passed presentationID. </summary>
	/// <param name="presentationID" type="String">PresentationID to set presentation offline.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"presentationID": presentationID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationSessionLiveGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationSessionLiveGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationAudienceLiveAdd = function (vbPresentationAudienceLive, sessionID, callBackOverride) {
	/// <summary> Add live audience with passed VBPresentationAudienceLive data contract </summary>
	/// <param name="VBPresentationAudienceLive" type="MaduroDC.VBPresentationAudienceLive">VBPresentationAudienceLive data contract to add audience.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbPresentationAudienceLive": vbPresentationAudienceLive,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationAudienceLiveAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationAudienceLiveAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationPPTFileAdd = function (presentationID, appServerID, presentationPPTFileName, sessionID, callBackOverride) {
	/// <summary> Get presentation id with passed presentationID. </summary>
	/// <param name="presentationID" type="String">PresentationID to save presentation uploaded file.</param>
	/// <param name="appServerID">ID of the application server where the file is located</param>
	/// <param name="presentationPPTFileName" type="String">Presentation ppt file name.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"presentationID": presentationID,
		"appServerID": appServerID,
		"presentationPPTFileName": presentationPPTFileName,
		"sessionID": sessionID
	};
if (!callBackOverride) {
		proxy.invokeTimeOut("PresentationPPTFileAdd",
	args,
	onSuccess,
	onFailure,
	false, false, 300000)
	} else {
    proxy.invokeTimeOut("PresentationPPTFileAdd",
	args,
	callBackOverride,
	onFailure,
	false, false, 300000)
	}
}

MaduroSLL.Service.prototype.PresentationVerifyIsAnyActivity = function (presentationSessionLiveID, sessionID, callBackOverride) {
	/// <summary> Get Live Audience with passed presentationID. </summary>
	/// <param name="presentationID" type="String">PresentationID to get live audience.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBPresentationAudienceLive">VBPresentationAudienceLive data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"presentationSessionLiveID": presentationSessionLiveID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationVerifyIsAnyActivity",
	    args,
	    onSuccess,
	    ignoreFailure,  // PresentationVerifyIsAnyActivity is called periodically.  The failure can be ignored here.
	    false)
	} else {
		proxy.invoke("PresentationVerifyIsAnyActivity",
	    args,
	    callBackOverride,
	    ignoreFailure,  // PresentationVerifyIsAnyActivity is called periodically.  The failure can be ignored here.
	    false)
	}
}

MaduroSLL.Service.prototype.PresentationPollAnswerGet = function (userID, presentationPollID, sessionID, callBackOverride) {
	/// <summary> Get Presentation poll answer with passed userID and presentationPollID. </summary>
	/// <param name="userID" type="String">userID to get poll answer of user.</param>
	/// <param name="presentationID" type="String">PresentationID to get presenters.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBPresentationPollAnswer"> VBPresentationPollAnswer data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"userID": userID,
		"presentationPollID": presentationPollID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationPollAnswerGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationPollAnswerGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationDelete = function (vbPresentation, sessionID, callBackOverride) {
	/// <summary> Delete presentation with passed VBPresentation data contract </summary>
	/// <param name="vbPresentation" type="MaduroDC.VBPresentation">vbPresentation data contract to delete presentation.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbPresentation": vbPresentation,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

//code added by Team Monetizemedia ends here

MaduroSLL.Service.prototype.DeviceGetAllVBricks = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns all the vbrick devices in the system.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBDeviceVBrick data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetAllVBricks",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetAllVBricks",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceGetAllSTB = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns all the STB devices in the system.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBDeviceVBrick data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetAllSTB",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetAllSTB",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceVBrickSlotGetValidRecordLocationEnums = function (deviceID, mustIncludeDeviceRecordLocationEnumID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBList of all VBEnum data contracts for all Enums for the "DeviceRecordLocation" EnumType that are valid the specified device.
	/// </summary>
	/// <param name="deviceID" type="Number" integer="true">VBrick device unique numeric ID.</param>
	/// <param name="mustIncludeDeviceRecordLocationEnumID" type="int?">DeviceRecordLocationEnumID if that enum must be included in the returned list. Pass null if N/A.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBEnum data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"deviceID": deviceID,
		"mustIncludeDeviceRecordLocationEnumID": mustIncludeDeviceRecordLocationEnumID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceVBrickSlotGetValidRecordLocationEnums",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceVBrickSlotGetValidRecordLocationEnums",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceModelGetForDevice = function (deviceID, sessionID, callBackOverride) {
	/// <summary>
	///  Returns device model information, including slot label information, for the specified device.
	/// </summary>
	/// <param name="deviceID" type="Number" integer="true">Device's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBDeviceModel">
	/// VBDeviceModel data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"deviceID": deviceID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceModelGetForDevice",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceModelGetForDevice",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceGetVBrick = function (deviceID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns all the vbrick devices in the system.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBDeviceVBrick data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"deviceID": deviceID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetVBrick",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetVBrick",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

///////////////////////////////////////////
MaduroSLL.Service.prototype.DeviceGetSTB = function (deviceID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns all the vbrick devices in the system.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBDeviceVBrick data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"deviceID": deviceID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetSTB",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetSTB",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceGetDeviceModelMIBEnginesByDeviceModel = function (deviceModelID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns all the device model MIB engines (software revisions numbers) for a specified device model.
	/// </summary>
	/// <param name="deviceModelID" type="Number" integer="true">Device model's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBDeviceModelMIBEngine data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"deviceModelID": deviceModelID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetDeviceModelMIBEnginesByDeviceModel",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetDeviceModelMIBEnginesByDeviceModel",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceGetDeviceModelsForVBrickDevices = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns all the device models for vbrick devices.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBDeviceModel data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetDeviceModelsForVBrickDevices",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetDeviceModelsForVBrickDevices",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceGetDeviceModelsForSTBDevices = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns all the device models for STB devices.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBDeviceModel data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetDeviceModelsForSTBDevices",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetDeviceModelsForSTBDevices",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceVBrickAdd = function (vbDeviceVBrick, sessionID, callBackOverride) {
	/// <summary>
	/// Adds the vbrick device to the system.
	/// </summary>
	/// <param name="vbDeviceVBrick" type="MaduroDC.VBDeviceVBrick">Data contract populated with vbrick device data to add.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBIntData">
	/// VBIntData data contract containing new DeviceID.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDeviceVBrick": vbDeviceVBrick,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceVBrickAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceVBrickAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceVBrickUpdate = function (vbDeviceVBrick, sessionID, callBackOverride) {
	/// <summary>
	/// Updates the vbrick device in the system.
	/// </summary>
	/// <param name="vbDeviceVBrick" type="MaduroDC.VBDeviceVBrick">Data contract populated with vbrick device data to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDeviceVBrick": vbDeviceVBrick,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceVBrickUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceVBrickUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceVBrickDelete = function (vbDeviceVBrick, sessionID, callBackOverride) {
	/// <summary>
	/// Deletes the vbrick device from the system.
	/// </summary>
	/// <param name="vbDeviceVBrick" type="MaduroDC.VBDeviceVBrick">Data contract populated with vbrick device data to delete.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDeviceVBrick": vbDeviceVBrick,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceVBrickDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceVBrickDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceSTBAdd = function (vbDeviceSTB, sessionID, callBackOverride) {
	/// <summary>
	/// Adds the STB device to the system.
	/// </summary>
	/// <param name="vbDeviceSTB" type="MaduroDC.VBDeviceSTB">Data contract populated with stb device data to add.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBIntData">
	/// VBIntData data contract containing new DeviceID.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDeviceSTB": vbDeviceSTB,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceSTBAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceSTBAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceSTBUpdate = function (vbDeviceSTB, sessionID, callBackOverride) {
	/// <summary>
	/// Updates the STB device in the system.
	/// </summary>
	/// <param name="vbDeviceVBrick" type="MaduroDC.VBDeviceVBrick">Data contract populated with vbrick device data to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDeviceSTB": vbDeviceSTB,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceSTBUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceSTBUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceSTBDelete = function (vbDeviceSTB, sessionID, callBackOverride) {
	/// <summary>
	/// Deletes the STB device from the system.
	/// </summary>
	/// <param name="vbDeviceVBrick" type="MaduroDC.VBDeviceVBrick">Data contract populated with vbrick device data to delete.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDeviceSTB": vbDeviceSTB,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceSTBDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceSTBDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceGetDeviceVBrickSlotsByDevice = function (deviceID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a collection of VBDeviceVBrickSlot (VBrick Slot) data contracts for a VBrick device.
	/// </summary>
	/// <param name="deviceID" type="Number" integer="true">VBrick device's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBDeviceVBrickSlot data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"deviceID": deviceID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetDeviceVBrickSlotsByDevice",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetDeviceVBrickSlotsByDevice",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceGetDeviceVBrickSlot = function (deviceVBrickSlotID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBDeviceVBrickSlot (VBrick Slot) data contract for the passed VBrick Slot.
	/// </summary>
	/// <param name="deviceVBrickSlotID" type="Number" integer="true">VBrick device slot's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBDeviceVBrickSlot">
	/// VBDeviceVBrickSlot data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"deviceVBrickSlotID": deviceVBrickSlotID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetDeviceVBrickSlot",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetDeviceVBrickSlot",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceVBrickSlotUpdate = function (vbDeviceVBrickSlot, sessionID, callBackOverride) {
	/// <summary>
	/// Updates the vbrick device slot in the system.
	/// </summary>
	/// <param name="vbDeviceVBrickSlot" type="MaduroDC.VBDeviceVBrickSlot">Data contract populated with vbrick device slot data to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDeviceVBrickSlot": vbDeviceVBrickSlot,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceVBrickSlotUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceVBrickSlotUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceVBrickSlotViewingUrlUpdate = function (vbDeviceVBrickSlotViewingUrl, sessionID, callBackOverride) {
	/// <summary>
	/// Updates the vbrick device slot viewing url in the system.
	/// </summary>
	/// <param name="vbDeviceVBrickSlotViewingUrl" type="MaduroDC.VBDeviceVBrickSlotViewingUrl">Data contract populated with vbrick device slot viewig url data to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDeviceVBrickSlotViewingUrl": vbDeviceVBrickSlotViewingUrl,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceVBrickSlotViewingUrlUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceVBrickSlotViewingUrlUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceVBrickSlotViewingUrlDelete = function (vbDeviceVBrickSlotViewingUrl, sessionID, callBackOverride) {
	/// <summary>
	/// Deletes the vbrick device slot viewing url from the system.
	/// </summary>
	/// <param name="vbDeviceVBrickSlotViewingUrl" type="MaduroDC.VBDeviceVBrickSlotViewingUrl">Data contract populated with vbrick device slot viewig url data to delete.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDeviceVBrickSlotViewingUrl": vbDeviceVBrickSlotViewingUrl,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceVBrickSlotViewingUrlDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceVBrickSlotViewingUrlDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceVBrickSlotViewingUrlAdd = function (vbDeviceVBrickSlotViewingUrl, sessionID, callBackOverride) {
	/// <summary>
	/// Adds the vbrick device slot viewing url to the system.
	/// </summary>
	/// <param name="vbDeviceVBrickSlotViewingUrl" type="MaduroDC.VBDeviceVBrickSlotViewingUrl">Data contract populated with vbrick device slot viewig url data to add.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBIntData">
	/// VBIntData data contract containing new DeviceVBrickSlotViewingUrlID.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDeviceVBrickSlotViewingUrl": vbDeviceVBrickSlotViewingUrl,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceVBrickSlotViewingUrlAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceVBrickSlotViewingUrlAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceGetDeviceVBrickSlotViewingUrlsByDevice = function (deviceID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a collection of VBDeviceVBrickSlotViewingUrl (VBrick Slot Viewing URL) data contracts for a VBrick device.
	/// </summary>
	/// <param name="deviceID" type="Number" integer="true">VBrick device's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBDeviceVBrickSlotViewingUrl data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"deviceID": deviceID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetDeviceVBrickSlotViewingUrlsByDevice",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetDeviceVBrickSlotViewingUrlsByDevice",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PreferredUserLanguageGet = function (applicationID, callBackOverride) {
	/// <summary> Returns a VBSession data contract with only the preferred user language value. </summary>
	/// <param name="applicationID" type="String">Application ID</param>
	/// <returns type="MaduroDC.VBSession"> VBSession data contract. If an exception is thrown, the .Exception property will be populated. </returns>
	var args = {
		"applicationID": applicationID
	};
	if (!callBackOverride) {
		proxy.invoke("PreferredUserLanguageGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PreferredUserLanguageGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.LocalizedValuesGetAllAsXMLDoc = function (applicationID, callBackOverride) {
	/// <summary> Returns a VBString value which is an XML string of all localized strings for all languages and their related Widgets and Template. </summary>
	/// <param name="applicationID" type="String">Application ID</param>
	/// <returns type="MaduroDC.VBStringData"> XML string of all localized strings. If an exception is thrown, the .Exception property will be populated. </returns>
	var args = {
		"applicationID": applicationID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedLocalizedValuesGetAllAsXMLDoc",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("LocalizedValuesGetAllAsXMLDoc",
					args,
					onSuccess,
					onFailure,
					false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedLocalizedValuesGetAllAsXMLDoc",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("LocalizedValuesGetAllAsXMLDoc",
					args,
					callBackOverride,
					onFailure,
					false)
		}
	}
}

MaduroSLL.Service.prototype.LocalizedValuesGetAllAsXMLDocWithLangPref = function (applicationID, LangPref, callBackOverride) {
	/// <summary> Returns a VBString value which is an XML string of all localized strings for all languages and their related Widgets and Template. </summary>
	/// <param name="applicationID" type="String">Application ID</param>
	/// <returns type="MaduroDC.VBStringData"> XML string of all localized strings. If an exception is thrown, the .Exception property will be populated. </returns>
	var args = {
		"applicationID": applicationID,
		"LangPref": LangPref
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedLocalizedValuesGetAllAsXMLDocWithLangPref",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("LocalizedValuesGetAllAsXMLDocWithLangPref",
					args,
					onSuccess,
					onFailure,
					false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedLocalizedValuesGetAllAsXMLDocWithLangPref",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("LocalizedValuesGetAllAsXMLDocWithLangPref",
					args,
					callBackOverride,
					onFailure,
					false)
		}
	}
}

MaduroSLL.Service.prototype.GetAndSetActualUserLangUsed = function (LangPref, sessionID,callBackOverride) {
    /// <summary> Returns a VBString value
    /// Using the passed language preference (e.g. EN-US), return the actual lang used
    /// This logic must run at the server and it works as follows
    /// If the globals preferred lang is set, return that
    /// Else if the passed value is null or empty, return the preferred browser's language
    /// Else return the passed in LangPref
    var args = {
        "LangPref": LangPref,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("GetAndSetActualUserLangUsed",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("GetAndSetActualUserLangUsed",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}



MaduroSLL.Service.prototype.EmbedLocalizedValuesGetAllAsXMLDoc = function (applicationID, callBackOverride) {
	/// <summary> Returns a VBString value which is an XML string of all localized strings for all languages and their related Widgets and Template. </summary>
	/// <param name="applicationID" type="String">Application ID</param>
	/// <returns type="MaduroDC.VBStringData"> XML string of all localized strings. If an exception is thrown, the .Exception property will be populated. </returns>
	var args = {
		"applicationID": applicationID
	};
	if (!callBackOverride) {
		JSONPproxy.invoke("EmbedLocalizedValuesGetAllAsXMLDoc",
	args,
	onSuccess,
	onFailure,
	false,
	true)
	} else {
		JSONPproxy.invoke("EmbedLocalizedValuesGetAllAsXMLDoc",
	args,
	callBackOverride,
	onFailure,
	false,
	true)
	}
}

MaduroSLL.Service.prototype.LocalizedValuesGetAllAsXMLDocByXPath = function (applicationID, xPath, callBackOverride) {
	/// <summary> Returns a VBString value which is an XML string of all localized strings for all languages and their related Widgets and Template. </summary>
	/// <param name="applicationID" type="String">Application ID</param>
	/// <returns type="MaduroDC.VBStringData"> XML string of all localized strings. If an exception is thrown, the .Exception property will be populated. </returns>
	var args = {
		"applicationID": applicationID,
		"xPath": xPath
	};
	if (!callBackOverride) {
		proxy.invoke("LocalizedValuesGetAllAsXMLDocByXPath",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LocalizedValuesGetAllAsXMLDocByXPath",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ClientZoneProcessFault = function (contentInstanceID, URL, sessionID, callBackOverride) {

	/// <summary>
	/// Informs backend that player failed to play content.
	/// </summary>
	/// <param name="ContentInstanceID">ContentInstanceID</param>
	/// <param name="ContentInstanceURL">ContentInstanceURL</param>
	/// <param name="sessionID">SessionID</param>
	/// <returns>VBBoolData</returns>
	var args = {
		"contentInstanceID": contentInstanceID,
		"URL": URL,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedClientZoneProcessFault",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ClientZoneProcessFault",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedClientZoneProcessFault",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ClientZoneProcessFault",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.DateTimeGetBestGuessEnumTimeZoneID = function (standardUtcOffsetInMinutes, doesSupportDaylightSavingTime, daylightTransitionStartMonth, daylightTransitionEndMonth, sessionID, callBackOverride) {

	/// <summary>
	/// Gets the best guess for the EnumTimeZoneID (i.e. time zone) based on the time zone's standard offset from UTC (not including adjustment for DST) and whether the time zone supports daylight saving time.
	/// Used by UI when we need to guess what time zone the client is confugured for.  A value will be returned only if 1 time zone found that matches passed information.
	/// </summary>
	/// <param name="standardUtcOffsetInMinutes" type="Number" integer="true">The time difference in minutes between the time zone's standard time and Coordinated Universal Time (UTC); i.e. does not account for daylight saving time.</param>
	/// <param name="doesSupportDaylightSavingTime" type="Boolean">Indicates if the time zone support daylight saving time.</param>
	/// <param name="daylightTransitionStartMonth" type="Number" integer="true">The Month (number) when the daylight saving time starts in current year. Pass 0 if N/A.</param>
	/// <param name="daylightTransitionEndMonth" type="Number" integer="true">The Month (number) when the daylight saving time ends in current year. Pass 0 if N/A.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBIntData">
	/// VBIntData data contract containing enumTimeZoneID if found else 0 if not found.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"standardUtcOffsetInMinutes": standardUtcOffsetInMinutes,
		"doesSupportDaylightSavingTime": doesSupportDaylightSavingTime,
		"daylightTransitionStartMonth": daylightTransitionStartMonth,
		"daylightTransitionEndMonth": daylightTransitionEndMonth,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedDateTimeGetBestGuessEnumTimeZoneID",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("DateTimeGetBestGuessEnumTimeZoneID",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedDateTimeGetBestGuessEnumTimeZoneID",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("DateTimeGetBestGuessEnumTimeZoneID",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.DateTimeGetCurrentDateTimeInTimeZone = function (enumTimeZoneID, sessionID, callBackOverride) {

	/// <summary>
	/// Get the current date and time and return that information based on the passed time zone.
	/// </summary>
	/// <param name="enumTimeZoneID" type="Number" integer="true">The EnumID associated with the TimeZone enumtype.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBDateTimeWrapper">
	/// VBDateTimeWrapper data contract containing information on date and time.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"enumTimeZoneID": enumTimeZoneID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DateTimeGetCurrentDateTimeInTimeZone",
	   args,
	   onSuccess,
	   onFailure,
	   false)
	} else {
		proxy.invoke("DateTimeGetCurrentDateTimeInTimeZone",
	   args,
	   callBackOverride,
	   onFailure,
	   false)
	}
}

MaduroSLL.Service.prototype.ContentCategoryPermissionsDefaultUserGet = function (userID, sessionID, callBackOverride) {
	/// <summary>
	/// Get the default permissions for passed UserID.
	/// </summary>
	/// <param name="userID" type="Number" integer="true">UserID</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBDefaultContentCategoryPermissions">MaduroDC.VBDefaultContentCategoryPermissions</returns>

	var args = {
		"userID": userID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentCategoryPermissionsDefaultUserGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentCategoryPermissionsDefaultUserGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}



MaduroSLL.Service.prototype.ContentCategoryPermissionsDefaultGroupGet = function (groupID, sessionID, callBackOverride) {
	/// <summary>
	/// Get the default permissions for passed GroupID.
	/// </summary>
	/// <param name="groupID" type="Number" integer="true">GroupID</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBDefaultContentCategoryPermissions">MaduroDC.VBDefaultContentCategoryPermissions</returns>

	var args = {
		"groupID": groupID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentCategoryPermissionsDefaultGroupGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentCategoryPermissionsDefaultGroupGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.AppServerGetFtpInfo = function (sessionID, callBackOverride) {
	/// <summary>
	/// Gets the app server's ftp info based on the specific servername.
	/// </summary>
	/// <param name="sessionID">SessionID</param>
	/// <returns>VBAppServer data contract</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedAppServerGetFtpInfo",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("AppServerGetFtpInfo",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedAppServerGetFtpInfo",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("AppServerGetFtpInfo",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.AppServerGetFtpInfoForIngestion = function (sessionID, callBackOverride) {
	/// <summary>
	/// Gets the app server's ftp info for content ingestion.
	/// </summary>
	/// <param name="sessionID">SessionID</param>
	/// <returns>VBAppServer data contract</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedAppServerGetFtpInfo",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("AppServerGetFtpInfoForIngestion",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedAppServerGetFtpInfo",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("AppServerGetFtpInfoForIngestion",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.DeviceGetAllVBricksFromMgmtSAPNotUsed = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns all the vbrick devices found in the management SAP that have not already been used in the system.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBDeviceVBrick data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetAllVBricksFromMgmtSAPNotUsed",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetAllVBricksFromMgmtSAPNotUsed",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceGetAllSTBsFromMgmtSAPNotUsed = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns all the stb devices found in the management SAP that have not already been used in the system.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBDeviceSTB data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetAllSTBsFromMgmtSAPNotUsed",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetAllSTBsFromMgmtSAPNotUsed",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceGetMIBEngineVersionNumberForModel = function (deviceModelID, softwareRevision, sessionID, callBackOverride) {
	/// <summary>
	/// Gets the MIB Engine Version Number for the passed device model and software revision.
	/// </summary>
	/// <param name="deviceModelID" type="Number" integer="true">Device models's unique numeric ID.</param>
	/// <param name="softwareRevision" type="String">The software version for the device.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBIntData">
	/// VBIntData data contract containing MIBEngineVersionNumber. Returns 0 if not found.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"deviceModelID": deviceModelID,
		"softwareRevision": softwareRevision,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetMIBEngineVersionNumberForModel",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetMIBEngineVersionNumberForModel",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceGetVBrickInfoFromMgmtSAP = function (hostName, ipAddress, sessionID, callBackOverride) {
	/// <summary>
	/// Returns information on the VBrick from the management SAP based on either the passed host name or IP Address (whichever is found).  Throws an error if not found.
	/// </summary>
	/// <param name="hostName" type="String">Host Name.</param>
	/// <param name="ipAddress" type="String">IP Address.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBDeviceVBrick data contract if found else throws an error if not found.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"hostName": hostName,
		"ipAddress": ipAddress,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetVBrickInfoFromMgmtSAP",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetVBrickInfoFromMgmtSAP",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceGetSTBInfoFromMgmtSAP = function (hostName, ipAddress, sessionID, callBackOverride) {
	/// <summary>
	/// Returns information on the STB from the management SAP based on either the passed host name or IP Address (whichever is found).  Throws an error if not found.
	/// </summary>
	/// <param name="hostName" type="String">Host Name.</param>
	/// <param name="ipAddress" type="String">IP Address.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBDeviceSTB data contract if found else throws an error if not found.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"hostName": hostName,
		"ipAddress": ipAddress,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetSTBInfoFromMgmtSAP",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetSTBInfoFromMgmtSAP",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationSlideGetAll = function (presentationID, sessionID, callBackOverride) {
	/// <summary> Get uploaded presentation slides with passed presentationID. </summary>
	/// <param name="presentationID" type="String">PresentationID to get uploaded presentation slides.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"presentationID": presentationID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationSlideGetAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationSlideGetAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.PresentationImportPollFromTxt = function (presentationID, appServerID, presentationPollTxtFileName, sessionID, callBackOverride) {
	/// <summary>
	/// Parses the admin uploaded poll txt file and passes back the VBPresentationPoll Object back to the client.
	/// </summary>
	/// <param name="presentationID">PresentationID</param>
	/// <param name="appServerID">ID of the application server where the file is located</param>
	/// <param name="presentationPollTxtFileName">PollTxtFileName</param>
	/// <param name="sessionID">UniqueSessionID</param>
	/// <returns>VBPresentationPoll</returns>
	var args = {
		"presentationID": presentationID,
		"appServerID": appServerID,
		"presentationPollTxtFileName": presentationPollTxtFileName,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationImportPollFromTxt",
	   args,
	   onSuccess,
	   onFailure,
	   false)
	} else {
		proxy.invoke("PresentationImportPollFromTxt",
	   args,
	   callBackOverride,
	   onFailure,
	   false)
	}
}



MaduroSLL.Service.prototype.PresentationRecordedGetActivity = function (presentationID, sessionID, callBackOverride) {
	/// <summary>
	/// Gets the list of the VBPresentationActivity for the recorded webcast(presentation)
	/// </summary>
	/// <param name="presentationID">presentationID</param>
	/// <param name="sessionID">Unique SessionID</param>
	/// <returns>VBPresentationActivity List</returns>
	var args = {
		"presentationID": presentationID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationRecordedGetActivity",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationRecordedGetActivity",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationLiveDelete = function (presentationID, sessionID, callBackOverride) {
	/// <summary>
	/// Delete Live Presentation.
	/// </summary>
	/// <param name="presentationID">presentationID</param>
	/// <param name="sessionID">SessionID</param>
	/// <returns>Void data</returns>
	var args = {
		"presentationID": presentationID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPresentationLiveDelete",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PresentationLiveDelete",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPresentationLiveDelete",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PresentationLiveDelete",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.PresentationStoredDelete = function (presentationID, sessionID, callBackOverride) {
	/// <summary>
	/// Delete Stored Presentation.
	/// </summary>
	/// <param name="presentationID">presentationID</param>
	/// <param name="sessionID">SessionID</param>
	/// <returns>Void data</returns>
	var args = {
		"presentationID": presentationID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPresentationStoredDelete",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PresentationStoredDelete",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPresentationStoredDelete",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PresentationStoredDelete",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}


MaduroSLL.Service.prototype.PresentationPollLiveUpdate = function (pollLive, sessionID, callBackOverride) {
	/// <summary> Updates the Results Published for the presentation poll live </summary>
	/// <param name="VBPresentationPollLive" type="MaduroDC.VBPresentationPollLive">VBPresentationPollLive data contract.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"pollLive": pollLive,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationPollLiveUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationPollLiveUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}



MaduroSLL.Service.prototype.UsersGetAllLockedOut = function (sessionID, callBackOverride) {
	/// <summary>
	/// Gets the list of locked out (temp or perm) users.
	/// </summary>
	/// <param name="sessionID">SessionID</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("UsersGetAllLockedOut",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("UsersGetAllLockedOut",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.UsersGetRecentLogins = function (sessionID, recentLogins, callBackOverride) {
	/// <summary>
	/// Gets the recent logins of the user
	/// </summary>
	/// <param name="sessionID">SessionID</param>
	/// <param name="recentLogins">Recent Login Times</param>
	/// <returns>MaduroDC.VBList</returns>
	var args = {
		"sessionID": sessionID,
		"recentLogins": recentLogins
	};
	if (!callBackOverride) {
		proxy.invoke("UsersGetRecentLogins",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("UsersGetRecentLogins",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}



MaduroSLL.Service.prototype.LdapServersGetOnlineStatus = function (sessionID, callBackOverride) {
	/// <summary>
	/// Lists down all the LDAP Servers with the online/offline status.
	/// </summary>
	/// <param name="sessionID">SessionID</param>
	/// <returns>VBList.VBDeviceVBrick</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("LdapServersGetOnlineStatus",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("LdapServersGetOnlineStatus",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.StoredServerGetOnlineStatus = function (sessionID, callBackOverride) {
	/// <summary>
	/// Lists down all the Stored Servers with the online/offline status of each device.
	/// </summary>
	/// <param name="sessionID">SessionID</param>
	/// <returns>VBList.VBDeviceVBrick</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("StoredServerGetOnlineStatus",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StoredServerGetOnlineStatus",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}



MaduroSLL.Service.prototype.DeviceVBrickGetOnlineStatus = function (sessionID, callBackOverride) {
	/// <summary>
	/// Lists down all the VBrick Devices with the online/offline status of each device.
	/// </summary>
	/// <param name="sessionID">SessionID</param>
	/// <returns>VBList.VBDeviceVBrick</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceVBrickGetOnlineStatus",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceVBrickGetOnlineStatus",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.ApplicationErrorsGet = function (sessionID, recentErrors, callBackOverride) {
	/// <summary>
	/// Gets all the recent application errors
	/// </summary>
	/// <param name="sessionID">SessionID</param>
	/// <param name="recentErrors">RecentError</param>
	/// <returns>List of Application Error</returns>
	var args = {
		"sessionID": sessionID,
		"recentErrors": recentErrors
	};
	if (!callBackOverride) {
		proxy.invoke("ApplicationErrorsGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ApplicationErrorsGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationSlidesDelete = function (presentationID, sessionID, callBackOverride) {
	/// <summary>
	/// Deletes the presentation slides.
	/// </summary>
	/// <param name="presentationID">PresentationID</param>
	/// <param name="sessionID">SessionID</param>
	/// <returns>VBVoidData</returns>
	var args = {
		"presentationID": presentationID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationSlidesDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationSlidesDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}



MaduroSLL.Service.prototype.ContentStoredDeleteFromStoredServer = function (contentInstanceID, deleteContent, sessionID, callBackOverride) {
	/// <summary>
	/// Deletes a content instance from the stored server it is hosted on.
	/// </summary>
	/// <param name="contentInstanceID" type="Number" integer="true">contentInstanceID</param>
	/// <param name="deleteContent" type="Boolean">True to delete the associated content record, false otherwise</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"contentInstanceID": contentInstanceID,
		"deleteContent": deleteContent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentStoredDeleteFromStoredServer",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentStoredDeleteFromStoredServer",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentStoredDeleteFromStoredServer",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentStoredDeleteFromStoredServer",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}


MaduroSLL.Service.prototype.CategoryContentPermissionsUpdateByUser = function (userID, vbCategory, sessionID, callBackOverride) {

	/// <summary>
	/// Replaces all Category permissions for the passed UserID
	/// Take UserID, collection of Category Objects
	///		Each Category Object will have:
	///			- it's Category Permission Object
	/// </summary>
	/// <param name="userID" type="Number" integer="true">userID</param>
	/// <param name="vbCategory" type="MaduroDC.VBCategory[]">List of VBCategory data contracts to replace.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"userID": userID,
		"vbCategory": vbCategory,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		JSONPproxy.invokeTimeOut("CategoryContentPermissionsUpdateByUser",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		JSONPproxy.invokeTimeOut("CategoryContentPermissionsUpdateByUser",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.CategoryContentPermissionsUpdateByGroup = function (GroupID, vbCategory, sessionID, callBackOverride) {

	/// <summary>
	/// Replaces all Category permissions for the passed GroupID
	/// Take UserID, collection of Category Objects
	///		Each Category Object will have:
	///			- it's Category Permission Object
	/// </summary>
	/// <param name="groupID" type="Number" integer="true">groupID</param>
	/// <param name="vbCategory" type="MaduroDC.VBCategory[]">List of VBCategory data contracts to replace.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>
	var args = {
		"groupID": GroupID,
		"vbCategory": vbCategory,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		JSONPproxy.invokeTimeOut("CategoryContentPermissionsUpdateByGroup",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		JSONPproxy.invokeTimeOut("CategoryContentPermissionsUpdateByGroup",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ScheduleEventContentSeedCreate = function (sessionID, callBackOverride) {

	/// <summary>
	/// Creates a new seed content record only (no metadata) for a scheduled event.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBIntData">
	/// VBIntData data contract representing the seed content id
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ScheduleEventContentSeedCreate",
	   args,
	   onSuccess,
	   onFailure,
	   false)
	} else {
		proxy.invoke("ScheduleEventContentSeedCreate",
	   args,
	   callBackOverride,
	   onFailure,
	   false)
	}
}

MaduroSLL.Service.prototype.ScheduleEventContentSeedCreateFromContentWithMetadata = function (copyMetadataFromContentID, sessionID, callBackOverride) {

	/// <summary>
	/// Creates a new seed content record with metadata based on the passed content with metadata for a scheduled event.
	/// </summary>
	/// <param name="copyMetadataFromContentID" type="Number" integer="true">The seed content id containing the metadata to copy from.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBIntData">
	/// VBIntData data contract representing the new seed content id
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"copyMetadataFromContentID": copyMetadataFromContentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ScheduleEventContentSeedCreateFromContentWithMetadata",
	   args,
	   onSuccess,
	   onFailure,
	   false)
	} else {
		proxy.invoke("ScheduleEventContentSeedCreateFromContentWithMetadata",
	   args,
	   callBackOverride,
	   onFailure,
	   false)
	}
}

MaduroSLL.Service.prototype.ScheduleEventContentSeedReplaceMetadata = function (copyMetadataToContentID, copyMetadataFromContentID, sessionID, callBackOverride) {
	/// <summary>
	/// Replaces all the metadata from copyMetadataFromContentID seed content to copyMetadataToContentID seed content for a scheduled event.
	/// Used in scheduler when user picks a content source and the metadata associated with the
	///     ScheduledEvent.MetadataContentID needs to be updated with metadata from selected content
	/// </summary>
	/// <param name="copyMetadataToContentID" type="Number" integer="true">The seed content id to copy to.</param>
	/// <param name="copyMetadataFromContentID" type="Number" integer="true">The seed content id to copy from.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"copyMetadataToContentID": copyMetadataToContentID,
		"copyMetadataFromContentID": copyMetadataFromContentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ScheduleEventContentSeedReplaceMetadata",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ScheduleEventContentSeedReplaceMetadata",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentSeedCreateForAddVideo = function (sessionID, callBackOverride) {

	/// <summary>
	/// Creates a new seed content record only (no metadata) for Add Video.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBIntData">
	/// VBIntData data contract representing the seed content id
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentSeedCreateForAddVideo",
						   args,
						   onSuccess,
						   onFailure,
						   false,
						   true)
		} else {
			proxy.invoke("ContentSeedCreateForAddVideo",
						   args,
						   onSuccess,
						   onFailure,
						   false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentSeedCreateForAddVideo",
						   args,
						   callBackOverride,
						   onFailure,
						   false,
						   true)
		} else {
			proxy.invoke("ContentSeedCreateForAddVideo",
						   args,
						   callBackOverride,
						   onFailure,
						   false)
		}
	}
}

MaduroSLL.Service.prototype.IsFileIngestableBasedOnExtension = function (fileName, sessionID, callBackOverride) {
	/// <summary>
	/// Is the file ingestable based on its file extension and available stored server in the system.
	/// </summary>
	/// <param name="fileName" type="string">File name with file extension specified.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBBoolData">
	/// VBBoolData data contract
	/// If an exception is thrown, the .Exception property will be populated.
	///
	/// If the file extension is not supported, the .Exception will be VBInvalidFileTypeException.
	/// If the available stored server can not stored the file, the method will return false.
	/// </returns>
	var args = {
		"fileName": fileName,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedIsFileIngestableBasedOnExtension",
						   args,
						   onSuccess,
						   onFailure,
						   false,
						   true)
		} else {
			proxy.invoke("IsFileIngestableBasedOnExtension",
						   args,
						   onSuccess,
						   onFailure,
						   false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedIsFileIngestableBasedOnExtension",
						   args,
						   callBackOverride,
						   onFailure,
						   false,
						   true)
		} else {
			proxy.invoke("IsFileIngestableBasedOnExtension",
						   args,
						   callBackOverride,
						   onFailure,
						   false)
		}
	}
}

MaduroSLL.Service.prototype.ContentSearchCacheClear = function (sessionID, callBackOverride) {
	/// <summary>
	/// Clear the content search cache.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentSearchCacheClear",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentSearchCacheClear",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentSearchCacheClear",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentSearchCacheClear",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentHasInstance = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Uses the Content Search to check if the content contains any instance.
	/// </summary>
	/// <param name="contentID" type="Number" integer="true">Unique numeric ID of Content to play.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBBoolData">VBBoolData data contract.</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentHasInstance",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentHasInstance",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationAdminGetPollingValues = function (sessionID, callBackOverride) {
	/// <summary>
	/// Fetches the Presentation Admin's client polling defaults.
	/// </summary>
	/// <returns>MaduroDC.VBPresentationPollingDetails</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationAdminGetPollingValues",
		args,
		onSuccess,
		onFailure,
		false)
	} else {
		proxy.invoke("PresentationAdminGetPollingValues",
		args,
		callBackOverride,
		onFailure,
		false)
	}
}


MaduroSLL.Service.prototype.PresentationViewerGetPollingValues = function (sessionID, callBackOverride) {
	/// <summary>
	/// Fetches the Presentation Viewer's client polling defaults.
	/// </summary>
	/// <returns>MaduroDC.VBPresentationPollingDetails</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationViewerGetPollingValues",
		args,
		onSuccess,
		onFailure,
		false)
	} else {
		proxy.invoke("PresentationViewerGetPollingValues",
		args,
		callBackOverride,
		onFailure,
		false)
	}
}

MaduroSLL.Service.prototype.FilterDataGetForFavorites = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get the Filter Widget Data, including Categories, for the current user's Favorite Content
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>Filter Data Object</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FilterDataGetForFavorites",
	   args,
	   onSuccess,
	   onFailure,
	   false)
	} else {
		proxy.invoke("FilterDataGetForFavorites",
	   args,
	   callBackOverride,
	   onFailure,
	   false)
	}
}

MaduroSLL.Service.prototype.FilterDataGetForRecent = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get the Filter Widget Data, including Categories, for the Recently Viewed Content
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>Filter Data Object</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FilterDataGetForRecent",
	   args,
	   onSuccess,
	   onFailure,
	   false)
	} else {
		proxy.invoke("FilterDataGetForRecent",
	   args,
	   callBackOverride,
	   onFailure,
	   false)
	}
}

MaduroSLL.Service.prototype.FilterDataGetForMyRecent = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get the Filter Widget Data, including Categories, for the My Recently Viewed Content
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>Filter Data Object</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FilterDataGetForMyRecent",
	   args,
	   onSuccess,
	   onFailure,
	   false)
	} else {
		proxy.invoke("FilterDataGetForMyRecent",
	   args,
	   callBackOverride,
	   onFailure,
	   false)
	}
}

MaduroSLL.Service.prototype.FilterDataGetForApproval = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get the Filter Widget Data, including Categories, for the Content For Approval
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>Filter Data Object</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FilterDataGetForApproval",
	   args,
	   onSuccess,
	   onFailure,
	   false)
	} else {
		proxy.invoke("FilterDataGetForApproval",
	   args,
	   callBackOverride,
	   onFailure,
	   false)
	}
}

MaduroSLL.Service.prototype.FilterDataGetForSubmissions = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get the Filter Widget Data, including Categories, for the current user's Submitted Content
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>Filter Data Object</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FilterDataGetForSubmissions",
	   args,
	   onSuccess,
	   onFailure,
	   false)
	} else {
		proxy.invoke("FilterDataGetForSubmissions",
	   args,
	   callBackOverride,
	   onFailure,
	   false)
	}
}

MaduroSLL.Service.prototype.FilterDataGetForRequired = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get the Filter Widget Data, including Categories, for the current user's Required Content
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>Filter Data Object</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FilterDataGetForRequired",
	   args,
	   onSuccess,
	   onFailure,
	   false)
	} else {
		proxy.invoke("FilterDataGetForRequired",
	   args,
	   callBackOverride,
	   onFailure,
	   false)
	}
}

MaduroSLL.Service.prototype.FilterDataGetForPopular = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get the Filter Widget Data, including Categories, for the current Popular Content
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>Filter Data Object</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FilterDataGetForPopular",
	   args,
	   onSuccess,
	   onFailure,
	   false)
	} else {
		proxy.invoke("FilterDataGetForPopular",
	   args,
	   callBackOverride,
	   onFailure,
	   false)
	}
}

MaduroSLL.Service.prototype.FilterDataGetForRecommended = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get the Filter Widget Data, including Categories, for the current user's Recommended Content
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>Filter Data Object</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FilterDataGetForRecommended",
	   args,
	   onSuccess,
	   onFailure,
	   false)
	} else {
		proxy.invoke("FilterDataGetForRecommended",
	   args,
	   callBackOverride,
	   onFailure,
	   false)
	}
}

MaduroSLL.Service.prototype.FavoriteContentFilteredGet = function (vbSearchFilter, sessionID, callBackOverride) {
	/// <summary>
	/// Get the current user's Favorite Content, Filtered like a Content Search
	/// </summary>
	/// <param name="vbSearchFilter">The Search Filters to use</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>The list of Favorited content</returns>
	var args = {
		"vbSearchFilter": vbSearchFilter,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FavoriteContentFilteredGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("FavoriteContentFilteredGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.RecentContentFilteredGet = function (vbSearchFilter, sessionID, callBackOverride) {
	/// <summary>
	/// Get the Recently Viewed Content, Filtered like a Content Search
	/// </summary>
	/// <param name="vbSearchFilter">The Search Filters to use</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>The list of recent content</returns>
	var args = {
		"vbSearchFilter": vbSearchFilter,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RecentContentFilteredGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("RecentContentFilteredGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PopularContentFilteredGet = function (vbSearchFilter, sessionID, callBackOverride) {
	/// <summary>
	/// Get the current Popular Content, Filtered like a Content Search
	/// </summary>
	/// <param name="vbSearchFilter">The Search Filters to use</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>The list of popular content</returns>
	var args = {
		"vbSearchFilter": vbSearchFilter,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PopularContentFilteredGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PopularContentFilteredGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.RequiredContentFilteredGet = function (vbSearchFilter, sessionID, callBackOverride) {
	/// <summary>
	/// Get the current user's unwatched Required Content, Filtered like a Content Search
	/// </summary>
	/// <param name="vbSearchFilter">The Search Filters to use</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>List of current user's unwatched Required Content</returns>
	var args = {
		"vbSearchFilter": vbSearchFilter,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RequiredContentFilteredGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("RequiredContentFilteredGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.RecommendedContentFilteredGet = function (vbSearchFilter, sessionID, callBackOverride) {
	/// <summary>
	/// Get the current user's unwatched Recommended Content, Filtered like a Content Search
	/// </summary>
	/// <param name="vbSearchFilter">The Search Filters to use</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>The list of recommended content</returns>
	var args = {
		"vbSearchFilter": vbSearchFilter,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RecommendedContentFilteredGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("RecommendedContentFilteredGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.MySubmittedContentFilteredGet = function (vbSearchFilter, sessionID, callBackOverride) {
	var args = {
		"vbSearchFilter": vbSearchFilter,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("MySubmittedContentFilteredGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("MySubmittedContentFilteredGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.VideosForApprovalFilteredGet = function (vbSearchFilter, sessionID, callBackOverride) {
	var args = {
		"vbSearchFilter": vbSearchFilter,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("VideosForApprovalFilteredGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("VideosForApprovalFilteredGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentIsViewable = function (contentID, sessionID, callBackOverride) {
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentIsViewable",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentIsViewable",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationGetLastSlideAcitivty = function (presentationSessionLiveID, sessionID, callBackOverride) {
	/// <summary>
	/// Gets the last slide activity made by the admin in the webcast
	/// </summary>
	/// <param name="presentationSessionLiveID">PresentationSessionLiveID</param>
	/// <param name="sessionID">SessionID</param>
	/// <returns>MaduroDC.VBPresentationActivity</returns>

	var args = {
		"presentationSessionLiveID": presentationSessionLiveID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationGetLastSlideAcitivty",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationGetLastSlideAcitivty",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentIsAccessible = function (contentID, sessionID, callBackOverride) {
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentIsAccessible",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentIsAccessible",
					args,
					onSuccess,
					onFailure,
					false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentIsAccessible",
					args,
					callBackOverride,
					onFailure,
					false,
					true)
		} else {
			proxy.invoke("ContentIsAccessible",
					args,
					callBackOverride,
					onFailure,
					false)
		}
	}
}

MaduroSLL.Service.prototype.ChannelGuideServersGetAll = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBList containing a list of VBChannelGuideServer data contracts for ALL channel guide servers defined
	/// in the system.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBChannelGuideServer data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideServersGetAll",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideServersGetAll",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideServersGetAll",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideServersGetAll",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ChannelGuideServerGet = function (channelGuideServerID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a single VBChannelGuideServer data contract for the channel guide server defined
	/// in the system.
	/// </summary>
	/// <param name="channelGuideServerID" type="Number" integer="true">Channel Guide Server unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBChannelGuideServer">
	/// VBChannelGuideServer data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"channelGuideServerID": channelGuideServerID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ChannelGuideServerGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ChannelGuideServerGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ChannelGuideServerAdd = function (vbChannelGuideServer, sessionID, callBackOverride) {
	/// <summary>
	/// Adds the channel guide server to the system.
	/// </summary>
	/// <param name="vbChannelGuideServer" type="MaduroDC.VBChannelGuideServer">Data contract populated with channel guide server data to add.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBChannelGuideServer">
	/// VBChannelGuideServer data contract containing new ChannelGuideServerID.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbChannelGuideServer": vbChannelGuideServer,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ChannelGuideServerAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ChannelGuideServerAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ChannelGuideServerUpdate = function (vbChannelGuideServer, sessionID, callBackOverride) {
	/// <summary>
	/// Updates the channel guide server in the system.
	/// </summary>
	/// <param name="vbChannelGuideServer" type="MaduroDC.VBChannelGuideServer">Data contract populated with channel guide server data to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbChannelGuideServer": vbChannelGuideServer,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ChannelGuideServerUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ChannelGuideServerUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ChannelGuideServerDelete = function (channelGuideServerID, sessionID, callBackOverride) {
	/// <summary>
	/// Deletes the channel guide server from the system.
	/// </summary>
	/// <param name="channelGuideServerID" type="Number" integer="true">Channel Guide Server unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"channelGuideServerID": channelGuideServerID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ChannelGuideServerDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ChannelGuideServerDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ChannelGuideChannelsGetAllWithProgramData = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBList containing a list of VBChannelGuideChannel data contracts for ALL channel guide channels defined
	/// in the system along with program data. Does not include custom channels defined for a content (video).
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBChannelGuideChannel data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ChannelGuideChannelsGetAllWithProgramData",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ChannelGuideChannelsGetAllWithProgramData",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ChannelGuideChannelsGetAllWithoutProgramData = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBList containing a list of VBChannelGuideChannel data contracts for ALL channel guide channels defined
	/// in the system without program data. Does not include custom channels defined for a content (video).
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBChannelGuideChannel data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ChannelGuideChannelsGetAllWithoutProgramData",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ChannelGuideChannelsGetAllWithoutProgramData",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ChannelGuideChannelsGetByServerWithProgramData = function (channelGuideServerID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBList containing a list of VBChannelGuideChannel data contracts for the passed channel guide server defined
	/// in the system along with program data.
	/// </summary>
	/// <param name="channelGuideServerID" type="Number" integer="true">Channel Guide Server unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBChannelGuideChannel data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"channelGuideServerID": channelGuideServerID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ChannelGuideChannelsGetByServerWithProgramData",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ChannelGuideChannelsGetByServerWithProgramData",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ChannelGuideChannelsGetByServerWithoutProgramData = function (channelGuideServerID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBList containing a list of VBChannelGuideChannel data contracts for the passed channel guide server defined
	/// in the system without program data.
	/// </summary>
	/// <param name="channelGuideServerID" type="Number" integer="true">Channel Guide Server unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBChannelGuideChannel data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"channelGuideServerID": channelGuideServerID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideChannelsGetByServerWithoutProgramData",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideChannelsGetByServerWithoutProgramData",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideChannelsGetByServerWithoutProgramData",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideChannelsGetByServerWithoutProgramData",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ChannelGuideChannelGetWithProgramData = function (channelGuideChannelID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a single VBChannelGuideChannel data contract for passed channel guide channel defined
	/// in the system along with program data. Does not include custom channels defined for a content (video).
	/// </summary>
	/// <param name="channelGuideChannelID" type="Number" integer="true">Channel Guide Channel unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBChannelGuideChannel">
	/// VBChannelGuideChannel data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"channelGuideChannelID": channelGuideChannelID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ChannelGuideChannelGetWithProgramData",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ChannelGuideChannelGetWithProgramData",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ChannelGuideChannelGetWithoutProgramData = function (channelGuideChannelID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a single VBChannelGuideChannel data contract for passed channel guide channel defined
	/// in the system without program data. Does not include custom channels defined for a content (video).
	/// </summary>
	/// <param name="channelGuideChannelID" type="Number" integer="true">Channel Guide Channel unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBChannelGuideChannel">
	/// VBChannelGuideChannel data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"channelGuideChannelID": channelGuideChannelID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideChannelGetWithoutProgramData",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideChannelGetWithoutProgramData",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideChannelGetWithoutProgramData",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideChannelGetWithoutProgramData",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ChannelGuideCustomChannelAdd = function (vbChannelGuideChannel, sessionID, callBackOverride) {
	/// <summary>
	/// Adds the channel guide custom channel to the system.
	/// </summary>
	/// <param name="vbChannelGuideChannel" type="MaduroDC.VBChannelGuideChannel">Data contract populated with channel guide custom channel data to add.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBChannelGuideChannel">
	/// VBChannelGuideChannel data contract containing new ChannelGuideChannelID.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbChannelGuideChannel": vbChannelGuideChannel,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideCustomChannelAdd",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideCustomChannelAdd",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideCustomChannelAdd",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideCustomChannelAdd",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}


MaduroSLL.Service.prototype.ChannelGuideCustomChannelUpdate = function (vbChannelGuideChannel, sessionID, callBackOverride) {
	/// <summary>
	/// Updates the channel guide custom channel in the system.
	/// </summary>
	/// <param name="vbChannelGuideChannel" type="MaduroDC.VBChannelGuideChannel">Data contract populated with channel guide custom channel data to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbChannelGuideChannel": vbChannelGuideChannel,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideCustomChannelUpdate",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {

			proxy.invoke("ChannelGuideCustomChannelUpdate",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideCustomChannelUpdate",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideCustomChannelUpdate",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ChannelGuideCustomChannelDelete = function (channelGuideChannelID, sessionID, callBackOverride) {
	/// <summary>
	/// Deletes the channel guide custom channel from the system.
	/// </summary>
	/// <param name="channelGuideChannelID" type="Number" integer="true">Channel Guide Custom Channel unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"channelGuideChannelID": channelGuideChannelID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideCustomChannelDelete",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideCustomChannelDelete",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideCustomChannelDelete",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideCustomChannelDelete",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ChannelGuideProgramsGetAll = function (channelGuideChannelID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBList containing a list of VBChannelGuideProgram data contracts for all programs for a channel guide channel in the system.
	/// </summary>
	/// <param name="channelGuideChannelID" type="Number" integer="true">Channel Guide Channel unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBChannelGuideProgram data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"channelGuideChannelID": channelGuideChannelID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideProgramsGetAll",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideProgramsGetAll",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideProgramsGetAll",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideProgramsGetAll",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ChannelGuideProgramsGetAllAndLoad = function (channelGuideChannelID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBList containing a list of VBChannelGuideProgram data contracts for all programs for a channel guide channel in the system.
	/// If the channel is based on a channel guide server, the programs will be obtained from the channel guide server if no program data found in database.
	/// </summary>
	/// <param name="channelGuideChannelID" type="Number" integer="true">Channel Guide Channel unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBChannelGuideProgram data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"channelGuideChannelID": channelGuideChannelID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideProgramsGetAllAndLoad",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideProgramsGetAllAndLoad",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideProgramsGetAllAndLoad",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideProgramsGetAllAndLoad",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ChannelGuideCustomProgramsGetAll = function (channelGuideChannelID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBList containing a list of VBChannelGuideCustomProgram data contracts for all custom programs for a channel guide channel in the system.
	/// </summary>
	/// <param name="channelGuideChannelID" type="Number" integer="true">Channel Guide Channel unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBChannelGuideCustomProgram data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"channelGuideChannelID": channelGuideChannelID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideCustomProgramsGetAll",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideCustomProgramsGetAll",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideCustomProgramsGetAll",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideCustomProgramsGetAll",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ChannelGuideCustomProgramGet = function (channelGuideCustomProgramID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a single VBChannelGuideCustomProgram data contract for channel guide custom program in the system.
	/// </summary>
	/// <param name="channelGuideCustomProgramID" type="Number" integer="true">Channel Guide Custom Program unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBChannelGuideCustomProgram">
	/// VBChannelGuideCustomProgram data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"channelGuideCustomProgramID": channelGuideCustomProgramID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideCustomProgramGet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideCustomProgramGet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideCustomProgramGet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideCustomProgramGet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ChannelGuideCustomProgramAdd = function (vbChannelGuideCustomProgram, sessionID, callBackOverride) {
	/// <summary>
	/// Adds the channel guide custom program to the system.
	/// </summary>
	/// <param name="vbChannelGuideCustomProgram" type="MaduroDC.VBChannelGuideCustomProgram">Data contract populated with channel guide custom program data to add.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBChannelGuideCustomProgram">
	/// VBChannelGuideCustomProgram data contract containing new ChannelGuideCustomProgramID.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbChannelGuideCustomProgram": vbChannelGuideCustomProgram,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideCustomProgramAdd",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideCustomProgramAdd",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideCustomProgramAdd",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideCustomProgramAdd",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ChannelGuideCustomProgramUpdate = function (vbChannelGuideCustomProgram, sessionID, callBackOverride) {
	/// <summary>
	/// Updates the channel guide custom program in the system.
	/// </summary>
	/// <param name="vbChannelGuideCustomProgram" type="MaduroDC.VBChannelGuideCustomProgram">Data contract populated with channel guide custom program data to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbChannelGuideCustomProgram": vbChannelGuideCustomProgram,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideCustomProgramUpdate",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideCustomProgramUpdate",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideCustomProgramUpdate",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideCustomProgramUpdate",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ChannelGuideCustomProgramDelete = function (channelGuideCustomProgramID, sessionID, callBackOverride) {
	/// <summary>
	/// Deletes the channel guide custom program from the system.
	/// </summary>
	/// <param name="channelGuideCustomProgramID" type="Number" integer="true">Channel Guide Custom Program unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"channelGuideCustomProgramID": channelGuideCustomProgramID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideCustomProgramDelete",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideCustomProgramDelete",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideCustomProgramDelete",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideCustomProgramDelete",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ChannelGuideChannelContentAssignment = function (vbContent, sessionID, callBackOverride) {
	/// <summary>
	/// Updates the channel guide related fields (IsIncludedInChannelGuide, ChannelNumber, ChannelGuideChannelID) for the passed content.
	/// </summary>
	/// <param name="vbContent" type="MaduroDC.VBContent">Data contract populated with channel guide data (IsIncludedInChannelGuide, ChannelNumber, ChannelGuideChannelID) to update for ContentID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbContent": vbContent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideChannelContentAssignment",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideChannelContentAssignment",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideChannelContentAssignment",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ChannelGuideChannelContentAssignment",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentChannelGuideInfoGet = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBContent data contract with channel guide channel information for the content.
	/// </summary>
	/// <param name="contentID" type="Number" integer="true">contentID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBContent">
	/// VBContent data contract with channel guide channel information.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentChannelGuideInfoGet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentChannelGuideInfoGet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentChannelGuideInfoGet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentChannelGuideInfoGet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ChannelGuideChannelContentRecordableInfoGet = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Determine the recordable information for the channel guide content based on whether the stream can be recorded.  This does not check user permission; only if stream can be recorded.
	/// </summary>
	/// <param name="contentID" type="Number" integer="true">Content ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBChannelGuideContentAdminPermission">
	/// VBChannelGuideContentRecordableInfo data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ChannelGuideChannelContentRecordableInfoGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ChannelGuideChannelContentRecordableInfoGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ChannelGuideSearch = function (vbChannelGuideListSearchFilter, sessionID, callBackOverride) {
	/// <summary>
	/// Returns all channels to be inclued in the Channel Guide list based on passed search criteria.
	/// </summary>
	/// <param name="vbChannelGuideListSearchFilter" type="MaduroDC.VBChannelGuideListSearchFilter">VBChannelGuideListSearchFilter data contract containing search criteria.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBChannelGuideChannelList">
	/// VBChannelGuideChannelList data contract containing VBList of VBChannelGuideChannelForList.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbChannelGuideListSearchFilter": vbChannelGuideListSearchFilter,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ChannelGuideSearch",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ChannelGuideSearch",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ChannelGuideListConfigGet = function (currentDateMonthLocalTime, currentDateDayLocalTime, currentDateYearLocalTime, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBChannelGuideListConfigData data contract containing the configuration data needed for the Channel Guide list.
	/// </summary>
	/// <param name="currentDateMonthLocalTime" type="Number" integer="true">The current date month number in local time.</param>
	/// <param name="currentDateDayLocalTime" type="Number" integer="true">The current date day number in local time.</param>
	/// <param name="currentDateYearLocalTime" type="Number" integer="true">The current date year number in local time.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBChannelGuideListConfigData">
	/// VBChannelGuideListConfigData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"currentDateMonthLocalTime": currentDateMonthLocalTime,
		"currentDateDayLocalTime": currentDateDayLocalTime,
		"currentDateYearLocalTime": currentDateYearLocalTime,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ChannelGuideListConfigGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ChannelGuideListConfigGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.ChannelGuideChannelScheduleEventRecordWithOutOptionsCreate = function (vbChannelGuideChannelForList, sessionID, callBackOverride) {
	/// <summary>
	/// Create a scheduled "record" event for the passed channel guide channel program.  This is the schedule record with out options which will
	/// automatically create a scheduled record event for the user. Will return an updated VBChannelGuideChannelForList with latest information.
	/// </summary>
	/// <param name="vbChannelGuideChannelForList" type="MaduroDC.VBChannelGuideChannelForList">VBChannelGuideChannelForList data contract containing information on the channel and program to be scheduled with a record.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBChannelGuideChannelForList">
	/// VBChannelGuideChannelForList data contract containing updated information on the channel and program to be scheduled with a record.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbChannelGuideChannelForList": vbChannelGuideChannelForList,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ChannelGuideChannelScheduleEventRecordWithOutOptionsCreate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ChannelGuideChannelScheduleEventRecordWithOutOptionsCreate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ChannelGuideChannelScheduleEventRecordWithOptionsCreate = function (vbChannelGuideChannelForList, sessionID, callBackOverride) {
	/// <summary>
	/// Create a scheduled "record" event for the passed channel guide channel program.  This is the schedule record with options which will
	/// not automatically create a scheduled record event for the user.  The VBScheduledEvent data contract will be returned which can then be used
	/// to display default event information in schedule UI for new scheduled record event.
	/// </summary>
	/// <param name="vbChannelGuideChannelForList" type="MaduroDC.VBChannelGuideChannelForList">VBChannelGuideChannelForList data contract containing information on the channel and program to be scheduled with a record.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBScheduledEvent">
	/// VBScheduledEvent data contract containing default information needed by schedule UI for displaying information on the new scheduled record event based on information from channel guide program.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbChannelGuideChannelForList": vbChannelGuideChannelForList,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ChannelGuideChannelScheduleEventRecordWithOptionsCreate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ChannelGuideChannelScheduleEventRecordWithOptionsCreate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ChannelGuideChannelScheduleEventRecordWithOutOptionsDelete = function (vbChannelGuideChannelForList, sessionID, callBackOverride) {
	/// <summary>
	/// Delete the scheduled "record" event for the passed channel guide channel program.  This is the schedule record with out options.
	/// Will return an updated VBChannelGuideChannelForList with latest information.
	/// </summary>
	/// <param name="vbChannelGuideChannelForList" type="MaduroDC.VBChannelGuideChannelForList">VBChannelGuideChannelForList data contract containing information on the channel and program with a scheduled record that should be deleted.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBChannelGuideChannelForList">
	/// VBChannelGuideChannelForList data contract containing updated information on the channel and program with a scheduled record that was deleted.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbChannelGuideChannelForList": vbChannelGuideChannelForList,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ChannelGuideChannelScheduleEventRecordWithOutOptionsDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ChannelGuideChannelScheduleEventRecordWithOutOptionsDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ChannelGuideChannelScheduleEventRecordWithOptionsDelete = function (vbChannelGuideChannelForList, sessionID, callBackOverride) {
	/// <summary>
	/// Delete the scheduled "record" event for the passed channel guide channel program.  This is the schedule record with options.
	/// Will return an updated VBChannelGuideChannelForList with latest information.
	/// </summary>
	/// <param name="vbChannelGuideChannelForList" type="MaduroDC.VBChannelGuideChannelForList">VBChannelGuideChannelForList data contract containing information on the channel and program with a scheduled record that should be deleted.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBChannelGuideChannelForList">
	/// VBChannelGuideChannelForList data contract containing updated information on the channel and program with a scheduled record that was deleted.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbChannelGuideChannelForList": vbChannelGuideChannelForList,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ChannelGuideChannelScheduleEventRecordWithOptionsDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ChannelGuideChannelScheduleEventRecordWithOptionsDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ChannelGuideContentAdminDetermineReadEditPermissionForUserGet = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Determine if the user has read/edit permission to administrater the channel guide data associated with a content record.
	/// </summary>
	/// <param name="contentID" type="Number" integer="true">Content ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBChannelGuideContentAdminPermission">
	/// VBChannelGuideContentAdminPermission data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideContentAdminDetermineReadEditPermissionForUserGet",
			args,
			onSuccess,
			onFailure,
			false,
			true)
		} else {
			proxy.invoke("ChannelGuideContentAdminDetermineReadEditPermissionForUserGet",
			args,
			onSuccess,
			onFailure,
			false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedChannelGuideContentAdminDetermineReadEditPermissionForUserGet",
			args,
			callBackOverride,
			onFailure,
			false,
			true)
		} else {
			proxy.invoke("ChannelGuideContentAdminDetermineReadEditPermissionForUserGet",
			args,
			callBackOverride,
			onFailure,
			false)
		}
	}
}
MaduroSLL.Service.prototype.ScheduleEventDecoderDeviceSTBsGet = function (encodingTypes, filterString, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a collection of VBScheduledEventDeviceSTBInfo data contracts for STB Decoder devices with optional filter.
	/// </summary>
	/// <param name="encodingTypes" type="List">Return only stbs that have the passed encoding type.</param>
	/// <param name="filterString" type="String">Return only stbs that have the passed filter text in either the DeviceSTB.HostName, DeviceSTB.IPAddress, DeviceModel.PartNumber, or DeviceModel.Description.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBScheduledEventDeviceSTBInfo data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"encodingTypes": encodingTypes,
		"filterString": filterString,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ScheduleEventDecoderDeviceSTBsGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ScheduleEventDecoderDeviceSTBsGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.StoredServerAutoGenPublishingPointAdd = function (parentPubPointTypeID, storedServerID, vbStoredServerPublishingPoints, sessionID, callBackOverride) {
	/// <summary>
	/// Adds composite publishing point to the database (i.e. DME which is comprised of a Flash Pub Point, a Darwin Pub Point and a Prog Download Pub Point)
	/// </summary>
	/// <param name="parentPubPointTypeID" type="Number">parentPubPointTypeID</param>
	/// <param name="storedServerID" type="Number">storedServerID</param>
	/// <param name="vbStoredServerPublishingPoints" type="MaduroDC.VBList">VBStoredServerPublishingPoints</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// </returns>
	var args = {
		"parentPubPointTypeID": parentPubPointTypeID,
		"storedServerID": storedServerID,
		"vbStoredServerPublishingPoints": vbStoredServerPublishingPoints,
		"sessionID": sessionID


	};
	if (!callBackOverride) {
		proxy.invoke("StoredServerAutoGenPublishingPointAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StoredServerAutoGenPublishingPointAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.StoredServerAutoGenPublishingPointUpdate = function (vbStoredServerPublishingPoints, sessionID, callBackOverride) {
	/// <summary>
	/// Updates composite publishing point to the database (i.e. DME which is comprised of a Flash Pub Point, a Darwin Pub Point and a Prog Download Pub Point)
	/// </summary>
	/// <param name="vbStoredServerPublishingPoints" type="MaduroDC.VBList">VBStoredServerPublishingPoints</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// </returns>
	var args = {
		"vbStoredServerPublishingPoints": vbStoredServerPublishingPoints,
		"sessionID": sessionID


	};
	if (!callBackOverride) {
		proxy.invoke("StoredServerAutoGenPublishingPointUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StoredServerAutoGenPublishingPointUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.StoredServerAutoGenPublishingPointGetByParent = function (parentPubPointID, sessionID, callBackOverride) {
	/// <summary>
	/// Gets composite publishing point from the DB using the parent pub point id (i.e DME)
	/// </summary>
	/// <param name="parentPubPointID" type="Number">parentPubPointID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// </returns>
	var args = {
		"parentPubPointID": parentPubPointID,
		"sessionID": sessionID


	};
	if (!callBackOverride) {
		proxy.invoke("StoredServerAutoGenPublishingPointGetByParent",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("StoredServerAutoGenPublishingPointGetByParent",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.GetIngestableExtensions = function (categoryList, sessionID, callBackOverride) {
	/// <summary>
	/// Get ingestable file extensions based on the stored servers that are online
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBStringData">
	/// VBStringData data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
	    "sessionID": sessionID,
	    "categoryList": categoryList
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedGetIngestableExtensions",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("GetIngestableExtensions",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedGetIngestableExtensions",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("GetIngestableExtensions",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}


MaduroSLL.Service.prototype.PresentationPublishUploadedFile = function (presentationID, targetContentID, fileName, sessionID, callBackOverride) {
	/// <summary>
	/// Publish the uploaded video files
	/// </summary>
	/// <param name="presentationID" type="int">Presentation ID</param>
	/// <param name="targetContentID" type="int">Target content ID</param>
	/// <param name="fileName" type="string">The name (not the full name) of the uploaded file.</param>
	/// <param name="sessionID" type="string">Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// MaduroDC.VBVoidData
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"presentationID": presentationID,
		"targetContentID": targetContentID,
		"fileName": fileName,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationPublishUploadedFile",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationPublishUploadedFile",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationPublishSilverLightRMS = function (presentationID, targetContentID, subFolderName, sessionID, callBackOverride) {
	/// <summary>
	/// Publish the uploaded RMS SilverLight presentation
	/// </summary>
	/// <param name="presentationID" type="int">Presentation ID</param>
	/// <param name="targetContentID" type="int">Target content ID</param>
	/// <param name="subFolderName" type="string">The name (not the full name) of the subfolder that contains the RMS SilverLight files.</param>
	/// <param name="sessionID" type="string">Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// MaduroDC.VBVoidData
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"presentationID": presentationID,
		"targetContentID": targetContentID,
		"subFolderName": subFolderName,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationPublishSilverLightRMS",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationPublishSilverLightRMS",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.UploadedFileDelete = function (ftpDir, uploadedFileName, sessionID, callBackOverride) {
	/// <summary>
	/// Delete a uploaded file.
	/// </summary>
	/// <param name="ftpDir">The FTP directory to where the file is uploaded</param>
	/// <param name="uploadedFileName">The uploaded file name</param>
	/// <param name="sessionID">SessionID</param>
	/// <returns>VBBoolData data contract.  True if the file is deleted or does not exist.
	/// False if the file cannot be deleted for some reason.  Check the exception for possible cause.</returns>
	var args = {
		"ftpDir": ftpDir,
		"uploadedFileName": uploadedFileName,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("UploadedFileDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("UploadedFileDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.UploadedFolderDelete = function (ftpDir, uploadedFolderName, sessionID, callBackOverride) {
	/// <summary>
	/// Delete a uploaded folder and its subfolders and files.
	/// </summary>
	/// <param name="ftpDir">The FTP directory to where the file is uploaded</param>
	/// <param name="uploadedFolderName">The uploaded folder name</param>
	/// <param name="sessionID">SessionID</param>
	/// <returns>VBBoolData data contract.  True if the folder is deleted or does not exist.
	/// False if the folder cannot be deleted for some reason.  Check the exception for possible cause.</returns>
	var args = {
		"ftpDir": ftpDir,
		"uploadedFolderName": uploadedFolderName,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("UploadedFolderDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("UploadedFolderDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.CheckForApprovalBatchEmail = function (sessionID, callBackOverride) {
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CheckForApprovalBatchEmail",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CheckForApprovalBatchEmail",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentResubmitForApproval = function (contentID, sessionID, callBackOverride) {
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentResubmitForApproval",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentResubmitForApproval",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentFlagAsInappropriate = function (contentID, rejectionReason, sessionID, callBackOverride) {
	var args = {
		"contentID": contentID,
		"rejectionReason": rejectionReason,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentFlagAsInappropriate",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentFlagAsInappropriate",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentFlagAsInappropriate",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentFlagAsInappropriate",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.GetContentApprovalStatus = function (contentID, sessionID, callBackOverride) {
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedGetContentApprovalStatus",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("GetContentApprovalStatus",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedGetContentApprovalStatus",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("GetContentApprovalStatus",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.SetContentApprovalStatus = function (contentID, enumApprovalActionID, rejectionReason, sessionID, callBackOverride) {
	var args = {
		"contentID": contentID,
		"enumApprovalActionID": enumApprovalActionID,
		"rejectionReason": rejectionReason,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("SetContentApprovalStatus",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("SetContentApprovalStatus",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationPublishOptionsGet = function (presentationSessionLiveID, sessionID, callBackOverride) {
	/// <summary>
	/// Get presentation publish options
	/// </summary>
	/// <param name="presentationSessionLiveID" type="int">Presentation session live ID</param>
	/// <param name="sessionID" type="string">Session ID</param>
	/// <returns type="MaduroDC.VBPresentationPublishOptions">
	/// MaduroDC.VBPresentationPublishOptions
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"presentationSessionLiveID": presentationSessionLiveID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationPublishOptionsGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationPublishOptionsGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DateTimeDatepickerConfigDataGet = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBDateTimeDatepickerConfigData data contract that contains configuration data needed for datepicker plugin.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBDateTimeDatepickerConfigData">
	/// VBDateTimeDatepickerConfigData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedDateTimeDatepickerConfigDataGet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("DateTimeDatepickerConfigDataGet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedDateTimeDatepickerConfigDataGet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("DateTimeDatepickerConfigDataGet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}


MaduroSLL.Service.prototype.DeviceGetDeviceModelsForPresentationDevices = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns all the device models for Presentation devices.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBDeviceModel data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetDeviceModelsForPresentationDevices",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetDeviceModelsForPresentationDevices",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceGetAllPresentations = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns all the Presentation devices in the system.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBDeviceVBrick data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetAllPresentations",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetAllPresentations",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DevicePresentationAdd = function (vbDevicePresentation, sessionID, callBackOverride) {
	/// <summary>
	/// Adds the Presentation device to the system.
	/// </summary>
	/// <param name="vbDevicePresentation" type="MaduroDC.VBDevicePresentation">Data contract populated with Presentation device data to add.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBIntData">
	/// VBIntData data contract containing new DeviceID.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDevicePresentation": vbDevicePresentation,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DevicePresentationAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DevicePresentationAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DevicePresentationUpdate = function (vbDevicePresentation, sessionID, callBackOverride) {
	/// <summary>
	/// Updates the Presentation device in the system.
	/// </summary>
	/// <param name="vbDevicePresentation" type="MaduroDC.VBDevicePresentation">Data contract populated with Presentation device data to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDevicePresentation": vbDevicePresentation,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DevicePresentationUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DevicePresentationUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DevicePresentationDelete = function (vbDevicePresentation, sessionID, callBackOverride) {
	/// <summary>
	/// Deletes the Presentation device from the system.
	/// </summary>
	/// <param name="vbDevicePresentation" type="MaduroDC.VBDevicePresentation">Data contract populated with Presentation device data to delete.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDevicePresentation": vbDevicePresentation,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DevicePresentationDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DevicePresentationDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceGetDevicePresentationSlotsByDevice = function (deviceID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a collection of VBDevicePresentationSlot (Presentation Slot) data contracts for a Presentation device.
	/// </summary>
	/// <param name="deviceID" type="Number" integer="true">Presentation device's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBDevicePresentationSlot data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"deviceID": deviceID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetDevicePresentationSlotsByDevice",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetDevicePresentationSlotsByDevice",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceGetDevicePresentationSlotViewingUrlsByDevice = function (deviceID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a collection of VBDevicePresentationSlotViewingUrl (Presentation Slot Viewing URL) data contracts for a Presentation device.
	/// </summary>
	/// <param name="deviceID" type="Number" integer="true">Presentation device's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBDevicePresentationSlotViewingUrl data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"deviceID": deviceID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetDevicePresentationSlotViewingUrlsByDevice",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetDevicePresentationSlotViewingUrlsByDevice",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DevicePresentationSlotAdd = function (vbDevicePresentationSlot, sessionID, callBackOverride) {
	/// <summary>
	/// Inserts a Presentation device slot in the system.
	/// </summary>
	/// <param name="vbDevicePresentationSlot" type="MaduroDC.VBDevicePresentationSlot">Data contract populated with Presentation device slot data to insert.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDevicePresentationSlot": vbDevicePresentationSlot,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DevicePresentationSlotAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DevicePresentationSlotAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DevicePresentationSlotDelete = function (vbDevicePresentationSlot, sessionID, callBackOverride) {
	/// <summary>
	/// Deletes a Presentation device slot and its associated model slot in the system.
	/// </summary>
	/// <param name="vbDevicePresentationSlot" type="MaduroDC.VBDevicePresentationSlot">Data contract populated with Presentation device slot data to delete.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDevicePresentationSlot": vbDevicePresentationSlot,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DevicePresentationSlotDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DevicePresentationSlotDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DevicePresentationSlotUpdate = function (vbDevicePresentationSlot, sessionID, callBackOverride) {
	/// <summary>
	/// Updates the Presentation device slot in the system.
	/// </summary>
	/// <param name="vbDevicePresentationSlot" type="MaduroDC.VBDevicePresentationSlot">Data contract populated with Presentation device slot data to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDevicePresentationSlot": vbDevicePresentationSlot,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DevicePresentationSlotUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DevicePresentationSlotUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DevicePresentationSlotViewingUrlUpdate = function (vbDevicePresentationSlotViewingUrl, sessionID, callBackOverride) {
	/// <summary>
	/// Updates the Presentation device slot viewing url in the system.
	/// </summary>
	/// <param name="vbDevicePresentationSlotViewingUrl" type="MaduroDC.VBDevicePresentationSlotViewingUrl">Data contract populated with Presentation device slot viewig url data to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDevicePresentationSlotViewingUrl": vbDevicePresentationSlotViewingUrl,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DevicePresentationSlotViewingUrlUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DevicePresentationSlotViewingUrlUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DevicePresentationSlotViewingUrlDelete = function (vbDevicePresentationSlotViewingUrl, sessionID, callBackOverride) {
	/// <summary>
	/// Deletes the Presentation device slot viewing url from the system.
	/// </summary>
	/// <param name="vbDevicePresentationSlotViewingUrl" type="MaduroDC.VBDevicePresentationSlotViewingUrl">Data contract populated with Presentation device slot viewig url data to delete.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDevicePresentationSlotViewingUrl": vbDevicePresentationSlotViewingUrl,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DevicePresentationSlotViewingUrlDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DevicePresentationSlotViewingUrlDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DevicePresentationSlotViewingUrlAdd = function (vbDevicePresentationSlotViewingUrl, sessionID, callBackOverride) {
	/// <summary>
	/// Adds the Presentation device slot viewing url to the system.
	/// </summary>
	/// <param name="vbDevicePresentationSlotViewingUrl" type="MaduroDC.VBDevicePresentationSlotViewingUrl">Data contract populated with Presentation device slot viewig url data to add.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBIntData">
	/// VBIntData data contract containing new DevicePresentationSlotViewingUrlID.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDevicePresentationSlotViewingUrl": vbDevicePresentationSlotViewingUrl,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DevicePresentationSlotViewingUrlAdd",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DevicePresentationSlotViewingUrlAdd",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.DeviceGetPresentation = function (deviceID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns all the Presentation devices in the system.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBDevicePresentation data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"deviceID": deviceID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceGetPresentation",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceGetPresentation",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationTitleGet = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Get presentation title
	/// </summary>
	/// <param name="contentID" type="int">Content ID</param>
	/// <param name="sessionID" type="string">Session ID</param>
	/// <returns type="MaduroDC.VBStringData">
	/// MaduroDC.VBStringData
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationTitleGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationTitleGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.PresentationLiveGetForAdmin = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Get live presentation info for admin widget
	/// </summary>
	/// <param name="contentID" type="int">Content ID</param>
	/// <param name="sessionID" type="string">Session ID</param>
	/// <returns type="MaduroDC.VBPresentationLiveForAdmin">
	/// MaduroDC.VBPresentationLiveForAdmin
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PresentationLiveGetForAdmin",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("PresentationLiveGetForAdmin",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentThumbnailGeneratePointInTime = function (contentID, pointInTimeSeconds, sessionID, callBackOverride) {
	/// <summary>
	/// Creates new thumbnail for a given url at a specific point in ttime
	/// </summary>
	/// <param name="contentID" type="Number">The content ID to generate the thumb for.</param>
	/// <param name="pointInTimeSeconds" type="Number">The point in time to grab the thumb.</param>
	/// <param name="sessionID" type="String">The unique session GUID.</param>
	/// <returns type="VBVoidData">VBVoidData</returns>
	var args = {
		"contentID": contentID,
		"pointInTimeSeconds": pointInTimeSeconds,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentThumbnailGeneratePointInTime",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentThumbnailGeneratePointInTime",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentThumbnailGeneratePointInTime",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentThumbnailGeneratePointInTime",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.CategoriesGetForMultiAssign = function (contentIDs, sessionID, callBackOverride) {
	/// <summary>
	/// Pass in a list of contentIDs, and this will return a list of the Categories that have Read and Add permissions (As in, the ones that will succeed for MultiAssignToCategories). Exceptions if the ContentIDs don’t all have Read and Edit permissions.
	/// </summary>
	/// <param name="contentIDs" type="List">The list of content IDs to generate the list of Categories.</param>
	/// <param name="sessionID" type="String">The unique session GUID.</param>
	/// <returns type="VBVoidData">VBVoidData</returns>
	var args = {
		"contentIDs": contentIDs,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CategoriesGetForMultiAssign",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CategoriesGetForMultiAssign",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentMultiAssignToCategories = function (contentIDs, categoryIDs, sessionID, callBackOverride) {
	/// <summary>
	/// Pass in a list of ContentIDs and CategoryIDs, and this will add the Content items to each of those Categories. Exceptions if the ContentIDs don’t all have Read and Edit permissions, or the Categories don’t all have Read and Add permissions.
	/// </summary>
	/// <param name="contentIDs" type="List">The list of content IDs to be assigned.</param>
	/// <param name="categoryIDs" type="List">The list of category IDs to assign the content to.</param>
	/// <param name="sessionID" type="String">The unique session GUID.</param>
	/// <returns type="VBVoidData">VBVoidData</returns>
	var args = {
		"contentIDs": contentIDs,
		"categoryIDs": categoryIDs,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentMultiAssignToCategories",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentMultiAssignToCategories",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.CategoriesGetForMultiRemove = function (contentIDs, sessionID, callBackOverride) {
	/// <summary>
	/// Pass in a list of contentIDs, and this will return a list of the Categories that have Delete permissions (As in, the ones that will succeed for MultiAssignToCategories). Exceptions if the ContentIDs don’t all have Read and Edit permissions.
	/// </summary>
	/// <param name="contentIDs" type="List">The list of content IDs to generate the list of Categories.</param>
	/// <param name="sessionID" type="String">The unique session GUID.</param>
	/// <returns type="VBVoidData">VBVoidData</returns>
	var args = {
		"contentIDs": contentIDs,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CategoriesGetForMultiRemove",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CategoriesGetForMultiRemove",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentMultiRemoveFromCategories = function (contentIDs, categoryIDs, sessionID, callBackOverride) {
	/// <summary>
	/// Pass in a list of ContentIDs and CategoryIDs, and this will remove the Content items from each of those Categories.
	/// </summary>
	/// <param name="contentIDs" type="List">The list of content IDs to be assigned.</param>
	/// <param name="categoryIDs" type="List">The list of category IDs to remove the content from.</param>
	/// <param name="sessionID" type="String">The unique session GUID.</param>
	/// <returns type="VBVoidData">VBVoidData</returns>
	var args = {
		"contentIDs": contentIDs,
		"categoryIDs": categoryIDs,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentMultiRemoveFromCategories",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentMultiRemoveFromCategories",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.CreateClip = function (vbClip, sessionID, callBackOverride) {
	/// <summary> Creates a new Clip </summary>
	/// <param name="vbClip" type="MaduroDC.VBClip">Clip data contract of clip to add.</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBIntData">MaduroDC.VBIntData</returns>

	var args = {
		"vbClip": vbClip,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CreateClip",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("CreateClip",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ClipUpdate = function (vbClip, sessionID, callBackOverride) {
	/// <summary> Updates Clip </summary>
	/// <param name="vbClip" type="MaduroDC.VBClip">Clip data contract of clip to add.</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"vbClip": vbClip,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ClipUpdate",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ClipUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ClipGet = function (ClipID, sessionID, callBackOverride) {
	/// <summary> Gets as Clip </summary>
	/// <param name="ClipID" type="MaduroDC.VBIntData">ClipID id to get</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBClip">MaduroDC.VBClip</returns>

	var args = {
		"ClipID": ClipID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ClipGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ClipGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ClipDelete = function (ClipID, sessionID, callBackOverride) {
	/// <summary> Deletes as Clip </summary>
	/// <param name="ClipID" type="MaduroDC.VBIntData">ClipID id to get</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"ClipID": ClipID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ClipDelete",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ClipDelete",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.ClipGetByContentID = function (ContentID, sessionID, callBackOverride) {
	/// <summary> Gets as Clip </summary>
	/// <param name="ContentID" type="MaduroDC.VBIntData">ContentID id to get</param>
	/// <param name="sessionID" type="String">Session ID</param>
	/// <returns type="MaduroDC.VBClip">MaduroDC.VBClip</returns>

	var args = {
		"ContentID": ContentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedClipGetByContentID",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ClipGetByContentID",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedClipGetByContentID",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ClipGetByContentID",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ClipsContentRelatedContentGet = function (contentID, sessionID, callBackOverride) {
	/// <summary>
	/// Gets a list of the related clip content for a content piece:
	/// 1. If the user has published his own list of related content for this item in the database, use those and exit.
	/// 2. If the user has not published his own list and AutogenRelatedContent is true, auto-generate a list of related content
	///		(Currently based on the first 10 items that are in at least one of the same Categories)
	///	3. Otherwise, return an empty list: there is no related content.
	/// </summary>
	/// <param name="contentID">ID of the Content to get the related Clip Content for</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>A list of the related Content items</returns>
	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedClipsContentRelatedContentGet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ClipsContentRelatedContentGet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedClipsContentRelatedContentGet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ClipsContentRelatedContentGet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.MyClipsFilteredGet = function (vbSearchFilter, sessionID, callBackOverride) {
	/// <summary>
	/// Get the clips, Filtered like a Content Search
	/// </summary>
	/// <param name="vbSearchFilter">The Search Filters to use</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>The list of Cilps content</returns>
	var args = {
		"vbSearchFilter": vbSearchFilter,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("MyClipsFilteredGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("MyClipsFilteredGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.MyFilterDataGetForClips = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get the Filter Widget Data, including Categories, for the current user's Recommended Content
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBFilterData">MaduroDC.VBFilterData</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("MyFilterDataGetForClips",
	   args,
	   onSuccess,
	   onFailure,
	   false)
	} else {
		proxy.invoke("MyFilterDataGetForClips",
	   args,
	   callBackOverride,
	   onFailure,
	   false)
	}
}

MaduroSLL.Service.prototype.GetClipsForOriginContentID = function (OriginContentID, sessionID, callBackOverride) {
	/// <summary>
	/// Return a list of clips that the user has viewing permission on for the passed in origin content id.
	/// Note that is is expected that the zone logic and all other permissions have been already checked.
	/// i.e. If a user is viewing a clip for this origin content, that underlying content has already been
	/// passed checks via searchcontent.  The intended use here is to get an "additional list" of all of the clips
	/// for the underlying content that pass the "read" permission level.
	/// </summary>
	/// <param name="OriginContentID"></param>
	/// <param name="sessionID"></param>
	/// <returns></returns>

	var args = {
		"OriginContentID": OriginContentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("GetClipsForOriginContentID",
	   args,
	   onSuccess,
	   onFailure,
	   false)
	} else {
		proxy.invoke("GetClipsForOriginContentID",
	   args,
	   callBackOverride,
	   onFailure,
	   false)
	}
}

MaduroSLL.Service.prototype.GetMyClipsForOriginContentID = function (OriginContentID, sessionID, callBackOverride) {
	/// <summary>
	/// Same as GetClipsForOriginContentID except only get clips that the logged in user has created.
	/// </summary>
	/// <param name="OriginContentID"></param>
	/// <param name="sessionID"></param>
	/// <returns></returns>

	var args = {
		"OriginContentID": OriginContentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("GetMyClipsForOriginContentID",
	   args,
	   onSuccess,
	   onFailure,
	   false)
	} else {
		proxy.invoke("GetMyClipsForOriginContentID",
	   args,
	   callBackOverride,
	   onFailure,
	   false)
	}
}

MaduroSLL.Service.prototype.ContentGetExpirationDate = function (contentID, sessionID, callBackOverride) {
	/// <summary> Returns the Expiration Date for the content. </summary>
	/// <param name="contentID">ID of the Content to get its expiration date</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBDateTimeWrapper containing the expiration DateTime object</returns>

	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentGetExpirationDate",
			args,
			onSuccess,
			onFailure,
			false,
			true)
		} else {
			proxy.invoke("ContentGetExpirationDate",
			args,
			onSuccess,
			onFailure,
			false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentGetExpirationDate",
			args,
			callBackOverride,
			onFailure,
			false,
			true)
		} else {
			proxy.invoke("ContentGetExpirationDate",
			args,
			callBackOverride,
			onFailure,
			false)
		}
	}
}

MaduroSLL.Service.prototype.ContentExpirationDateSet = function (contentID, expirationDate, sessionID, callBackOverride) {
	/// <summary> Sets the Expiration Date for the Content. </summary>
	/// <param name="contentID">ID of the Content to set its expiration date</param>
	/// <param name="expirationDate">expiration date of the Content as a VBDateTimeWrapper object.
	/// To clear the expiration date, set the year, month, and day in this argument to zero.</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>

	var args = {
		"contentID": contentID,
		"expirationDate": expirationDate,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentExpirationDateSet",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("ContentExpirationDateSet",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.ContentViewingRestrictionsGet = function (contentID, sessionID, callBackOverride) {
	/// <summary> Returns the Viewing Restrictions for the content as a VBContentViewingRestrictions object. </summary>
	/// <param name="contentID">ID of the Content to get its Viewing Restrictions</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBContentViewingRestrictions object for the content</returns>

	var args = {
		"contentID": contentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentViewingRestrictionsGet",
			args,
			onSuccess,
			onFailure,
			false,
			true)
		} else {
			proxy.invoke("ContentViewingRestrictionsGet",
			args,
			onSuccess,
			onFailure,
			false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentViewingRestrictionsGet",
			args,
			callBackOverride,
			onFailure,
			false,
			true)
		} else {
			proxy.invoke("ContentViewingRestrictionsGet",
			args,
			callBackOverride,
			onFailure,
			false)
		}
	}
}

MaduroSLL.Service.prototype.ContentViewingRestrictionsSet = function (viewRestricts, sessionID, callBackOverride) {
	/// <summary> Sets the Viewing Restrictions for the Content. </summary>
	/// <param name="viewRestricts">Viewing Restrictions of the Content as a VBContentViewingRestrictions object.
	/// To clear the expiration date, set the year, month, and day in this argument to zero.</param>
	/// To set the max concurrent viewers to Unlimited, set it in this argument to null.</param>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>MaduroDC.VBVoidData</returns>

	var args = {
		"viewRestricts": viewRestricts,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentViewingRestrictionsSet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentViewingRestrictionsSet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentViewingRestrictionsSet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentViewingRestrictionsSet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}


MaduroSLL.Service.prototype.PlayerPreferencesGet = function (forPC, sessionID, callBackOverride) {
	/// <summary>
	///Returns player preferences as defined by administrator
	/// </summary>
	/// <param name="forPC" type="String">Boolean indicating whether this request is for PC players or not</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"forPC": forPC,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PlayerPreferencesGet",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("PlayerPreferencesGet",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}


MaduroSLL.Service.prototype.PlayerPreferencesUpdate = function (forPC, playerPreferences, sessionID, callBackOverride) {
	/// <summary>
		///Updates player preferences as defined by administrator
		/// </summary>
		/// <param name="playerPreferences" type="MaduroDC.VBList">ldapServers</param>
		/// <param name="forPC" type="Boolean">forPC</param>
		/// <param name="sessionID" type="String">sessionID</param>
		/// <returns type="MaduroDC.VBList"></returns>
	var args = {
		"forPC": forPC,
		"playerPreferences":playerPreferences,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PlayerPreferencesUpdate",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("PlayerPreferencesUpdate",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.EnumEncodingTypesUserAllowedGet = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBList of all VBEnum data contracts for all Enums for the "EncodingType" EnumType not marked as private and that the user is allowed to use and gets the localized value based on the user language defined with session.
	/// This method should be used after a user login has been performed and a valid session obtained.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBEnum data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedEnumEncodingTypesUserAllowedGet",
			args,
			onSuccess,
			onFailure,
			false,
			true)
		} else {
			proxy.invoke("EnumEncodingTypesUserAllowedGet",
			args,
			onSuccess,
			onFailure,
			false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedEnumEncodingTypesUserAllowedGet",
			args,
			callBackOverride,
			onFailure,
			false,
			true)
		} else {
			proxy.invoke("EnumEncodingTypesUserAllowedGet",
			args,
			callBackOverride,
			onFailure,
			false)
		}
	}
}

MaduroSLL.Service.prototype.EnumEncodingTypesUserAllowedGetByContentType = function (forLiveContentOnly, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBList of all VBEnum data contracts for all Enums for the "EncodingType" EnumType not marked as private and that the user is allowed to use and gets the localized value based on the user language defined with session.
	/// This method should be used after a user login has been performed and a valid session obtained.
	/// </summary>
	/// <param name="forLiveContentOnly" type="bool">Whether the enum types are for live content only.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of VBEnum data contracts.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"forLiveContentOnly": forLiveContentOnly,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedEnumEncodingTypesUserAllowedGetByContentType",
			args,
			onSuccess,
			onFailure,
			false,
			true)
		} else {
			proxy.invoke("EnumEncodingTypesUserAllowedGetByContentType",
			args,
			onSuccess,
			onFailure,
			false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedEnumEncodingTypesUserAllowedGetByContentType",
			args,
			callBackOverride,
			onFailure,
			false,
			true)
		} else {
			proxy.invoke("EnumEncodingTypesUserAllowedGetByContentType",
			args,
			callBackOverride,
			onFailure,
			false)
		}
	}
}

MaduroSLL.Service.prototype.PlaylistGetListWithEditAccess = function (sessionID, callBackOverride) {
	/// <summary>
	/// Return a list of VBPlaylistReference objects that the user has edit access to
	/// </summary>
	/// <param name="sessionID"></param>
	/// <returns></returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PlaylistGetListWithEditAccess",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("PlaylistGetListWithEditAccess",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.PlaylistGetWithItemViewingAvailabiliytInfo = function (playlistFromSearchContent, sessionID, callBackOverride) {
	/// </summary>
	/// <param name="playlistFromSearchContent"></param>
	/// <param name="sessionID"></param>
	/// <returns></returns>

	var args = {
		"playlistFromSearchContent": playlistFromSearchContent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PlaylistGetWithItemViewingAvailabiliytInfo",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("PlaylistGetWithItemViewingAvailabiliytInfo",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.PlaylistGetByContentID = function (ContentID, sessionID, callBackOverride) {
	/// <summary>
	/// Get a playlist by contentid of the playlist item
	/// </summary>
	/// <param name="ContentID"></param>
	/// <param name="sessionID"></param>
	/// <returns></returns>

	var args = {
		"ContentID": ContentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PlaylistGetByContentID",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("PlaylistGetByContentID",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.CreatePlaylist = function (vbPlaylist, sessionID, callBackOverride) {
	/// <summary>
	/// Create a playlist and playlist items in the Mystro DB from the passed in VBPlaylist object
	/// </summary>
	/// <param name="vbPlaylist"></param>
	/// <param name="sessionID"></param>
	/// <returns>id of the playlist</returns>

	var args = {
		"vbPlaylist": vbPlaylist,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CreatePlaylist",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("CreatePlaylist",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.PlaylistUpdate = function (vbPlaylist, bUpdatePlaylistItems, sessionID, callBackOverride) {
	/// <summary>
	/// Update a playlist and optionally, its playlist items. Carefull, can delete all of the items if not included
	/// </summary>
	/// <param name="vbPlaylist"></param>
	/// <param name="bUpdatePlaylistItems">Set to true if you want the playlist items to be updated as well</param>
	/// <param name="sessionID"></param>
	/// <returns></returns>

	var args = {
		"vbPlaylist": vbPlaylist,
		"bUpdatePlaylistItems": bUpdatePlaylistItems,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPlaylistUpdate",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PlaylistUpdate",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPlaylistUpdate",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PlaylistUpdate",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.PlaylistUpdateWithAppend = function (vbPlaylist, vbPlaylistItems, sessionID, callBackOverride) {
	/// Given a playlist and a list of playlist items, Update the Playlist (not inclding the playlist items) and append the passed playlist items to
	/// the end of the playlists existing items.  This method is useful for appending a list of playlist items to a playlist that currently does not
	/// have all of it's segments available to the current logged in user.
	/// </summary>
	/// <param name="vbPlaylist"></param>
	/// <param name="vbPlaylistItems"></param>
	/// <param name="sessionID"></param>
	/// <returns></returns>

	var args = {
		"vbPlaylist": vbPlaylist,
		"vbPlaylistItems": vbPlaylistItems,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PlaylistUpdateWithAppend",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("PlaylistUpdateWithAppend",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.PlaylistUpdatePlaylistItems = function (PlaylistID, vbPlaylistItems, sessionID, callBackOverride) {
	/// Given a playlistID and a list of playlist items, creat the playlist items in the datastore
	/// delete any current playlist items for that playlist first.
	/// Note playorder of playlist items will be sorted and adjusted accordingly in the db
	/// Whatever is passed in as playlistorder, will end up being 1..x
	/// Note: New PlaylistItemId's are generated. You do not update playlistitems by id. You update/delete as a set of playlist items
	///
	/// </summary>
	/// <param name="PlaylistID"></param>
	/// <param name="vbPlaylistItems"></param>
	/// <param name="sessionID"></param>
	/// <returns></returns>

	var args = {
		"PlaylistID": PlaylistID,
		"vbPlaylistItems": vbPlaylistItems,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PlaylistUpdatePlaylistItems",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("PlaylistUpdatePlaylistItems",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.PlaylistDelete = function (PlaylistID, sessionID, callBackOverride) {
	/// <summary>
	/// Delete playlist with passed in playlist id
	/// </summary>
	/// <param name="PlaylistID"></param>
	/// <param name="sessionID"></param>
	/// <returns></returns>

	var args = {
		"PlaylistID": PlaylistID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PlaylistDelete",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("PlaylistDelete",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.PlaylistAddItem = function (PlaylistID, vbPlaylistItem, sessionID, callBackOverride) {
	/// <summary>
	/// Delete playlist with passed in playlist id
	/// </summary>
	/// <param name="PlaylistID"></param>
	/// <param name="sessionID"></param>
	/// <returns></returns>

	var args = {
		"PlaylistID": PlaylistID,
		"vbPlaylistItem": vbPlaylistItem,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("PlaylistAddItem",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("PlaylistAddItem",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.PlaylistContentThumbnailGeneratePointInTime = function (PlaylistContentID, OriginContentID, startMarkerSeconds, sessionID, callBackOverride) {
	/// <summary>
	/// Creates new thumbnail for a given Playlist (contentid), with original contentid url at a specific point in time
	/// </summary>
	/// <param name="PlaylistContentID">playlist content id</param>
	/// <param name="OriginContentID">origin content id</param>
	/// <param name="startMarkerSeconds">seconds offset into the origin content to use for thumbnail generation</param>
	/// <param name="sessionID">The unique session GUID.</param>
	/// <returns></returns>

	var args = {
		"PlaylistContentID": PlaylistContentID,
		"OriginContentID": OriginContentID,
		"startMarkerSeconds": startMarkerSeconds,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPlaylistContentThumbnailGeneratePointInTime",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PlaylistContentThumbnailGeneratePointInTime",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedPlaylistContentThumbnailGeneratePointInTime",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("PlaylistContentThumbnailGeneratePointInTime",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.MyPlaylistsFilteredGet = function (vbSearchFilter, sessionID, callBackOverride) {
	/// <summary>
	/// Get the playlists, Filtered like a Content Search
	/// </summary>
	/// <param name="vbSearchFilter"></param>
	/// <param name="sessionID"></param>
	/// <returns></returns>
	var args = {
		"vbSearchFilter": vbSearchFilter,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("MyPlaylistsFilteredGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("MyPlaylistsFilteredGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}


MaduroSLL.Service.prototype.MyFilterDataGetForPlaylists = function (sessionID, callBackOverride) {
	/// Get the Filter Widget Data, including Categories, for the playlist Content
	/// For the logged in user.
	/// </summary>
	/// <param name="sessionID">Unique session GUID.</param>
	/// <returns>Filter Data Object</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("MyFilterDataGetForPlaylists",
	   args,
	   onSuccess,
	   onFailure,
	   false)
	} else {
		proxy.invoke("MyFilterDataGetForPlaylists",
	   args,
	   callBackOverride,
	   onFailure,
	   false)
	}
}

MaduroSLL.Service.prototype.AppServerGet = function (appServerID, sessionID, callBackOverride) {
	/// <summary> Returns a single VBAppServer data contract. </summary>
	/// <param name="appServerID" type="Number" integer="true">AppServer's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBAppServer"> VBAppServer data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"appServerID": appServerID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("AppServerGet",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("AppServerGet",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}
MaduroSLL.Service.prototype.AppServersGetAll = function (sessionID, callBackOverride) {
	/// <summary> Returns a VBList containing a list of VBAppServer data contracts for ALL AppServers defined in the system. </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBAppServer data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("AppServersGetAll",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("AppServersGetAll",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}
MaduroSLL.Service.prototype.AppServerAdd = function (vbAppServer, sessionID, callBackOverride) {
	/// <summary> Adds new AppServer with passed VBAppServer data contract. NOTE: This method will NOT add associated Entry Points or Publishing Points. You should use the AppServerEntryPointAdd and AppServerPublishingPointAdd methods accordingly. </summary>
	/// <param name="vbAppServer" type="MaduroDC.VBAppServer">VBAppServer data contract to add.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBAppServer"> VBAppServer data contract of newly added AppServer. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbAppServer": vbAppServer,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("AppServerAdd",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("AppServerAdd",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}
MaduroSLL.Service.prototype.AppServerUpdate = function (vbAppServer, sessionID, callBackOverride) {
	/// <summary> Updates existing AppServer with passed VBAppServer data contract. NOTE: This method will NOT update associated Entry Points or Publishing Points. You should use the AppServerEntryPointUpdate and AppServerPublishingPointUpdate methods accordingly. </summary>
	/// <param name="vbAppServer" type="MaduroDC.VBAppServer">VBAppServer data contract to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBAppServer"> VBAppServer data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbAppServer": vbAppServer,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("AppServerUpdate",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("AppServerUpdate",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}
MaduroSLL.Service.prototype.AppServerDelete = function (vbAppServer, sessionID, callBackOverride) {
	/// <summary> Deletes AppServer with passed VBAppServer data contract. </summary>
	/// <param name="vbAppServer" type="MaduroDC.VBAppServer">VBAppServer data contract to delete.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbAppServer": vbAppServer,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("AppServerDelete",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("AppServerDelete",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}
MaduroSLL.Service.prototype.AppServerEntryPointGet = function (appServerEntryPointID, sessionID, callBackOverride) {
	/// <summary> Returns a single VBAppServerEntryPoint data contract. </summary>
	/// <param name="appServerEntryPointID" type="Number" integer="true">AppServer Entry Point's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBAppServerEntryPoint"> VBAppServerEntryPoint data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"appServerEntryPointID": appServerEntryPointID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("AppServerEntryPointGet",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("AppServerEntryPointGet",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}
MaduroSLL.Service.prototype.AppServerEntryPointsGetByAppServer = function (appServerID, sessionID, callBackOverride) {
	/// <summary> Returns a VBList containing a list of VBAppServerEntryPoint data contracts associated with the passed AppServer ID. </summary>
	/// <param name="appServerID" type="Number" integer="true">AppServer's unique numeric ID.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBAppServerEntryPoint data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"appServerID": appServerID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("AppServerEntryPointsGetByAppServer",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("AppServerEntryPointsGetByAppServer",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}
MaduroSLL.Service.prototype.AppServerEntryPointsSortOrderUpdate = function (appServerID, entryPointIDs, sessionID, callBackOverride) {
	/// <summary> Returns a VBList containing a list of VBAppServerEntryPoint data contracts associated with the passed AppServer ID. </summary>
	/// <param name="appServerID" type="Number" integer="true">AppServer's unique numeric ID.</param>
	/// <param name="entryPointIDs" type="List&lt;int&gt;">List of entry point ID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList"> VBList of VBAppServerEntryPoint data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"appServerID": appServerID,
		"entryPointIDs": entryPointIDs,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("AppServerEntryPointsSortOrderUpdate",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("AppServerEntryPointsSortOrderUpdate",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}
MaduroSLL.Service.prototype.AppServerEntryPointAdd = function (vbAppServerEntryPoint, sessionID, callBackOverride) {
	/// <summary> Adds new AppServer Entry Point with passed VBAppServerEntryPoint data contract. </summary>
	/// <param name="vbAppServerEntryPoint" type="MaduroDC.VBAppServerEntryPoint">VBAppServerEntryPoint data contract to add.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBAppServerEntryPoint"> VBAppServerEntryPoint data contract of newly added AppServer Entry Point. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbAppServerEntryPoint": vbAppServerEntryPoint,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("AppServerEntryPointAdd",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("AppServerEntryPointAdd",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}
MaduroSLL.Service.prototype.AppServerEntryPointUpdate = function (vbAppServerEntryPoint, sessionID, callBackOverride) {
	/// <summary> Updates existing AppServer Entry Point with passed VBAppServerEntryPoint data contract. </summary>
	/// <param name="vbAppServerEntryPoint" type="MaduroDC.VBAppServerEntryPoint">VBAppServerEntryPoint data contract to update.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBAppServerEntryPoint"> VBAppServerEntryPoint data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbAppServerEntryPoint": vbAppServerEntryPoint,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("AppServerEntryPointUpdate",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("AppServerEntryPointUpdate",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}
MaduroSLL.Service.prototype.AppServerEntryPointDelete = function (vbAppServerEntryPoint, sessionID, callBackOverride) {
	/// <summary> Deletes AppServer Entry Point with passed VBAppServerEntryPoint data contract. </summary>
	/// <param name="vbAppServerEntryPoint" type="MaduroDC.VBAppServerEntryPoint">VBAppServerEntryPoint data contract to delete.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData"> VBVoidData data contract. If an exception is thrown, the.Exception property will be populated. </returns>

	var args = {
		"vbAppServerEntryPoint": vbAppServerEntryPoint,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("AppServerEntryPointDelete",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("AppServerEntryPointDelete",
		args,
		callBackOverride,
		onFailure,
		false)
	}
}
//Global Recording Widget
//Start
MaduroSLL.Service.prototype.ContentRecordStatusGetAllActiveRecord = function (sessionID, itemsPerPage, pageToDisplay, callBackOverride) {
	/// <summary>
	/// Returns list of all content record status created by all.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <param name="itemsPerPage" type="Int">Items per page.</param>
	/// <param name="pageToDisplay" type="Int">Number of page to display.</param>
	/// <returns type="MaduroDC.VBList">
	/// List of all VBRequestRecord data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {

		"sessionID": sessionID,
		"itemsPerPage": itemsPerPage,
		"pageToDisplay": pageToDisplay
	};
	if (!callBackOverride) {
		proxy.invoke("ContentRecordStatusGetAllActiveRecord",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentRecordStatusGetAllActiveRecord",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentFtpStatusGetAllActiveRecord = function (requestID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns list of all content record status created by all.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <param name="requestID" type="String">Request ID.</param>
	/// <returns type="MaduroDC.VBList">
	/// List of all VBRequestRecord data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {

		"requestID": requestID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentFtpStatusGetAllActiveRecord",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentFtpStatusGetAllActiveRecord",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentIngestStatusGetAllActiveRecord = function (requestftpID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns list of all content record status created by all.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <param name="requestFtpID" type="Int">Get ingestion records on the basis of RequestFtpID passed </param>
	/// <returns type="MaduroDC.VBList">
	/// List of all VBRequestRecord data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {

		"requestFtpID": requestftpID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentIngestStatusGetAllActiveRecord",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentIngestStatusGetAllActiveRecord",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentRecordingCancelAll = function (sessionID, selectedTab, callBackOverride) {
	/// <summary>
	/// Stop all active recordings.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID,
		"selectedTab": selectedTab
	};
	if (!callBackOverride) {
		proxy.invoke("ContentRecordingCancelAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentRecordingCancelAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentRecordCancelByRequestID = function (requestID, sessionID, callBackOverride) {
	/// <summary>
	/// Cancel recording a live content based on the request ID.
	/// </summary>
	/// <param name="requestID" type="Int">Request ID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBRequestRecord">
	/// VBBoolData data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"requestID": requestID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentRecordCancelByRequestID",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentRecordCancelByRequestID",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentFTPCancelByID = function (requestFtpID, sessionID, callBackOverride) {
	/// <summary>
	/// Cancel recording a live content based on the request Ftp ID.
	/// </summary>
	/// <param name="requestFtpID" type="Int">Request FTP ID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBRequestRecord">
	/// VBBoolData data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"requestFtpID": requestFtpID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentFTPCancelByID",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentFTPCancelByID",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentIngestionCancelByID = function (requestIngestID, sessionID, callBackOverride) {
	/// <summary>
	/// Cancel recording a live content based on the request Ingestion ID.
	/// </summary>
	/// <param name="requestIngestID" type="Int">Request Ingestion ID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBRequestRecord">
	/// VBBoolData data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"requestIngestID": requestIngestID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentIngestionCancelByID",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentIngestionCancelByID",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentRecordGetCountAllActiveRecord = function (sessionID, callBackOverride) {
	/// <summary>
	/// Gets count of all content active FTPs.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBIntData">
	/// List of all active record count
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {

		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentRecordGetCountAllActiveRecord",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentRecordGetCountAllActiveRecord",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentFtpGetCountAllActiveRecord = function (sessionID, callBackOverride) {
	/// <summary>
	/// Gets count of all content active ingestion.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBIntData">
	/// List of all active record count
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {

		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentFtpGetCountAllActiveRecord",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentFtpGetCountAllActiveRecord",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentIngestGetCountAllActiveRecord = function (sessionID, callBackOverride) {
	/// <summary>
	/// Gets count of all content active ingestion.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBIntData">
	/// List of all active record count
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {

		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentIngestGetCountAllActiveRecord",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentIngestGetCountAllActiveRecord",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ContentRecordGetCountAllAddVideo = function (sessionID, callBackOverride) {
    /// <summary>
    /// Gets count of all content Add Video.
    /// </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBIntData">
    /// List of all active record count
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {

        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("ContentRecordGetCountAllAddVideo",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("ContentRecordGetCountAllAddVideo",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.ContentRecordGetCountAllAutoIngest = function (sessionID, callBackOverride) {
    /// <summary>
    /// Gets count of all content Auto Ingestion.
    /// </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBIntData">
    /// List of all active record count
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {

        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("ContentRecordGetCountAllAutoIngest",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("ContentRecordGetCountAllAutoIngest",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.ContentRecordGetCountAllDownload = function (sessionID, callBackOverride) {
    /// <summary>
    /// Gets count of all content Downloads.
    /// </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBIntData">
    /// List of all active record count
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {

        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("ContentRecordGetCountAllDownload",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("ContentRecordGetCountAllDownload",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.ContentRecordGetTotalCount = function (sessionID, searchID, searchText,selectedTab, callBackOverride) {
	/// <summary>
	/// Gets count of all content active record.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <param name="searchID" type="String">SearchID.</param>
    /// <param name="searchText" type="String">Search Text passed.</param>
    /// <param name="selectedTab" type="String">Selected Tab passed.</param>
	/// <returns type="MaduroDC.VBIntData">
	/// Count of all active record
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {

		"sessionID": sessionID,
		"searchID": searchID,
		"searchText": searchText,
		"selectedTab": selectedTab
	};
	if (!callBackOverride) {
		proxy.invoke("ContentRecordGetTotalCount",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentRecordGetTotalCount",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentRecordSortAllActiveRecord = function (sessionID, sortFilter, isAscending, itemsPerPage, pageToDisplay, searchID, searchText, callBackOverride) {
	/// <summary>
	/// Returns list of all content active record status order by search criteria specified.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <param name="sortFilter" type="int">Sort ID.</param>
	/// <param name="itemsPerPage" type="String">Items per page.</param>
	/// <param name="pageToDisplay" type="String">Number of page to display.</param>
	/// <param name="isAscending" type="bool">Check whether its ascending or descending.</param>
	/// <param name="searchID" type="String">ID of the search criteria(whether its IP address, server name, user name or title.</param>
	/// <param name="searchText" type="bool">search string to search for</param>
	/// <returns type="MaduroDC.VBList">
	/// List of all VBRequestRecord data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {

		"sessionID": sessionID,
		"sortFilter": sortFilter,
		"isAscending": isAscending,
		"itemsPerPage": itemsPerPage,
		"pageToDisplay": pageToDisplay,
		"searchID": searchID,
		"searchText": searchText
	};
	if (!callBackOverride) {
		proxy.invoke("ContentRecordSortAllActiveRecord",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentRecordSortAllActiveRecord",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentAddVideoGlobalStatus = function (sessionID, sortFilter, isAscending, itemsPerPage, pageToDisplay, searchID, searchText, callBackOverride) {
    /// <summary>
    /// Returns list of all content Add Video status order by search criteria specified.
    /// </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <param name="sortFilter" type="int">Sort ID.</param>
    /// <param name="itemsPerPage" type="String">Items per page.</param>
    /// <param name="pageToDisplay" type="String">Number of page to display.</param>
    /// <param name="isAscending" type="bool">Check whether its ascending or descending.</param>
    /// <param name="searchID" type="String">ID of the search criteria(whether its IP address, server name, user name or title.</param>
    /// <param name="searchText" type="bool">search string to search for</param>
    /// <returns type="MaduroDC.VBList">
    /// List of all VBRequestRecord data contract
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {

        "sessionID": sessionID,
        "sortFilter": sortFilter,
        "isAscending": isAscending,
        "itemsPerPage": itemsPerPage,
        "pageToDisplay": pageToDisplay,
        "searchID": searchID,
        "searchText": searchText
    };
    if (!callBackOverride) {
        proxy.invoke("ContentAddVideoGlobalStatus",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("ContentAddVideoGlobalStatus",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.ContentAutoIngestGlobalStatus = function (sessionID, sortFilter, isAscending, itemsPerPage, pageToDisplay, searchID, searchText, callBackOverride) {
    /// <summary>
    /// Returns list of all content Auto Ingestions status order by search criteria specified.
    /// </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <param name="sortFilter" type="int">Sort ID.</param>
    /// <param name="itemsPerPage" type="String">Items per page.</param>
    /// <param name="pageToDisplay" type="String">Number of page to display.</param>
    /// <param name="isAscending" type="bool">Check whether its ascending or descending.</param>
    /// <param name="searchID" type="String">ID of the search criteria(whether its IP address, server name, user name or title.</param>
    /// <param name="searchText" type="bool">search string to search for</param>
    /// <returns type="MaduroDC.VBList">
    /// List of all VBRequestRecord data contract
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {

        "sessionID": sessionID,
        "sortFilter": sortFilter,
        "isAscending": isAscending,
        "itemsPerPage": itemsPerPage,
        "pageToDisplay": pageToDisplay,
        "searchID": searchID,
        "searchText": searchText
    };
    if (!callBackOverride) {
        proxy.invoke("ContentAutoIngestGlobalStatus",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("ContentAutoIngestGlobalStatus",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.ContentRequestDownloadGlobalStatus = function (sessionID, sortFilter, isAscending, itemsPerPage, pageToDisplay, searchID, searchText, callBackOverride) {
    /// <summary>
    /// Returns list of all content Downloads status order by search criteria specified.
    /// </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <param name="sortFilter" type="int">Sort ID.</param>
    /// <param name="itemsPerPage" type="String">Items per page.</param>
    /// <param name="pageToDisplay" type="String">Number of page to display.</param>
    /// <param name="isAscending" type="bool">Check whether its ascending or descending.</param>
    /// <param name="searchID" type="String">ID of the search criteria(whether its IP address, server name, user name or title.</param>
    /// <param name="searchText" type="bool">search string to search for</param>
    /// <returns type="MaduroDC.VBList">
    /// List of all VBRequestRecord data contract
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {

        "sessionID": sessionID,
        "sortFilter": sortFilter,
        "isAscending": isAscending,
        "itemsPerPage": itemsPerPage,
        "pageToDisplay": pageToDisplay,
        "searchID": searchID,
        "searchText": searchText
    };
    if (!callBackOverride) {
        proxy.invoke("ContentRequestDownloadGlobalStatus",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("ContentRequestDownloadGlobalStatus",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.ContentRecordSearch = function (searchID, searchText, sessionID, selectedTab, callBackOverride) {
	/// <summary>
	/// Search active recordings throung IP Adress, Server name, Username or Title.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <param name="searchID" type="Int">ID of the search criteria(whether its IP address, server name, user name or title.</param>
	/// <param name="searchText" type="String">search string to search for</param>
	/// <returns type="MaduroDC.VBStringData">
	/// VBRequest data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {

		"searchID": searchID,
		"searchText": searchText,
		"sessionID": sessionID,
		"selectedTab": selectedTab
	};
	if (!callBackOverride) {
		proxy.invoke("ContentRecordSearch",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentRecordSearch",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentStatusPurge = function (requestID, purgeFailedOrCanceled, callBackOverride) {
	/// <summary>
	/// Purge all content record/ftp/ingest failed/succeeded/cancled status
	/// </summary>
	/// <param name="requestID" type="int?">Request ID</param>
	/// <param name="purgeFailedOrCanceled" type="bool">Where to purge failed or canceled record in addition to the succeeded one.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBBoolData">True if the operation succeeds</returns>
	var args = {

		"requestID": requestID,
		"purgeFailedOrCanceled": purgeFailedOrCanceled,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentStatusPurge",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentStatusPurge",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentStatusPurgeAll = function (selectedTab, purgeFailedOrCanceled, sessionID, callBackOverride) {
	/// <summary>
	/// Purge all content record/ftp/ingest failed/succeeded/cancled status
	/// </summary>
	/// <param name="requestID" type="int?">Request ID</param>
	/// <param name="purgeFailedOrCanceled" type="bool">Where to purge failed or canceled record in addition to the succeeded one.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBBoolData">True if the operation succeeds</returns>
	var args = {

		"selectedTab": selectedTab,
		"purgeFailedOrCanceled": purgeFailedOrCanceled,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentStatusPurgeAll",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentStatusPurgeAll",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentStatusPurgeFtpIndividually = function (requestID, requestFtpID, sessionID, callBackOverride) {
	/// <summary>
	/// Purge all content ftp/ingest failed/cancled status. This will purge ingestions for the corresponding Ftp as well.
	/// </summary>
	/// <param name="requestID" type="int?">Request ID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBBoolData">True if the operation succeeds</returns>
	var args = {
		"requestID": requestID,
		"requestFtpID": requestFtpID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentStatusPurgeFtpIndividually",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentStatusPurgeFtpIndividually",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentStatusPurgeIngestIndividually = function (requestIngestID, sessionID, callBackOverride) {
	/// <summary>
	/// Purge all content ingest failed/cancled status
	/// </summary>
	/// <param name="requestIngestID" type="int?">Request Ingestion ID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBBoolData">True if the operation succeeds</returns>
	var args = {

		"requestIngestID": requestIngestID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentStatusPurgeIngestIndividually",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentStatusPurgeIngestIndividually",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentStatusPurgeRecordIndividually = function (requestID, sessionID, callBackOverride) {
	/// <summary>
	/// Purge all content record/ftp/ingest failed/cancled status. This will purge ftps/ingestions for the corresponding record as well.
	/// </summary>
	/// <param name="requestID" type="int?">Request ID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBBoolData">True if the operation succeeds</returns>
	var args = {

		"requestID": requestID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentStatusPurgeRecordIndividually",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentStatusPurgeRecordIndividually",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ContentSyncWithCloud = function (targetContentID, sessionID, callBackOverride) {
	/// <summary>
	/// Synchronizes the files associated with an asset in the Cloud with the stored instances stored on the local VEMS VOD servers.
	/// If VEMS is storing just the Cloud asset, all the supported files in the Cloud for the asset will be downloaded and stored on the local VEMS VODs (non-Cloud).
	/// If VEMS is storing just the local VEMS VOD assets (non-Cloud), one of the local VEMS VOD assets will be uploaded to the Cloud.
	/// </summary>
	/// <param name="targetContentID" type="int">Content ID. The content that needs to be synchronzed with the Cloud.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"targetContentID": targetContentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentSyncWithCloud",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentSyncWithCloud",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentSyncWithCloud",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentSyncWithCloud",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentSyncWithCloudPermissionGet = function (targetContentID, sessionID, callBackOverride) {
	/// <summary>
	/// Gets the user's permission (display and execute) for the Sync with Cloud for the specified target content.
	/// Further checks will be peformed if the user actually initiate a sync with the Cloud.
	/// If VEMS is storing just the Cloud asset, all the supported files in the Cloud for the asset will be downloaded and stored on the local VEMS VODs (non-Cloud).
	/// If VEMS is storing just the local VEMS VOD assets (non-Cloud), one of the local VEMS VOD assets will be uploaded to the Cloud.
	/// </summary>
	/// <param name="targetContentID" type="int">Content ID. The content that may to be synchronzed with the Cloud.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBBoolData">
	/// VBContentSyncWithCloudPermission data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"targetContentID": targetContentID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentSyncWithCloudPermissionGet",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentSyncWithCloudPermissionGet",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentSyncWithCloudPermissionGet",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentSyncWithCloudPermissionGet",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.StoredServerPublishingPointStoragePathsGetFromMediaServer = function (vbStoredServerPublishingPoint, sessionID, callBackOverride) {
	/// <summary>
	/// Returns a VBList containing a list of the storage paths physically configured for the media server (i.e. publishing point).  These are the storage
	/// paths physically configured for the media server and not those defined in the database.
	/// This method can be called when the user is editting the publishing point so the passed vbStoredServerPublishingPoint may contain
	/// data that has not been saved to the database yet.
	/// Only applicable for certain types of media servers (i.e. Infovalue).
	/// Note: an exception will be thrown for Infovalue publishing point if no storage paths found.
	/// </summary>
	/// <param name="vbStoredServerPublishingPoint" type="MaduroDC.VBStoredServerPublishingPoint">VBStoredServerPublishingPoint data contract containing information on publishing point to get data for.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList of string values.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbStoredServerPublishingPoint": vbStoredServerPublishingPoint,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("StoredServerPublishingPointStoragePathsGetFromMediaServer",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("StoredServerPublishingPointStoragePathsGetFromMediaServer",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.ContentDownloadStatusGet = function (requestDownloadID, sessionID, callBackOverride) {
	/// <summary>
	/// Gets content download status for a specific download.
	/// </summary>
	/// <param name="requestDownloadID" type="int">RequestDownload ID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBRequestDownload">
	/// VBRequestDownload data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"requestDownloadID": requestDownloadID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentDownloadStatusGet",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("ContentDownloadStatusGet",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.ContentDownloadStatusGetAll = function (sessionID, callBackOverride) {
	/// <summary>
	/// Gets list of all content download status.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// List of all VBRequestDownload data contracts
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentDownloadStatusGetAll",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("ContentDownloadStatusGetAll",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.ContentDownloadStatusGetAllByUser = function (sessionID, callBackOverride) {
	/// <summary>
	/// Gets list of all content download status create by the current user.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// List of all VBRequestDownload data contracts
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentDownloadStatusGetAllByUser",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("ContentDownloadStatusGetAllByUser",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.ContentDownloadCancel = function (vbRequestDownload, sessionID, callBackOverride) {
	/// <summary>
	/// Cancel download operation.
	/// </summary>
	/// <param name="vbRequestDownload" type="MaduroDC.VBRequestDownload">VBRequestDownload data contract</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBRequestDownload">
	/// VBRequestDownload data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbRequestDownload": vbRequestDownload,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentDownloadCancel",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("ContentDownloadCancel",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.SetSAPConfigurationValues = function (KeyType, IPAddress, Port, sessionID, callBackOverride) {
	/// <summary>
	/// Set SAP Configuration Values on the basis of input parameters passed in registry.
	/// </summary>
	/// <param name="sessionID">Unique Session GUID</param>
	/// <param name="KeyType">EnumType</param>
	/// <param name="ipAddress">Valid IPAddress String</param>
	/// <param name="port">Port</param>
	/// <returns>
	/// VBBoolData Data Contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"keyType": KeyType,
		"ipAddress": IPAddress,
		"port": Port,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("SetSAPConfigurationValues",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("SetSAPConfigurationValues",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.GetSAPConfigurationValues = function (sessionID, callBackOverride) {
	/// <summary>
	/// Gets all the SAP Configuration values from registry
	/// </summary>
	/// <param name="sessionID">Unique Session GUID</param>
	/// <returns>
	/// VBSAPConfig data contract list.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("GetSAPConfigurationValues",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("GetSAPConfigurationValues",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ContentFtpStatusGetAllActiveConversion = function (requestConvertID, sessionID, callBackOverride) {
	/// <summary>
	/// Returns list of all content record status created by all.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <param name="requestConvertID" type="String">Request Convert ID.</param>
	/// <returns type="MaduroDC.VBList">
	/// List of all VBRequestRecord data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {

		"requestConvertID": requestConvertID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentFtpStatusGetAllActiveConversion",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentFtpStatusGetAllActiveConversion",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ContentConvertStatusGetAllActiveConversion = function (requestID, sessionID, callBackOverride) {
	/// <summary>
	/// Gets list of all active content convert status for the request ID..
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <param name="requestID" type="String">Request ID.</param>
	/// <returns type="MaduroDC.VBList">
	/// List of all VBRequestRecord data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {

		"requestID": requestID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentConvertStatusGetAllActiveConversion",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentConvertStatusGetAllActiveConversion",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ContentConversionGetCountAllActiveRecord = function (sessionID, callBackOverride) {
	/// <summary>
	/// Gets count of all content active Conversions.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBIntData">
	/// List of all active record count
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {

		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentConversionGetCountAllActiveRecord",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentConversionGetCountAllActiveRecord",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.RequestActiveCountsGet = function (sessionID, callBackOverride) {
	/// <summary>
	/// Gets counts of all active request operations.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBRequestActiveCounts">
	/// Counts of all active request operations
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {

		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RequestActiveCountsGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("RequestActiveCountsGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.RetryRequestOperations = function (requestID, sessionID, callBackOverride) {
	/// <summary>
	/// Retry all failed or canceld conversions, ftps and ingestions
	/// </summary>
	/// <param name="requestID">Request ID</param>
	/// <param name="sessionID">Unique session GUID</param>
	/// <returns type="MaduroDC.VBBoolData">
	/// VBBoolData data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"requestID": requestID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("RetryRequestOperations",
		args,
		onSuccess,
		onFailure,
		false)
	} else {
		proxy.invoke("RetryRequestOperations",
		args,
		callBackOverride,
		onFailure,
		false)
	}
}

MaduroSLL.Service.prototype.ContentConvertCancelByID = function (requestConvertID, sessionID, callBackOverride) {
	/// <summary>
	/// Stops content conversion by passing request Convert ID
	/// </summary>
	/// <param name="requestConvertID" type="Int">Request Convert ID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBRequestRecord">
	/// VBBoolData data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"requestConvertID": requestConvertID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentConvertCancelByID",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentConvertCancelByID",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ContentStatusPurgeConversionIndividually = function (requestID, requestConvertID, sessionID, callBackOverride) {
	/// <summary>
	/// Purge all content Conversion/ftp/ingest failed/cancled status. This will purge Conversion/ftps/ingestions for the corresponding record as well.
	/// </summary>
	/// <param name="requestConvertID" type="int?">Request Convert ID</param>
	/// <param name="requestID" type="int?">Request ID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBBoolData">True if the operation succeeds</returns>
	var args = {
		"requestID": requestID,
		"requestConvertID": requestConvertID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentStatusPurgeConvertIndividually",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ContentStatusPurgeConvertIndividually",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
	 //End

MaduroSLL.Service.prototype.DeviceVBrickValidateConnection = function (vbDeviceVBrick, sessionID, callBackOverride) {
	/// <summary>
	/// Validates the connection to the vbrick using the provided information. Only the ability to connect to the vbrick is being validated.
	/// </summary>
	/// <param name="vbDeviceVBrick" type="MaduroDC.VBDeviceVBrick">Data contract populated with vbrick device info to validate.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBBoolData">
	/// VBBoolData data contract. ReturnValue = true if able to connect. ReturnValue = false if unable to connect.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"vbDeviceVBrick": vbDeviceVBrick,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DeviceVBrickValidateConnection",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("DeviceVBrickValidateConnection",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}
MaduroSLL.Service.prototype.ContentInstanceDurationUpdate = function (contentID, duration, sessionID, callBackOverride) {
	/// <summary>
	/// Update duration of Cotnent Instance
	/// </summary>
	/// <param name="contentID">ContentID</param>
	/// <param name="duration">Duration(in secs)</param>
	/// <param name="sessionID">Unique Sessionid</param>
	/// <returns>MaduroDC.VBVoidData</returns>
	var args = {
		"contentID": contentID,
		"duration": duration,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentInstanceDurationUpdate",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentInstanceDurationUpdate",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedContentInstanceDurationUpdate",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ContentInstanceDurationUpdate",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ContentConvertStatusGetAllByUser = function (sessionID, callBackOverride) {
	/// <summary>
	/// Gets list of all content convert status create by the current user.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// List of all VBRequestConvert data contracts
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentConvertStatusGetAllByUser",
		args,
		onSuccess,
		onFailure,
		false)
	} else {
		proxy.invoke("ContentConvertStatusGetAllByUser",
		args,
		callBackOverride,
		onFailure,
		false)
	}
}

MaduroSLL.Service.prototype.ContentConvertCancel = function (requestConvert, sessionID, callBackOverride) {
	/// <summary>
	/// Cancel convert operation.
	/// </summary>
	/// <param name="requestConvert" type="MaduroDC.VBRequestConvert">VBRequestConvert data contract</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBRequestConvert">
	/// VBRequestConvert data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"requestConvert": requestConvert,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ContentConvertCancel",
		args,
		onSuccess,
		onFailure,
		false)
	} else {
		proxy.invoke("ContentConvertCancel",
		args,
		callBackOverride,
		onFailure,
		false)
	}
}

MaduroSLL.Service.prototype.CacheClearAllServerAll = function (sessionID, callBackOverride) {
	/// <summary>
	/// Clears all the cached items for all the application servers.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CacheClearAllServerAll",
		args,
		onSuccess,
		onFailure,
		false)
	} else {
		proxy.invoke("CacheClearAllServerAll",
		args,
		callBackOverride,
		onFailure,
		false)
	}
}

MaduroSLL.Service.prototype.DiagTestVEMSServerResponseTime = function (sessionID, callBackOverride) {
	/// <summary>
	/// Tests the response time of the VEMS server for a client. This function does nothing but return.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DiagTestVEMSServerResponseTime",
		args,
		onSuccess,
		onFailure,
		false)
	} else {
		proxy.invoke("DiagTestVEMSServerResponseTime",
		args,
		callBackOverride,
		onFailure,
		false)
	}
}

MaduroSLL.Service.prototype.DiagGetDBServerResponseTimes = function (numIterations, sessionID, callBackOverride) {
	/// <summary>
	/// Gets response times from the database server over a number of iterations.
	/// </summary>
	/// <param name="numIterations" type="int">Number of times to get the response time</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type=""MaduroDC.VBList">
	/// VBList of response times from database server in milliseconds.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"numIterations": numIterations,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DiagGetDBServerResponseTimes",
		args,
		onSuccess,
		onFailure,
		false)
	} else {
		proxy.invoke("DiagGetDBServerResponseTimes",
		args,
		callBackOverride,
		onFailure,
		false)
	}
}

MaduroSLL.Service.prototype.DiagGetLDAPServerResponseTimes = function (numIterations, applicationID, sessionID, callBackOverride) {
	/// <summary>
	/// Gets response times from the first LDAP server enabled in the system over a number of iterations.
	/// </summary>
	/// <param name="numIterations" type="int">Number of times to get the response time</param>
	/// <param name="applicationID" type="String">Application ID</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type=""MaduroDC.VBList">
	/// VBList of response times from LDAP server in milliseconds. If no LDAP servers exist, returns a list of one element whose value is -1.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"numIterations": numIterations,
		"applicationID": applicationID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("DiagGetLDAPServerResponseTimes",
		args,
		onSuccess,
		onFailure,
		false)
	} else {
		proxy.invoke("DiagGetLDAPServerResponseTimes",
		args,
		callBackOverride,
		onFailure,
		false)
	}
}

MaduroSLL.Service.prototype.ExternalIdentityTokenSharedSecretAutoGenerateGet = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns an auto-generated shared secret used for the external identity token (see Admin - Globals).
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBStringData">
	/// VBStringData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ExternalIdentityTokenSharedSecretAutoGenerateGet",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ExternalIdentityTokenSharedSecretAutoGenerateGet",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.UserLoginWithExternalIdentityToken = function (externalIdentityTokenFromHttp, applicationID, clientIP, userLanguage, callBackOverride) {
	/// <summary>
	/// Logs-in user using the passed external identity token. The external identity token is currently only used by SharePoint and can be used to avoid the double login (SharePoint -> VEMS Mystro)
	/// when SSO is used in VEMS Mystro.  The external indentity token is generated and controlled by VBrick.
	/// </summary>
	/// <param name="externalIdentityTokenFromHttp" type="String">The URL encoded identity token obtained from HTTP request. Token passed in URL with "VEMS_TK" querystring parameter.</param>
	/// <param name="applicationID" type="String">Application ID - Every application allowed to call this service MUST have an ID in the ClientApplication Table</param>
	/// <param name="clientIP" type="String">Client IP</param>
	/// <param name="userLanguage" type="String">User Language</param>
	/// <returns type="MaduroDC.VBSession">
	/// VBSession data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"externalIdentityTokenFromHttp": externalIdentityTokenFromHttp,
		"applicationID": applicationID,
		"clientIP": clientIP,
		"userLanguage": userLanguage
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedUserLoginWithExternalIdentityToken",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("UserLoginWithExternalIdentityToken",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedUserLoginWithExternalIdentityToken",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("UserLoginWithExternalIdentityToken",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.ExternalIdentityTokenUsageIsLicenseValid = function (sessionID, callBackOverride) {
	/// <summary>
	/// Determine if the required licenses to use the external identity token are valid.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBBoolData">
	/// VBBoolData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ExternalIdentityTokenUsageIsLicenseValid",
	args,
	onSuccess,
	onFailure,
	false)
	} else {
		proxy.invoke("ExternalIdentityTokenUsageIsLicenseValid",
	args,
	callBackOverride,
	onFailure,
	false)
	}
}

MaduroSLL.Service.prototype.ExternalIdentityTokenRecordAsNotUsed = function (externalIdentityTokenFromHttp, clientIP, sessionID, callBackOverride) {
	/// <summary>
	///  Records the external identity token provided by the external system (i.e. SharePoint) as not used if the external identity token is supported.
	///  This method should be called when an external identity token is passed to VEMS Mystro but is not used because the user already has
	///  a current session open to VEMS Mystro.
	/// </summary>
	/// <param name="externalIdentityTokenFromHttp" type="String">The URL encoded identity token obtained from HTTP request. Token passed in URL with "VEMS_TK" querystring parameter.</param>
	/// <param name="clientIP" type="String">Client IP</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBVoidData">
	/// VBVoidData data contract.
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"externalIdentityTokenFromHttp": externalIdentityTokenFromHttp,
		"clientIP": clientIP,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedExternalIdentityTokenRecordAsNotUsed",
						args,
						onSuccess,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ExternalIdentityTokenRecordAsNotUsed",
						args,
						onSuccess,
						onFailure,
						false)
		}
	} else {
		if (this.isEmbedded) {
			JSONPproxy.invoke("EmbedExternalIdentityTokenRecordAsNotUsed",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
		} else {
			proxy.invoke("ExternalIdentityTokenRecordAsNotUsed",
						args,
						callBackOverride,
						onFailure,
						false)
		}
	}
}

MaduroSLL.Service.prototype.FavoriteContentAddMulti = function (contentIDs, sessionID, callBackOverride) {
	/// <summary>
	/// Add multiple Content items to the current user's Favorites
	/// </summary>
	/// <param name="contentIDs">The content records to add</param>
	/// <param name="sessionID">Unique session GUID.</param>

	var args = {
		"contentIDs": contentIDs,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FavoriteContentAddMulti",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("FavoriteContentAddMulti",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.FeaturedContentAddMulti = function (vbFeaturedContent, sessionID, callBackOverride) {
	/// <summary>
	/// Add multiple Content items to the Featured
	/// </summary>
	/// <param name="vbFeaturedContent">The content records to add</param>
	/// <param name="sessionID">Unique session GUID.</param>

	var args = {
		"vbFeaturedContent": vbFeaturedContent,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("FeaturedContentAddMulti",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("FeaturedContentAddMulti",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.ContentGetUnfilteredForContentID = function (contentID, sessionID, callBackOverride) {
    /// <summary>
    /// This method is used by the metadata widget. This method returns all contentinstances for a piece
    /// of content regardless of Zones, client  profile, etc.
    /// This method can only be called if the user is a Content Administrator or has Admin rights to the content or is the content owner
    /// </summary>
    /// <param name="contentID">ContentID</param>
    /// <param name="sessionID">Unique SessionID</param>
    /// <returns>VBContentList</returns>
    var args = {
        "contentID": contentID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("ContentGetUnfilteredForContentID",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("ContentGetUnfilteredForContentID",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}


MaduroSLL.Service.prototype.ContentGetUnfiltered = function (filter, sessionID, callBackOverride) {
    /// <summary>
    /// This method is used by the metadata widget. This method returns all content regardless of Zones, client  profile, etc.
    /// This method can only be called if the user is a Content Administrator
    /// </summary>
    /// <param name="filter">Filter</param>
    /// <param name="sessionID">Unique SessionID</param>
    /// <returns>VBContentList</returns>
    var args = {
        "filter": filter,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("ContentGetUnfiltered",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("ContentGetUnfiltered",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}

MaduroSLL.Service.prototype.CiscoManifestConfigGet = function (sessionID, callBackOverride) {
	/// <summary>
	/// Returns the VBCiscoManifestConfig data contract.
	/// </summary>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBCiscoManifestConfig">VBCiscoManifestConfig data contract</returns>
	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CiscoManifestConfigGet",
		args,
		onSuccess,
		onFailure,
		false)
	} else {
		proxy.invoke("CiscoManifestConfigGet",
		args,
		callBackOverride,
		onFailure,
		false)
	}
}

MaduroSLL.Service.prototype.CiscoManifestConfigUpdate = function (vbCiscoManifestConfig, sessionID, callBackOverride) {
	/// <summary>
	/// Updates the manifest file configuration with the passed VBCiscoManifestConfig data contract.
	/// The manifest ID to update is given in the passed data.
	/// </summary>
	/// <param name="vbCiscoManifestConfig" type="MaduroDC.VBCiscoManifestConfig">VBCiscoManifestConfig data contract</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBCiscoManifestConfig">VBCiscoManifestConfig data contract with new row version; contains exception data upon error</returns>
	var args = {
		"vbCiscoManifestConfig": vbCiscoManifestConfig,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("CiscoManifestConfigUpdate",
		args,
		onSuccess,
		onFailure,
		false)
	} else {
		proxy.invoke("CiscoManifestConfigUpdate",
		args,
		callBackOverride,
		onFailure,
		false)
	}
}

MaduroSLL.Service.prototype.ThemeGetAll = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get all existing themes.
	/// </summary>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ThemeGetAll",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("ThemeGetAll",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.ThemeGetAllVB = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get all existing VBrick themes.
	/// </summary>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ThemeGetAllVB",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("ThemeGetAllVB",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.ThemeGetAllUser = function (sessionID, callBackOverride) {
	/// <summary>
	/// Get all existing user themes.
	/// </summary>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ThemeGetAllUser",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("ThemeGetAllUser",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.ThemeGetByID = function (themeID, sessionID, callBackOverride) {
	/// <summary>
	/// Get an existing theme by ThemeID.
	/// </summary>
	/// <param name="themeID" type="Number" integer="true">themeID</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBTheme">MaduroDC.VBTheme</returns>

	var args = {
		"themeID": themeID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ThemeGetByID",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("ThemeGetByID",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.ThemeAdd = function (theme, sessionID, callBackOverride) {
	/// <summary>
	/// Add a new theme to the system and distribute the theme file to all server instances.
	/// </summary>
	/// <param name="theme" type="MaduroDC.VBTheme">MaduroDC.VBTheme</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"theme": theme,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ThemeAdd",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("ThemeAdd",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.ThemeUpdate = function (theme, sessionID, callBackOverride) {
	/// <summary>
	/// Update an existing theme in the system and distribute the theme file to all server instances.
	/// </summary>
	/// <param name="theme" type="MaduroDC.VBTheme">MaduroDC.VBTheme</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"theme": theme,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ThemeUpdate",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("ThemeUpdate",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.ThemeClone = function (themeID, sessionID, callBackOverride) {
	/// <summary>
	/// Clone an existing theme and resources and add the cloned theme to the system and distribute to
	/// all server instances.
	/// </summary>
	/// <param name="themeID" type="Number" integer="true">themeID</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBTheme">MaduroDC.VBTheme</returns>

	var args = {
		"themeID": themeID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ThemeClone",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("ThemeClone",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.ThemeDelete = function (themeID, sessionID, callBackOverride) {
	/// <summary>
	/// Delete an existing theme from the system by ThemeID and delete the theme files from all server instances.
	/// </summary>
	/// <param name="themeID" type="Number" integer="true">themeID</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"themeID": themeID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ThemeDelete",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("ThemeDelete",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.ThemeGetActive = function (applicationID, callBackOverride) {
	/// <summary>
	/// Get the currently active theme.
	/// </summary>
	/// <param name="applicationID" type="String">applicationID</param>
	/// <returns type="MaduroDC.VBTheme">MaduroDC.VBTheme</returns>

	var args = {
		"applicationID": applicationID
	};
	if (!callBackOverride) {
		proxy.invoke("ThemeGetActive",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("ThemeGetActive",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.ThemeSetActive = function (themeID, sessionID, callBackOverride) {
	/// <summary>
	/// Set an existing theme as active by ThemeID.
	/// </summary>
	/// <param name="themeID" type="Number" integer="true">themeID</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"themeID": themeID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ThemeSetActive",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("ThemeSetActive",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.ThemeSynchronize = function (sessionID, callBackOverride) {
	/// <summary>
	/// Synchronize all themes to all servers in the system.
	/// </summary>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

	var args = {
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ThemeSynchronize",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("ThemeSynchronize",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}
MaduroSLL.Service.prototype.ThemeGetDefaultThumbnailGUIDByID = function (themeID, sessionID, callBackOverride) {
	/// <summary>
	/// Get the ResourceGUID for the default thumbnail file if it exists for the theme by ThemeID.
	/// </summary>
	/// <param name="themeID" type="Number" integer="true">themeID</param>
	/// <param name="sessionID" type="String">sessionID</param>
	/// <returns type="MaduroDC.VBStringData">MaduroDC.VBStringData</returns>

	var args = {
		"themeID": themeID,
		"sessionID": sessionID
	};
	if (!callBackOverride) {
		proxy.invoke("ThemeGetDefaultThumbnailGUIDByID",
			args,
			onSuccess,
			onFailure,
			false)
	} else {
		proxy.invoke("ThemeGetDefaultThumbnailGUIDByID",
			args,
			callBackOverride,
			onFailure,
			false)
	}
}

MaduroSLL.Service.prototype.LocalizedStringValueGetByClassIDAndLocaleID = function (sessionID, localizedStringClassID, localeID, callBackOverride) {
    /// <summary>
    /// Gets the value of a specific string class and locale
    /// </summary>
    /// <param name="sessionID" type="String">Session ID.</param>
    /// <param name="localizedStringClassID" type="String">LocalizedStringClassID.</param>
    /// <param name="localeID" type="String">LocaleID.</param>
    /// <returns type="MaduroDC.VBLocalizedStringValue">
    /// VBLocalizedStringValue
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>

    var args = {
        "sessionID": sessionID,
        "localizedStringClassID": localizedStringClassID,
        "localeID": localeID
    };
    if (!callBackOverride) {
        proxy.invoke("LocalizedStringValueGetByClassIDAndLocaleID",
			args,
			onSuccess,
			onFailure,
			false)
    } else {
        proxy.invoke("LocalizedStringValueGetByClassIDAndLocaleID",
			args,
			callBackOverride,
			onFailure,
			false)
    }
}



MaduroSLL.Service.prototype.LocalizedStringClassesGetByWidgetID = function (sessionID, widgetID, callBackOverride) {
    /// <summary>
    /// Gets a list of string classes for a given widgetid
    /// </summary>
    /// <param name="sessionID" type="String">Session ID.</param>
    /// <param name="widgetID" type="String">Widget ID.</param>
    /// <returns type="MaduroDC.VBList">
    /// VBList of stringclass objects
    /// If an exception is thrown, the .Exception property will be populated.

    var args = {
        "sessionID": sessionID,
        "widgetID": widgetID

    };
    if (!callBackOverride) {
        proxy.invoke("LocalizedStringClassesGetByWidgetID",
			args,
			onSuccess,
			onFailure,
			false)
    } else {
        proxy.invoke("LocalizedStringClassesGetByWidgetID",
			args,
			callBackOverride,
			onFailure,
			false)
    }
}


MaduroSLL.Service.prototype.WidgetsGetAll = function (sessionID, callBackOverride) {

    /// <summary>
    /// Get a list of all Widgets in the system
    /// </summary>
    /// <param name="sessionID">Unique session GUID.</param>
    /// <returns>The Widgets</returns>

    var args = {
        "sessionID": sessionID

    };
    if (!callBackOverride) {
        proxy.invoke("WidgetsGetAll",
			args,
			onSuccess,
			onFailure,
			false)
    } else {
        proxy.invoke("WidgetsGetAll",
			args,
			callBackOverride,
			onFailure,
			false)
    }
}


MaduroSLL.Service.prototype.UpdateLocalizedStringValue = function (sessionID, localizedStringValueID, localizedStringClassID, localeID, newStringValue, callBackOverride) {

    /// <summary>
    /// Updates a string value for a given id and locale
    /// </summary>
    /// <param name="sessionID" type="String">Session ID.</param>
    /// <param name="localizedStringValueID" type="String">LocalizedStringValueID.</param>
    /// <param name="localizedStringClassID" type="String">localizedStringClassID.</param>
    /// <param name="localeID" type="String">LocaleID.</param>
    /// <param name="newStringValue" type="String">newStringValue.</param>
    /// <returns type="MaduroDC.VBLocalizedStringValue">
    /// VBLocalizedStringValue
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "sessionID": sessionID,
        "localizedStringValueID": localizedStringValueID,
        "localizedStringClassID": localizedStringClassID,
        "localeID": localeID,
        "newStringValue": newStringValue

    };
    if (!callBackOverride) {
        proxy.invoke("UpdateLocalizedStringValue",
			args,
			onSuccess,
			onFailure,
			false)
    } else {
        proxy.invoke("UpdateLocalizedStringValue",
			args,
			callBackOverride,
			onFailure,
			false)
    }
}

//BS. New
MaduroSLL.Service.prototype.PresentationRecordedGetOffsetTimeActivity = function (presentationID, sessionID, callBackOverride) {
    /// <summary>
    /// Returns a VBList containing a list of VBPresentationActivity data contracts for a stored webcast and only activities that have a time offset will be returned.
    /// </summary>
    /// <param name="presentationID" type="Number" integer="true">Presentation ID.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList">
    /// VBList of VBPresentationActivity data contracts.
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "presentationID": presentationID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("PresentationRecordedGetOffsetTimeActivity",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("PresentationRecordedGetOffsetTimeActivity",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}

MaduroSLL.Service.prototype.PresentationRecordedUpdateOffsetTimeActivity = function (vbPresentationActivityList, sessionID, callBackOverride) {
    /// <summary>
    /// Returns a VBList containing a list of VBPresentationActivity data contracts for a stored webcast and only activities that have a time offset will be returned.
    /// </summary>
    /// <param name="presentationID" type="Number" integer="true">Presentation ID.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList">
    /// VBList of VBPresentationActivity data contracts.
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "vbPresentationActivityList": vbPresentationActivityList,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("PresentationRecordedUpdateOffsetTimeActivity",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("PresentationRecordedUpdateOffsetTimeActivity",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}

MaduroSLL.Service.prototype.PresentationSendQAListAsEmail = function (presentationID, presentationSessionLiveID, presenterID, moderatorID, sessionID, callBackOverride) {
    /// <summary>
    /// Returns a VBList containing a list of VBPresentationActivity data contracts for a stored webcast and only activities that have a time offset will be returned.
    /// </summary>
    /// <param name="presentationID" type="Number" integer="true">Presentation ID.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList">
    /// VBList of VBPresentationActivity data contracts.
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "presentationID": presentationID,
        "presentationSessionLiveID": presentationSessionLiveID,
        "presenterID": presenterID,
        "moderatorID": moderatorID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("PresentationSendQAListAsEmail",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("PresentationSendQAListAsEmail",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}

MaduroSLL.Service.prototype.TranscodingPresetListGet = function (enabledOnly, getDetailInfo, sessionID, callBackOverride) {
    /// <summary>
    /// Get the transcoding preset list
    /// </summary>
    /// <param name="enabledOnly" type="bool">Whether to retrieve enabled preset only</param>
    /// <param name="getDetailInfo" type="bool">Whether to get the detail info such as the parsed preset xml data</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList">
    /// VBList data contract
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
    	"enabledOnly": enabledOnly,
    	"getDetailInfo": getDetailInfo,
      	"sessionID": sessionID
    };
    if (!callBackOverride) {
    	proxy.invoke("TranscodingPresetListGet",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
    	proxy.invoke("TranscodingPresetListGet",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}

   MaduroSLL.Service.prototype.TranscodingPresetDuplicate = function (sourcePresetID, vbPreset, sessionID, callBackOverride) {
   	/// <summary>
	/// Duplicate an existing transcoding preset
	/// </summary>
	/// <param name="sourcePresetID" type="int">ID of an existing preset </param>
	/// <param name="vbPreset" type="VBTranscodingPreset">New transcoding preset data contract</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBTranscodingPreset">
	/// VBTranscodingPreset data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
   	var args = {
		"sourcePresetID": sourcePresetID,
   		"vbPreset": vbPreset,
   		"sessionID": sessionID
   	};
   	if (!callBackOverride) {
   		proxy.invoke("TranscodingPresetDuplicate",
		args,
		onSuccess,
		onFailure,
		false)
   	} else {
   		proxy.invoke("TranscodingPresetDuplicate",
		args,
		callBackOverride,
		onFailure,
		false)
   	}
}

MaduroSLL.Service.prototype.TranscodingPresetUpdate = function (vbPreset, sessionID, callBackOverride) {
   	/// <summary>
   	/// Update transcoding preset
   	/// </summary>
   	/// <param name="vbPreset" type="VBTranscodingPreset">Transcoding preset data contract</param>
   	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBTranscodingPreset">
	/// VBTranscodingPreset data contract
   	/// If an exception is thrown, the .Exception property will be populated.
   	/// </returns>
   	var args = {
   		"vbPreset": vbPreset,
   		"sessionID": sessionID
   	};
   	if (!callBackOverride) {
   		proxy.invoke("TranscodingPresetUpdate",
		args,
		onSuccess,
		onFailure,
		false)
   	} else {
   		proxy.invoke("TranscodingPresetUpdate",
		args,
		callBackOverride,
		onFailure,
		false)
   	}
}

MaduroSLL.Service.prototype.TranscodingPresetDelete = function (presetID, sessionID, callBackOverride) {
   	/// <summary>
   	/// Delete transcoding preset
   	/// </summary>
	/// <param name="presetID" type="int">presetID</param>
   	/// <param name="sessionID" type="String">Unique session GUID.</param>
   	/// <returns type="MaduroDC.VBList">
   	/// VBList data contract
   	/// If an exception is thrown, the .Exception property will be populated.
   	/// </returns>
   	var args = {
   		"presetID": presetID,
   		"sessionID": sessionID
   	};
   	if (!callBackOverride) {
   		proxy.invoke("TranscodingPresetDelete",
		args,
		onSuccess,
		onFailure,
		false)
   	} else {
   		proxy.invoke("TranscodingPresetDelete",
		args,
		callBackOverride,
		onFailure,
		false)
   	}
}

MaduroSLL.Service.prototype.TranscodingStreamInfoAdd = function (presetID, streamInfo, sessionID, callBackOverride) {
   	/// <summary>
   	/// Add a new stream to the preset
   	/// </summary>
   	/// <param name="presetID" type="int">presetID</param>
   	/// <param name="streamInfo" type="VBTranscodingStreamInfo">streamInfo</param>
   	/// <param name="sessionID" type="String">Unique session GUID.</param>
   	/// <returns type="MaduroDC.VBList">
   	/// VBList data contract
   	/// If an exception is thrown, the .Exception property will be populated.
   	/// </returns>
   	var args = {
   		"presetID": presetID,
		"streamInfo": streamInfo,
   		"sessionID": sessionID
   	};
   	if (!callBackOverride) {
   		proxy.invoke("TranscodingStreamInfoAdd",
		args,
		onSuccess,
		onFailure,
		false)
   	} else {
   		proxy.invoke("TranscodingStreamInfoAdd",
		args,
		callBackOverride,
		onFailure,
		false)
   	}
}

MaduroSLL.Service.prototype.TranscodingStreamInfoUpdate = function (presetID, streamInfoIndex, streamInfo, sessionID, callBackOverride) {
   	/// <summary>
   	/// Update a stream info for the preset
   	/// </summary>
   	/// <param name="presetID" type="int">presetID</param>
   	/// <param name="streamInfoIndex" type="int">Stream info index</param>
   	/// <param name="streamInfo" type="VBTranscodingStreamInfo">streamInfo</param>
   	/// <param name="sessionID" type="String">Unique session GUID.</param>
   	/// <returns type="MaduroDC.VBList">
   	/// VBList data contract
   	/// If an exception is thrown, the .Exception property will be populated.
   	/// </returns>
   	var args = {
   		"presetID": presetID,
		"streamInfoIndex": streamInfoIndex,
   		"streamInfo": streamInfo,
   		"sessionID": sessionID
   	};
   	if (!callBackOverride) {
   		proxy.invoke("TranscodingStreamInfoUpdate",
		args,
		onSuccess,
		onFailure,
		false)
   	} else {
   		proxy.invoke("TranscodingStreamInfoUpdate",
		args,
		callBackOverride,
		onFailure,
		false)
   	}
}

MaduroSLL.Service.prototype.TranscodingStreamInfoDelete = function (presetID, streamInfoIndex, sessionID, callBackOverride) {
   	/// <summary>
   	/// Delete a stream info from the preset
   	/// </summary>
   	/// <param name="presetID" type="int">presetID</param>
   	/// <param name="streamInfoIndex" type="int">Stream info index</param>
   	/// <param name="sessionID" type="String">Unique session GUID.</param>
   	/// <returns type="MaduroDC.VBList">
   	/// VBList data contract
   	/// If an exception is thrown, the .Exception property will be populated.
   	/// </returns>
   	var args = {
   		"presetID": presetID,
   		"streamInfoIndex": streamInfoIndex,
   		"sessionID": sessionID
   	};
   	if (!callBackOverride) {
   		proxy.invoke("TranscodingStreamInfoDelete",
		args,
		onSuccess,
		onFailure,
		false)
   	} else {
   		proxy.invoke("TranscodingStreamInfoDelete",
		args,
		callBackOverride,
		onFailure,
		false)
   	}
}

MaduroSLL.Service.prototype.TranscodingProfileListGet = function (enabledOnly, listPreset, sessionID, callBackOverride) {
    /// <summary>
	/// Get the transcoding profile list
	/// </summary>
	/// <param name="enabledOnly" type="bool">Whether to retrieve enabled profiles only</param>
	/// <param name="listPreset" type="bool">Whether to list preset</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBList">
	/// VBList data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
    var args = {
    	"enabledOnly": enabledOnly,
		"listPreset": listPreset,
      	"sessionID": sessionID
    };
    if (!callBackOverride) {
    	proxy.invoke("TranscodingProfileListGet",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
    	proxy.invoke("TranscodingProfileListGet",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}

MaduroSLL.Service.prototype.TranscodingProfileAdd = function (newProfile, sessionID, callBackOverride) {
   	/// <summary>
   	/// Add new transcoding profile
   	/// </summary>
   	/// <param name="newProfile" type="VBTranscodingProfile">New transcoding profile data contract</param>
   	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBTranscodingProfile">
	/// VBTranscodingProfile data contract
   	/// If an exception is thrown, the .Exception property will be populated.
   	/// </returns>
   	var args = {
   		"newProfile": newProfile,
   		"sessionID": sessionID
   	};
   	if (!callBackOverride) {
   		proxy.invoke("TranscodingProfileAdd",
		args,
		onSuccess,
		onFailure,
		false)
   	} else {
   		proxy.invoke("TranscodingProfileAdd",
		args,
		callBackOverride,
		onFailure,
		false)
   	}
}

MaduroSLL.Service.prototype.TranscodingProfileUpdate = function (vbProfile, sessionID, callBackOverride) {
   	/// <summary>
   	/// Update transcoding profile
   	/// </summary>
   	/// <param name="vbProfile" type="VBTranscodingProfile">Transcoding profile data contract</param>
   	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBTranscodingProfile">
	/// VBTranscodingProfile data contract
   	/// If an exception is thrown, the .Exception property will be populated.
   	/// </returns>
   	var args = {
   		"vbProfile": vbProfile,
   		"sessionID": sessionID
   	};
   	if (!callBackOverride) {
   		proxy.invoke("TranscodingProfileUpdate",
		args,
		onSuccess,
		onFailure,
		false)
   	} else {
   		proxy.invoke("TranscodingProfileUpdate",
		args,
		callBackOverride,
		onFailure,
		false)
   	}
}

MaduroSLL.Service.prototype.TranscodingProfileDelete = function (profileID, sessionID, callBackOverride) {
   	/// <summary>
   	/// Delete transcoding profile
   	/// </summary>
   	/// <param name="profileID" type="int">Transcoding profile ID</param>
   	/// <param name="sessionID" type="String">Unique session GUID.</param>
   	/// <returns type="MaduroDC.VBList">
   	/// VBList data contract
   	/// If an exception is thrown, the .Exception property will be populated.
   	/// </returns>
   	var args = {
   		"profileID": profileID,
   		"sessionID": sessionID
   	};
   	if (!callBackOverride) {
   		proxy.invoke("TranscodingProfileDelete",
		args,
		onSuccess,
		onFailure,
		false)
   	} else {
   		proxy.invoke("TranscodingProfileDelete",
		args,
		callBackOverride,
		onFailure,
		false)
   	}
}

MaduroSLL.Service.prototype.TranscodingProfilesSortOrder = function (profileIDs, sessionID, callBackOverride) {
   	/// <summary>
   	/// Sort transcoding profile list
   	/// </summary>
   	/// <param name="profileIDs" type="List">List of transcoding profile IDs in sorted order</param>
   	/// <param name="sessionID" type="String">Unique session GUID.</param>
   	/// <returns type="MaduroDC.VBList">
   	/// VBList data contract
   	/// If an exception is thrown, the .Exception property will be populated.
   	/// </returns>
   	var args = {
   		"profileIDs": profileIDs,
   		"sessionID": sessionID
   	};
   	if (!callBackOverride) {
   		proxy.invoke("TranscodingProfilesSortOrder",
		args,
		onSuccess,
		onFailure,
		false)
   	} else {
   		proxy.invoke("TranscodingProfilesSortOrder",
		args,
		callBackOverride,
		onFailure,
		false)
   	}
}

MaduroSLL.Service.prototype.TranscodingProfileDefaultsDataGet = function (sessionID, callBackOverride) {

   	/// <summary>
   	/// Get data for Transcoding Profile Default widget
   	/// </summary>
   	/// <param name="sessionID" type="String">Unique session GUID.</param>
   	/// <returns type="MaduroDC.VBTranscodingProfileDefaultsData">
   	/// VBTranscodingProfileDefaultsData data contract
   	/// If an exception is thrown, the .Exception property will be populated.
   	/// </returns>
   	var args = {
   		"sessionID": sessionID
   	};
   	if (!callBackOverride) {
   		proxy.invoke("TranscodingProfileDefaultsDataGet",
		args,
		onSuccess,
		onFailure,
		false)
   	} else {
   		proxy.invoke("TranscodingProfileDefaultsDataGet",
		args,
		callBackOverride,
		onFailure,
		false)
   	}
}

MaduroSLL.Service.prototype.TranscodingProfileDefaultsUpdate = function (profileDefaults, sessionID, callBackOverride) {

   	/// <summary>
   	/// Update Transcoding Profile Defaults
   	/// </summary>
   	/// <param name="profileDefaults" type="List">Transcoding profile defaults</param>
   	/// <param name="sessionID" type="String">Unique session GUID.</param>
   	/// <returns type="MaduroDC.VBTranscodingProfileDefaultsData">
   	/// VBTranscodingProfileDefaultsData data contract
   	/// If an exception is thrown, the .Exception property will be populated.
   	/// </returns>
   	var args = {
   		"profileDefaults": profileDefaults,
   		"sessionID": sessionID
   	};
   	if (!callBackOverride) {
   		proxy.invoke("TranscodingProfileDefaultsUpdate",
		args,
		onSuccess,
		onFailure,
		false)
   	} else {
   		proxy.invoke("TranscodingProfileDefaultsUpdate",
		args,
		callBackOverride,
		onFailure,
		false)
   	}
}

MaduroSLL.Service.prototype.ContentInstancesWidgetConfigDataGet = function (sessionID, callBackOverride) {
   	/// <summary>
   	/// Get the config data for content instances widget
   	/// </summary>
   	/// <param name="sessionID">Unique session GUID.</param>
   	/// <returns type="MaduroDC.VBContentInstancesWidgetConfigData">
   	/// VBContentInstancesWidgetConfigData data contract
   	/// If an exception is thrown, the .Exception property will be populated.
   	/// </returns>
   	var args = {
   		"sessionID": sessionID
   	};
   	if (!callBackOverride) {
   		proxy.invoke("ContentInstancesWidgetConfigDataGet",
		args,
		onSuccess,
		onFailure,
		false)
   	} else {
   		proxy.invoke("ContentInstancesWidgetConfigDataGet",
		args,
		callBackOverride,
		onFailure,
		false)
   	}
}

MaduroSLL.Service.prototype.TranscodeContentInstance = function (contentID, contentInstanceID, skipDuplicateEncodingTypeCheck, sessionID, callBackOverride) {
	/// <summary>
	/// Transcode an existing video stored on a VoD server.
	/// </summary>
	/// <param name="contentID" type="int">Content ID</param>
	/// <param name="contentInstanceID" type="int">Content instance ID</param>
	/// <param name="skipDuplicateEncodingTypeCheck">Whether to skip the check for duplicate encoding types.</param>
	/// <param name="sessionID" type="String">Unique session GUID.</param>
	/// <returns type="MaduroDC.VBBoolData">
	/// VBBoolData data contract
	/// If an exception is thrown, the .Exception property will be populated.
	/// </returns>
	var args = {
		"contentID": contentID,
		"contentInstanceID": contentInstanceID,
		"skipDuplicateEncodingTypeCheck": skipDuplicateEncodingTypeCheck,
   		"sessionID": sessionID
   	};
   	if (!callBackOverride) {
   		proxy.invoke("TranscodeContentInstance",
		args,
		onSuccess,
		onFailure,
		false)
   	} else {
   		proxy.invoke("TranscodeContentInstance",
		args,
		callBackOverride,
		onFailure,
		false)
   	}
}


MaduroSLL.Service.prototype.GetContentApprovalStateSteps = function (contentID, sessionID, callBackOverride) {
    /// <summary>
    /// This method is used by the metadata widget. This method returns all contentinstances for a piece
    /// of content regardless of Zones, client  profile, etc.
    /// This method can only be called if the user is a Content Administrator or has Admin rights to the content or is the content owner
    /// </summary>
    /// <param name="contentID">ContentID</param>
    /// <param name="sessionID">Unique SessionID</param>
    /// <returns>VBContentList</returns>

    var args = {
        "contentID": contentID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("GetContentApprovalStateSteps",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("GetContentApprovalStateSteps",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}

MaduroSLL.Service.prototype.GetCurrentWorkflowStep = function (contentID, sessionID, callBackOverride) {
    /// <summary>
    /// This method is used by the metadata widget. This method returns all contentinstances for a piece
    /// of content regardless of Zones, client  profile, etc.
    /// This method can only be called if the user is a Content Administrator or has Admin rights to the content or is the content owner
    /// </summary>
    /// <param name="contentID">ContentID</param>
    /// <param name="sessionID">Unique SessionID</param>
    /// <returns>VBContentList</returns>

    var args = {
        "contentID": contentID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("GetCurrentWorkflowStep",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("GetCurrentWorkflowStep",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}
MaduroSLL.Service.prototype.SetMultiContentApprovalStatus = function (contentID, newWorkflowID, enumWorkflowActionId, comments, sessionID, callBackOverride) {

    var args = {
        "contentID": contentID,
        "newWorkflowID": newWorkflowID,
        "enumWorkflowActionId": enumWorkflowActionId,
        "comments": comments,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("SetMultiContentApprovalStatus",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("SetMultiContentApprovalStatus",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}


MaduroSLL.Service.prototype.WorkFlowGetAll = function (sessionID, callBackOverride) {
    /// <summary>
    /// Gets all workflows
    /// </summary>
    /// <param name="sessionID">Session ID</param>
    /// <returns></returns>
    var args = {
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("WorkFlowGetAll",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("WorkFlowGetAll",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}

MaduroSLL.Service.prototype.WorkflowGet = function (workflowID, sessionID, callBackOverride) {
    /// <summary>
    /// Gets workflow details by workflowID
    /// </summary>
    /// <param name="workflowID">Workflow ID</param>
    /// <param name="sessionID">Session ID</param>
    /// <returns></returns>
    var args = {
        "workflowID" : workflowID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("WorkFlowGet",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("WorkFlowGet",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}

MaduroSLL.Service.prototype.WorkFlowStepsGetAll = function (workflowID, sessionID, callBackOverride) {
    /// <summary>
    /// Gets workflow steps by workflowID
    /// </summary>
    /// <param name="workflowID">Workflow ID</param>
    /// <param name="sessionID">Session ID</param>
    /// <returns></returns>
    var args = {
        "workflowID": workflowID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("WorkFlowStepsGetAll",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("WorkFlowStepsGetAll",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}

MaduroSLL.Service.prototype.WorkFlowStepGet = function (workflowStepID, sessionID, callBackOverride) {
    /// <summary>
    /// Gets workflow step by workflow StepID
    /// </summary>
    /// <param name="workflowStepID">WorkflowStep ID</param>
    /// <param name="sessionID">Session ID</param>
    /// <returns></returns>
    var args = {
        "workflowStepID": workflowStepID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("WorkFlowStepGet",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("WorkFlowStepGet",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}

MaduroSLL.Service.prototype.WorkflowCreate = function (vbWorkflow, sessionID, callBackOverride) {
    /// <summary>
    /// This method will create a new approval workflow
    /// </summary>
    /// <param name="vbWorkflow">Workflow</param>
    /// <param name="sessionID">Session ID</param>
    /// <returns>WorkflowID of the new workflow</returns>
    var args = {
        "vbWorkflow": vbWorkflow,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("WorkflowCreate",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("WorkflowCreate",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}

MaduroSLL.Service.prototype.WorkflowEdit = function (vbWorkflow, sessionID, callBackOverride) {
    /// <summary>
    /// Method to edit existing workflow
    /// </summary>
    /// <param name="vbWorkflow">Workflow</param>
    /// <param name="sessionID">Session ID</param>
    /// <returns>WorkflowID of the new workflow</returns>
    var args = {
        "vbWorkflow": vbWorkflow,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("WorkflowEdit",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("WorkflowEdit",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}

MaduroSLL.Service.prototype.WorkflowDelete = function (workflowID, sessionID, callBackOverride) {
    /// <summary>
    /// Method to delete an existing workflow
    /// </summary>
    /// <param name="workflowID">Workflow ID</param>
    /// <param name="sessionID">Session ID</param>
    /// <returns></returns>
    var args = {
        "workflowID": workflowID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("WorkflowDelete",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("WorkflowDelete",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}

MaduroSLL.Service.prototype.WorkflowStepsEdit = function (workflowID, workflowSteps, sessionID, callBackOverride) {
    /// <summary>
    /// Method to Edit Steps of an existing workflow
    /// </summary>
    /// <param name="workflowID">Workflow ID</param>
    /// <param name="steps">Workflow Steps</param>
    /// <param name="sessionID">Session ID</param>
    /// <returns></returns>
    var args = {
        "workflowID": workflowID,
        "steps" : workflowSteps,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("WorkflowStepsEdit",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("WorkflowStepsEdit",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}


MaduroSLL.Service.prototype.WorkflowStepAdd = function (workflowID, workflowStep, sessionID, callBackOverride) {
    /// <summary>
    /// Method to Edit Steps of an existing workflow
    /// </summary>
    /// <param name="workflowID">Workflow ID</param>
    /// <param name="steps">Workflow Steps</param>
    /// <param name="sessionID">Session ID</param>
    /// <returns></returns>
    var args = {
        "workflowID": workflowID,
        "step": workflowStep,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("WorkflowStepAdd",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("WorkflowStepAdd",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}


MaduroSLL.Service.prototype.WorkflowStepEdit = function (workflowID, workflowStep, sessionID, callBackOverride) {
    /// <summary>
    /// Method to Edit Steps of an existing workflow
    /// </summary>
    /// <param name="workflowID">Workflow ID</param>
    /// <param name="steps">Workflow Steps</param>
    /// <param name="sessionID">Session ID</param>
    /// <returns></returns>
    var args = {
        "workflowID": workflowID,
        "step": workflowStep,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("WorkflowStepEdit",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("WorkflowStepEdit",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}


MaduroSLL.Service.prototype.WorkflowEmailTemplateGet = function (workflowID, enumWorkflowEmailTemplateTypeID, localeID, sessionID, callBackOverride) {
    var args = {
        "workflowID": workflowID,
        "enumWorkflowEmailTemplateTypeID": enumWorkflowEmailTemplateTypeID,
        "localeID": localeID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("WorkflowEmailTemplateGet",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("WorkflowEmailTemplateGet",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}

MaduroSLL.Service.prototype.WorkflowEmailTemplateSave = function (workflowID, workflowEmailTemplate, sessionID, callBackOverride) {
    var args = {
        "workflowID": workflowID,
        "workflowEmailTemplate": workflowEmailTemplate,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("WorkflowEmailTemplateSave",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("WorkflowEmailTemplateSave",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}

MaduroSLL.Service.prototype.WorkflowEmailTemplateTypesGetAll = function (sessionID, callBackOverride) {
    var args = {
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("WorkflowEmailTemplateTypesGetAll",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("WorkflowEmailTemplateTypesGetAll",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}


MaduroSLL.Service.prototype.WorkflowStepDelete = function (workflowStepID, sessionID, callBackOverride) {
    /// <summary>
    /// Method to delete an existing workflow
    /// </summary>
    /// <param name="workflowID">Workflow ID</param>
    /// <param name="sessionID">Session ID</param>
    /// <returns></returns>
    var args = {
        "workflowStepID": workflowStepID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("WorkflowStepDelete",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("WorkflowStepDelete",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}

MaduroSLL.Service.prototype.ContentAddFinish = function (contentID, sessionID, callBackOverride) {
    /// <summary>
    /// Finish Add Content
    /// </summary>
    /// <param name="contentID">contentID</param>
    /// <param name="sessionID">Session ID</param>
    /// <returns></returns>
    var args = {
        "contentID": contentID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("ContentAddFinish",
		args,
		onSuccess,
		onFailure,
		false)
    } else {
        proxy.invoke("ContentAddFinish",
		args,
		callBackOverride,
		onFailure,
		false)
    }
}

MaduroSLL.Service.prototype.GenerateContentApprovalReportData = function (sessionID, approvalState, activityStartDate, activityEndDate, callBackOverride) {
    /// <summary>
    /// Gets the content approval report data based on the approval state
    /// </summary>
    /// <param name="sessionID">Session ID</param>
    /// <param name="approvalState">approvalStateID</param>
    /// <param name="activityStartDate">begin range</param>
    /// <param name="activityEndDate">end range</param>
    /// <returns></returns>

    var args = {
        "sessionID": sessionID,
        "approvalState": approvalState,
        "activityStartDate": activityStartDate,
        "activityEndDate": activityEndDate
    };

    if (!callBackOverride) {
        proxy.invoke("GenerateContentApprovalReportData",
        args,
        onSuccess,
        onFailure,
        false)
    } else {
        proxy.invoke("GenerateContentApprovalReportData",
        args,
        callBackOverride,
        onFailure,
        false)
    }
}

MaduroSLL.Service.prototype.GenerateContentApprovalHistoryData = function (sessionID, contentID, activityStartDate, activityEndDate, callBackOverride) {
    /// <summary>
    /// Get historical data of content.
    /// </summary>
    /// <param name="sessionID">Session ID</param>
    /// <param name="contentID">Content ID</param>
    /// <param name="activityStartDate">begin range</param>
    /// <param name="activityEndDate">end range</param>
    /// <returns></returns>

    var args = {
        "sessionID": sessionID,
        "contentID": contentID,
        "activityStartDate": activityStartDate,
        "activityEndDate": activityEndDate
    };

    if (!callBackOverride) {
        proxy.invoke("GenerateContentApprovalHistoryData",
        args,
        onSuccess,
        onFailure,
        false)
    } else {
        proxy.invoke("GenerateContentApprovalHistoryData",
        args,
        callBackOverride,
        onFailure,
        false)
    }
}

MaduroSLL.Service.prototype.UserEmailPreferencesGetAll = function (userID, sessionID, callBackOverride) {
    /// <summary>
    /// Get the saved email preferences of the User.
    /// </summary>
    /// <param name="userID">user id</param>
    /// <param name="sessionID">session id</param>
    /// <returns>returns email preference</returns>

    var args = {
        "userID": userID,
        "sessionID": sessionID
    };

    if (!callBackOverride) {
        proxy.invoke("UserEmailPreferencesGetAll",
        args,
        onSuccess,
        onFailure,
        false)
    } else {
        proxy.invoke("UserEmailPreferencesGetAll",
        args,
        callBackOverride,
        onFailure,
        false)
    }
}

MaduroSLL.Service.prototype.UserEmailPreferencesSave = function (userID, sessionID, vbUserEmailPreferences, callBackOverride) {
    /// <summary>
    /// Save the email preference of the User.
    /// </summary>
    /// <param name="userID">user id</param>
    /// <param name="sessionID">seesion id</param>
    /// <param name="vbUserEmailPreferences">preference of the user.</param>
    /// <returns>return VBVoidData</returns>

    var args = {
        "userID": userID,
        "sessionID": sessionID,
        "vbUserEmailPreferences": vbUserEmailPreferences
    };

    if (!callBackOverride) {
        proxy.invoke("UserEmailPreferencesSave",
        args,
        onSuccess,
        onFailure,
        false)
    } else {
        proxy.invoke("UserEmailPreferencesSave",
        args,
        callBackOverride,
        onFailure,
        false)
    }
}

MaduroSLL.Service.prototype.WorkflowSetDefault = function (workflowID, sessionID, callBackOverride) {
    /// <summary>
    /// Sets the default workflow.
    /// </summary>
    /// <param name="workflowID">workflowID</param>
    /// <param name="sessionID">seesion id</param>
    /// <returns>return VBVoidData</returns>
    var args = {
        "workflowID": workflowID,
        "sessionID": sessionID
    };

    if (!callBackOverride) {
        proxy.invoke("WorkflowSetDefault",
        args,
        onSuccess,
        onFailure,
        false)
    } else {
        proxy.invoke("WorkflowSetDefault",
        args,
        callBackOverride,
        onFailure,
        false)
    }
}


MaduroSLL.Service.prototype.UsersGetNonDefaultPagedByFullName = function (searchterm, pageNumber, pageSize, sessionID, callBackOverride) {
    /// <summary> Returns a VBList containing a list of VBGroup data contracts for ALL groups defined in the system. </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList"> VBList of VBGroup data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

    var args = {
        "searchterm": searchterm,
        "pageNumber": pageNumber,
        "pageSize": pageSize,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EmbedUsersGetPagedByFullName",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("UsersGetNonDefaultPagedByFullName",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EmbedUsersGetPagedByFullName",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("UsersGetNonDefaultPagedByFullName",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}

MaduroSLL.Service.prototype.InActiveUserUpdate = function (vbUser, sessionID, sessionCheck, callBackOverride) {
    /// <summary> Updates existing user. </summary>
    /// <param name="vbUser" type="MaduroDC.VBUser">VBUser data contract of inactive user to update.</param>
    /// <param name="sessionID" type="String">Session ID</param>
    /// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

    var args = {
        "vbUser": vbUser,
        "sessionID": sessionID,
        "sessionCheck": sessionCheck
    };
    if (!callBackOverride) {
        proxy.invoke("InActiveUserUpdate",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("InActiveUserUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.InActiveUsersGetPaged = function (searchterm, pageNumber, pageSize, sessionID, callBackOverride) {
    /// <summary> Returns a VBList containing a list of VBGroup data contracts for ALL InActive Users defined in the system. </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList"> VBList of VBGroup data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

    var args = {
        "searchterm": searchterm,
        "pageNumber": pageNumber,
        "pageSize": pageSize,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EmbedUsersGetPaged",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("InActiveUsersGetPaged",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EmbedUsersGetPaged",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("InActiveUsersGetPaged",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}

MaduroSLL.Service.prototype.RequiredContentGetPaged = function (searchterm, pageNumber, pageSize, sessionID, callBackOverride) {

    var args = {
        "searchtext": searchterm,
        "pageNumber": pageNumber,
        "pageSize": pageSize,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("RequiredContentGetPaged",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("RequiredContentGetPaged",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("RequiredContentGetPaged",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("RequiredContentGetPaged",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}

MaduroSLL.Service.prototype.RecommendedContentGetPaged = function (searchterm, pageNumber, pageSize, sessionID, callBackOverride) {

    var args = {
        "searchtext": searchterm,
        "pageNumber": pageNumber,
        "pageSize": pageSize,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("RecommendedContentGetPaged",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("RecommendedContentGetPaged",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("RecommendedContentGetPaged",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("RecommendedContentGetPaged",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}

MaduroSLL.Service.prototype.UnRequireContent = function (userGroup, userID, sessionID, callBackOverride) {
    var args = {
        "usersList": userGroup,
        "userID": userID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("UnRequireContent",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("UnRequireContent",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("UnRequireContent",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("UnRequireContent",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}

MaduroSLL.Service.prototype.GetAllScriptDevices = function (sessionID, callBackOverride) {
    var args = {
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("GetAllScriptDevices",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("GetAllScriptDevices",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("GetAllScriptDevices",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("GetAllScriptDevices",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}


MaduroSLL.Service.prototype.GetScriptDevice = function (scriptDeviceID, sessionID, callBackOverride) {
    var args = {
        "scriptDeviceID" : scriptDeviceID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("GetScriptDevice",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("GetScriptDevice",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("GetScriptDevice",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("GetScriptDevice",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}


MaduroSLL.Service.prototype.DeleteScriptDevice = function (scriptDeviceID, sessionID, callBackOverride) {
    var args = {
        "scriptDeviceID": scriptDeviceID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("DeleteScriptDevice",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("DeleteScriptDevice",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("DeleteScriptDevice",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("DeleteScriptDevice",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}

MaduroSLL.Service.prototype.AddScriptDevice = function (scriptDevice, sessionID, callBackOverride) {
    var args = {
        "scriptDevice": scriptDevice,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("AddScriptDevice",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("AddScriptDevice",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("AddScriptDevice",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("AddScriptDevice",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}

MaduroSLL.Service.prototype.EditScriptDevice = function (scriptDevice, sessionID, callBackOverride) {
    var args = {
        "scriptDevice": scriptDevice,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EditScriptDevice",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("EditScriptDevice",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EditScriptDevice",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("EditScriptDevice",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}

MaduroSLL.Service.prototype.GetAllScripts = function (sessionID, callBackOverride) {
    var args = {
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("GetAllScripts",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("GetAllScripts",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("GetAllScripts",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("GetAllScripts",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}

MaduroSLL.Service.prototype.GetScriptDeviceTypes = function (sessionID, callBackOverride) {
    var args = {
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("GetScriptDeviceTypes",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("GetScriptDeviceTypes",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("GetScriptDeviceTypes",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("GetScriptDeviceTypes",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}


MaduroSLL.Service.prototype.DeleteScript = function (scriptID, sessionID, callBackOverride) {
    var args = {
        "scriptID": scriptID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("DeleteScript",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("DeleteScript",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("DeleteScript",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("DeleteScript",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}


MaduroSLL.Service.prototype.GetScript = function (scriptID, sessionID, callBackOverride) {
    var args = {
        "scriptID": scriptID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("GetScript",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("GetScript",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("GetScript",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("GetScript",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}

MaduroSLL.Service.prototype.AddScript = function (script, sessionID, callBackOverride) {
    var args = {
        "script": script,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("AddScript",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("AddScript",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("AddScript",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("AddScript",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}

MaduroSLL.Service.prototype.EditScript = function (script, sessionID, callBackOverride) {
    var args = {
        "script": script,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EditScript",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("EditScript",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("EditScript",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("EditScript",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}


MaduroSLL.Service.prototype.GetAllAvailableDevices = function (deviceTypeSelected, sessionID, callBackOverride) {
    var args = {
        "enumScriptDeviceTypeID": deviceTypeSelected,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("GetAllAvailableDevices",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("GetAllAvailableDevices",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("GetAllAvailableDevices",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("GetAllAvailableDevices",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}

MaduroSLL.Service.prototype.GetAllParams = function (deviceTypeSelected, sessionID, callBackOverride) {
    var args = {
        "enumScriptDeviceTypeID": deviceTypeSelected,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("GetAllParams",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("GetAllParams",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("GetAllParams",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("GetAllParams",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}

MaduroSLL.Service.prototype.DeviceGetAllControlDevices = function (sessionID, callBackOverride) {
    var args = {
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("DeviceGetAllControlDevices",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("DeviceGetAllControlDevices",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("DeviceGetAllControlDevices",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("DeviceGetAllControlDevices",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}

MaduroSLL.Service.prototype.DeviceGetControlDevice = function (deviceID, sessionID, callBackOverride) {
    var args = {
        "deviceID": deviceID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("DeviceGetControlDevice",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("DeviceGetControlDevice",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("DeviceGetControlDevice",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("DeviceGetControlDevice",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}


MaduroSLL.Service.prototype.DeviceGetAllSupplementalDevices = function (sessionID, callBackOverride) {
    /// <summary>
    /// Returns all the Supplemental devices in the system.
    /// </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList">
    /// VBList of VBSupplementalDevices data contracts.
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("DeviceGetAllSupplementalDevices",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("DeviceGetAllSupplementalDevices",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.DeviceGetAllSources = function (sessionID, selectedSourceID, callBackOverride) {
    /// <summary>
    /// Returns all the sources for control device in the system.
    /// </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBSource">
    /// VBList of VBSource data contracts.
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "sessionID": sessionID,
        "selectedSourceID" : selectedSourceID
    };
    if (!callBackOverride) {
        proxy.invoke("DeviceGetAllSources",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("DeviceGetAllSources",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
//MaduroSLL.Service.prototype.DeviceControlDeviceAddOrUpdate = function (vbDevice, sessionID, callBackOverride) {
//    /// <summary>
//    /// Adds or updates the control device in the system.
//    /// </summary>
//    /// <param name="device" type="MaduroDC.VBControlDevice">VBControlDevice.</param>
//    /// <param name="sessionID" type="String">Unique session GUID.</param>
//    /// <returns type="MaduroDC.VBVoidData">
//    /// If an exception is thrown, the .Exception property will be populated.
//    /// </returns>
//    var args = {
//        "device": vbDevice,
//        "sessionID": sessionID
//    };
//    if (!callBackOverride) {
//        proxy.invoke("DeviceControlDeviceAddOrUpdate",
//	args,
//	onSuccess,
//	onFailure,
//	false)
//    } else {
//        proxy.invoke("DeviceControlDeviceAddOrUpdate",
//	args,
//	callBackOverride,
//	onFailure,
//	false)
//    }
//}
MaduroSLL.Service.prototype.DeviceControlDeviceAddOrUpdate = function (vbDevice, sessionID, callBackOverride) {
    var args = {
        "device": vbDevice,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("DeviceControlDeviceAddOrUpdate",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("DeviceControlDeviceAddOrUpdate",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("DeviceControlDeviceAddOrUpdate",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("DeviceControlDeviceAddOrUpdate",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
}
MaduroSLL.Service.prototype.DeviceControlDeviceDelete = function (deviceID, sessionID, callBackOverride) {
    /// <summary>
    /// Deletes the control device with given id in the system.
    /// </summary>
    /// <param name="deviceID" type="int">ID of device.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBVoidData">
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "id": deviceID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("DeviceControlDeviceDelete",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("DeviceControlDeviceDelete",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.DeviceGetAllUserDefinedVBIRs = function (sessionID, callBackOverride) {
    /// <summary>
    /// Gets all user defined VBIRs from the system.
    /// </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList">
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("DeviceGetAllUserDefinedVBIRs",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("DeviceGetAllUserDefinedVBIRs",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.DeviceUserDefinedVBIRAddOrUpdate = function (sessionID, id, name, code, spitfireversion, aux1, aux2, aux3, cmd1, cmd2, cmd3, callBackOverride) {
    /// <summary>
    /// Adds a user defined VBIR from the system.
    /// </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <param name="name" type="String">Name.</param>
    /// <param name="code" type="String">Code.</param>
    /// <param name="name" type="String">Name.</param>
    /// <param name="name" type="String">Name.</param>
    /// <returns type="MaduroDC.VBList">
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "sessionID": sessionID,
        "id": id,
        "name": name,
        "spitFireVersion": spitfireversion,
        "code": code,
        "aux1": aux1,
        "aux2": aux2,
        "aux3": aux3,
        "cmd1": cmd1,
        "cmd2": cmd2,
        "cmd3": cmd3
    };
    if (!callBackOverride) {
        proxy.invoke("DeviceUserDefinedVBIRAddOrUpdate",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("DeviceUserDefinedVBIRAddOrUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.DeviceUserDefinedVBIRDelete = function (id, sessionID, callBackOverride) {
    /// <summary>
    /// Deletes user defined VBIR from the system.
    /// </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBVoidData">
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "id": id,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("DeviceUserDefinedVBIRDelete",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("DeviceUserDefinedVBIRDelete",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.DeviceGetAuxValues = function (sessionID, callBackOverride) {
    /// <summary>
    /// Gets all auxiliary commands for user defined VBIR.
    /// </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList">
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("DeviceGetAuxValues",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("DeviceGetAuxValues",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.CommandOnVBIR = function (code, IP, port, Cmd, cmdTxt, type, sessionID, callBackOverride) {
    /// <summary>
    /// Sends Play/Pause/Rewind/Stop/Fwd command for VBIR.
    /// </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <param name="Cmd" type="String">Command value.</param>
    /// <param name="Txt" type="String">Text value.</param>
    /// <returns type="String">
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "code": code,
        "IP": IP,
        "port": port,
        "cmd": Cmd,
        "cmdTxt": cmdTxt,
        "type": type,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("CommandOnVBIR",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("CommandOnVBIR",
	args,
	callBackOverride,
	onFailure,
	false)
    }
};

MaduroSLL.Service.prototype.CommandOnDVD = function (IP, port, cmdTxt, sessionID, callBackOverride) {
    /// <summary>
    /// Sends Play/Pause/Rewind/Stop/Fwd command for DVD.
    /// </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <param name="Cmd" type="String">Command value.</param>
    /// <param name="Txt" type="String">Text value.</param>
    /// <returns type="String">
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "IP": IP,
        "port": port,
        "cmdTxt": cmdTxt,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("CommandOnDVD",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("CommandOnDVD",
	args,
	callBackOverride,
	onFailure,
	false)
    }
};
MaduroSLL.Service.prototype.CommandOnVCR = function (IP, port, dev, cmdTxt, sessionID, callBackOverride) {
    /// <summary>
    /// Sends Play/Pause/Rewind/Stop/Fwd command for VCR.
    /// </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <param name="Cmd" type="String">Command value.</param>
    /// <param name="Txt" type="String">Text value.</param>
    /// <returns type="String">
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "IP": IP,
        "port": port,
        "dev": dev,
        "cmdTxt": cmdTxt,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("CommandOnVCR",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("CommandOnVCR",
	args,
	callBackOverride,
	onFailure,
	false)
    }
};
MaduroSLL.Service.prototype.GetControlDeviceForContentInstance = function (contentInstanceID, sessionID, callBackOverride) {
    /// <summary>
    /// Gets control device for provided content
    /// </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <param name="contentInstanceID" type="int">contentInstanceID.</param>
    /// <returns type="VBControlDeviceInfo"</return>
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "contentInstanceID": contentInstanceID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("GetControlDeviceForContentInstance",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("GetControlDeviceForContentInstance",
	args,
	callBackOverride,
	onFailure,
	false)
    }
};
MaduroSLL.Service.prototype.GetAllContentInstancesForDeviceVBrick = function (deviceID, sessionID, callBackOverride) {
    /// <summary>
    /// Gets content instances for provided vbrick
    /// </summary>
    /// <param name="deviceID" type="int">DeviceID.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="VBList<VBContentInstanceLive>"</return>
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "deviceID": deviceID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("GetAllContentInstancesForDeviceVBrick",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("GetAllContentInstancesForDeviceVBrick",
	args,
	callBackOverride,
	onFailure,
	false)
    }
};
MaduroSLL.Service.prototype.UpdateRequiredMetaData = function (requiredMetaData, contentID, sessionID, callBackOverride) {
    /// <summary>
    /// Add a new comment to a Content record
    /// </summary>
    /// <param name="comment">The comment object</param>
    /// <param name="contentID">The ID of the Content record</param>
    /// <param name="sessionID">Unique session GUID.</param>
    /// <returns>MaduroDC.VBVoidData</returns>
    var args = {
        "requiredMetaData": requiredMetaData,
        "contentID": contentID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        if (this.isEmbedded) {
            JSONPproxy.invoke("UpdateRequiredMetaData",
						args,
						onSuccess,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("UpdateRequiredMetaData",
						args,
						onSuccess,
						onFailure,
						false)
        }
    } else {
        if (this.isEmbedded) {
            JSONPproxy.invoke("UpdateRequiredMetaData",
						args,
						callBackOverride,
						onFailure,
						false,
						true)
        } else {
            proxy.invoke("UpdateRequiredMetaData",
						args,
						callBackOverride,
						onFailure,
						false)
        }
    }
};
MaduroSLL.Service.prototype.AnonymousLogin = function (applicationID, clientIP, userLanguage, callBackOverride) {
    /// <summary>
    /// Allows a user to log in as the anonymous, if it is available.
    /// </summary>
    /// <param name="applicationID" type="String">Application ID - Every application allowed to call this
    /// service MUST have an ID in the ClientApplication Table</param>
    /// <param name="clientIP" type="String">Client IP</param>
    /// <param name="userLanguage" type="String">User Language</param>
    /// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>
    var args = {
        "applicationID": applicationID,
        "clientIP": clientIP,
        "userLanguage": userLanguage
    };
    if (!callBackOverride) {
        proxy.invoke("AnonymousLogin",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("AnonymousLogin",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};

MaduroSLL.Service.prototype.GetContentForContentID = function (contentID, sessionID,callBackOverride) {
    /// <summary>
    /// Allows a user to log in as the anonymous, if it is available.
    /// </summary>
    /// <param name="applicationID" type="String">Application ID - Every application allowed to call this
    /// service MUST have an ID in the ClientApplication Table</param>
    /// <param name="clientIP" type="String">Client IP</param>
    /// <param name="userLanguage" type="String">User Language</param>
    /// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>
    var args = {
        "contentID": contentID,
        "sessionID": sessionID

    };
    if (!callBackOverride) {
        proxy.invoke("GetContentForContentID",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("GetContentForContentID",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};
MaduroSLL.Service.prototype.ContentGetWithExplicitUserPermissions = function (userID, sessionID, callBackOverride) {
    /// <summary>
    /// ContentGetWithExplicitUserPermissions
    /// </summary>
    /// <param name="userID" type="Int32">userID</param>
    /// <param name="sessionID" type="String">sessionID</param>
    /// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>
    var args = {
        "userID": userID,
        "sessionID": sessionID

    };
    if (!callBackOverride) {
        proxy.invoke("ContentGetWithExplicitUserPermissions",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("ContentGetWithExplicitUserPermissions",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};
MaduroSLL.Service.prototype.ContentGetWithImplicitUserPermissions = function (userID, sessionID, callBackOverride) {
    /// <summary>
    /// ContentGetWithImplicitUserPermissions
    /// </summary>
    /// <param name="userID" type="Int32">userID</param>
    /// <param name="sessionID" type="String">sessionID</param>
    /// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>
    var args = {
        "userID": userID,
        "sessionID": sessionID

    };
    if (!callBackOverride) {
        proxy.invoke("ContentGetWithImplicitUserPermissions",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("ContentGetWithImplicitUserPermissions",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};

MaduroSLL.Service.prototype.InsertReportingAccessRecord = function (vbReportingAccess, sessionID, callBackOverride) {
    /// <summary> Insert Permission Record. </summary>
    /// <param name="vbReportingAccess" type="MaduroDC.VBReportingAccess">VBReportingAccess object</param>
    /// <param name="sessionID" type="String">Session ID</param>
    /// <returns type="MaduroDC.VBVoidData">MaduroDC.VBVoidData</returns>

    var args = {
        "vbReportingAccess": vbReportingAccess,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("InsertReportingAccessRecord",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("InsertReportingAccessRecord",
	args,
	callBackOverride,
	onFailure,
	false)
    }
};


MaduroSLL.Service.prototype.DisplayUserFields = function (reportName, sessionID, callBackOverride) {
    /// <summary> Display Permitted Users. </summary>
    /// <param name="reportName" type="string">Report Name</param>
    /// <param name="sessionID" type="String">Session ID</param>
    /// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

    var args = {
        "reportName": reportName,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("DisplayUserFields",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("DisplayUserFields",
	args,
	callBackOverride,
	onFailure,
	false)
    }
};

MaduroSLL.Service.prototype.DisplayGroupFields = function (reportName, sessionID, callBackOverride) {
    /// <summary> Display Permitted Groups. </summary>
    /// <param name="reportName" type="string">Report Name</param>
    /// <param name="sessionID" type="String">Session ID</param>
    /// <returns type="MaduroDC.VBList">MaduroDC.VBList</returns>

    var args = {
        "reportName": reportName,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("DisplayGroupFields",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("DisplayGroupFields",
	args,
	callBackOverride,
	onFailure,
	false)
    }
};


MaduroSLL.Service.prototype.GetReportList = function (sessionID, callBackOverride) {
    /// <summary>
    /// Allows a user to log in as the anonymous, if it is available.
    /// </summary>
    /// <param name="applicationID" type="String">Application ID - Every application allowed to call this
    /// service MUST have an ID in the ClientApplication Table</param>
    /// <param name="clientIP" type="String">Client IP</param>
    /// <param name="userLanguage" type="String">User Language</param>
    /// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>
    var args = {
        "sessionID": sessionID

    };
    if (!callBackOverride) {
        proxy.invoke("GetReportList",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("GetReportList",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};

MaduroSLL.Service.prototype.ContentRecordCancelByScheduleID = function (scheduleID, sessionID, callBackOverride) {
    /// <summary>
    /// Allows a user to log in as the anonymous, if it is available.
    /// </summary>
    /// <param name="applicationID" type="String">Application ID - Every application allowed to call this
    /// service MUST have an ID in the ClientApplication Table</param>
    /// <param name="clientIP" type="String">Client IP</param>
    /// <param name="userLanguage" type="String">User Language</param>
    /// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>
    var args = {
        "scheduleID": scheduleID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("ContentRecordCancelByScheduleID",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("ContentRecordCancelByScheduleID",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};

MaduroSLL.Service.prototype.ContentRecordStopByScheduleID = function (scheduleID, sessionID, callBackOverride) {
    /// <summary>
    /// Allows a user to log in as the anonymous, if it is available.
    /// </summary>
    /// <param name="applicationID" type="String">Application ID - Every application allowed to call this
    /// service MUST have an ID in the ClientApplication Table</param>
    /// <param name="clientIP" type="String">Client IP</param>
    /// <param name="userLanguage" type="String">User Language</param>
    /// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>
    var args = {
        "scheduleID": scheduleID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("ContentRecordStopByScheduleID",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("ContentRecordStopByScheduleID",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};

MaduroSLL.Service.prototype.RequestGetAllByUserID = function (sessionID, callBackOverride) {
    /// <summary>
    /// Allows a user to log in as the anonymous, if it is available.
    /// </summary>
    /// <param name="applicationID" type="String">Application ID - Every application allowed to call this
    /// service MUST have an ID in the ClientApplication Table</param>
    /// <param name="clientIP" type="String">Client IP</param>
    /// <param name="userLanguage" type="String">User Language</param>
    /// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>
    var args = {
       "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("RequestGetAllByUserID",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("RequestGetAllByUserID",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};

MaduroSLL.Service.prototype.RecordStatusFilterGet = function (sessionID, filterSelected, callBackOverride) {
    /// <summary>
    /// Allows a user to log in as the anonymous, if it is available.
    /// </summary>
    /// <param name="applicationID" type="String">Application ID - Every application allowed to call this
    /// service MUST have an ID in the ClientApplication Table</param>
    /// <param name="clientIP" type="String">Client IP</param>
    /// <param name="userLanguage" type="String">User Language</param>
    /// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>
    var args = {
        "sessionID": sessionID,
        "filterSelected": filterSelected
    };
    if (!callBackOverride) {
        proxy.invoke("RecordStatusFilterGet",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("RecordStatusFilterGet",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};
MaduroSLL.Service.prototype.RecordStatusSearchFilter = function (sessionID, searchInput, callBackOverride) {
    /// <summary>
    /// Allows a user to log in as the anonymous, if it is available.
    /// </summary>
    /// <param name="applicationID" type="String">Application ID - Every application allowed to call this
    /// service MUST have an ID in the ClientApplication Table</param>
    /// <param name="clientIP" type="String">Client IP</param>
    /// <param name="userLanguage" type="String">User Language</param>
    /// <returns type="MaduroDC.VBSession">MaduroDC.VBSession</returns>
    var args = {
        "sessionID": sessionID,
        "searchInput": searchInput
    };
    if (!callBackOverride) {
        proxy.invoke("RecordStatusSearchFilter",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("RecordStatusSearchFilter",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};

MaduroSLL.Service.prototype.CheckContentForAnonymousAccess = function (contentID, sessionID, callBackOverride) {
    /// <summary>
    /// Check if contet has anonymous view access
    /// </summary>
    /// <param name="contentID" type="int">ContentID</param>
    /// <param name="sessionID" type="String">SessionID</param>
    /// <returns type="MaduroDC.VBBoolData">MaduroDC.VBBoolData</returns>
    var args = {
        "contentID": contentID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("CheckContentForAnonymousAccess",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("CheckContentForAnonymousAccess",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};

MaduroSLL.Service.prototype.DeleteReportPermissions = function (sessionID, callBackOverride) {
    /// <summary>
    /// Allows a user to delete permission from all reports.
    /// </summary>
    /// <param name="sessionID" type="String">SessionID</param>
    /// <returns type="MaduroDC.VBBoolData">MaduroDC.VBBoolData</returns>
    var args = {
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("DeleteReportPermissions",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("DeleteReportPermissions",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};
MaduroSLL.Service.prototype.PresentionAllowAnonymousQuestionsGet = function (sessionID, presentationID, callBackOverride) {
    /// <summary>
    /// Determines if the passed presentation is allowed for anonymous questions.
    /// </summary>
    /// <param name="sessionID" type="string">Session ID</param>
    /// <param name="presentationID" type="int">Presentation ID</param>
    /// <returns type="MaduroDC.VBBoolData">
    /// MaduroDC.VBBoolData
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "sessionID": sessionID,
        "presentationID": presentationID
    };
    if (!callBackOverride) {
        proxy.invoke("PresentionAllowAnonymousQuestionsGet",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("PresentionAllowAnonymousQuestionsGet",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};
MaduroSLL.Service.prototype.ScheduleEventGetContentID = function (sessionID, scheduleEventID, callBackOverride) {
    /// <summary>
    /// Determines if the passed presentation is allowed for anonymous questions.
    /// </summary>
    /// <param name="sessionID" type="string">Session ID</param>
    /// <param name="scheduleEventID" type="int">Schedule event ID</param>
    /// <returns type="MaduroDC.VBIntData">
    /// MaduroDC.VBIntData
    /// If an exception is thrown, the .Exception property will be populated.
    /// </returns>
    var args = {
        "scheduleEventID": scheduleEventID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("ScheduleEventGetContentID",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("ScheduleEventGetContentID",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};

MaduroSLL.Service.prototype.EndScheduleCalendarEvent = function (scheduledEventID, sessionID, callBackOverride) {
    /// <summary>
    /// Allows a user to delete permission from all reports.
    /// </summary>
    /// <param name="sessionID" type="String">SessionID</param>
    /// <returns type="MaduroDC.VBBoolData">MaduroDC.VBBoolData</returns>
    var args = {
        "scheduledEventID": scheduledEventID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invokeTimeOut("EndScheduleCalendarEvent",
						args,
						onSuccess,
						onFailure,
						false,
                        false,
                        600000)

    } else {
        proxy.invokeTimeOut("EndScheduleCalendarEvent",
						args,
						callBackOverride,
						onFailure,
						false,
                        false,
                        600000)

    }
};

MaduroSLL.Service.prototype.ContentStoredDeleteFromStoredServerForAllInstances = function (contentID, sessionID, callBackOverride) {
    /// <summary>
    /// Allows a user to delete permission from all reports.
    /// </summary>
    /// <param name="sessionID" type="String">SessionID</param>
    /// <returns type="MaduroDC.VBBoolData">MaduroDC.VBBoolData</returns>

    var args = {
        "contentID": contentID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("ContentStoredDeleteFromStoredServerForAllInstances",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("ContentStoredDeleteFromStoredServerForAllInstances                                     ",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};

MaduroSLL.Service.prototype.ContentStoredDeleteFromStoredServerForCheckedInstances = function (contentInstanceID, deleteContent, sessionID, callBackOverride) {
    /// <summary>
    /// Allows a user to delete permission from all reports.
    /// </summary>
    /// <param name="sessionID" type="String">SessionID</param>
    /// <returns type="MaduroDC.VBBoolData">MaduroDC.VBBoolData</returns>

    var args = {
        "contentInstanceID": contentInstanceID,
        "deleteContent": deleteContent,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("ContentStoredDeleteFromStoredServerForCheckedInstances",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("ContentStoredDeleteFromStoredServerForCheckedInstances",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};

MaduroSLL.Service.prototype.ContentViews = function (contentID, sessionID,callBackOverride) {
    /// <summary>
    /// Allows a user to delete permission from all reports.
    /// </summary>
    /// <param name="sessionID" type="String">SessionID</param>
    /// <returns type="MaduroDC.VBBoolData">MaduroDC.VBBoolData</returns>

    var args = {
        "contentID": contentID,
        "sessionID": sessionID

    };
    if (!callBackOverride) {
        proxy.invoke("ContentViews",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("ContentViews",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};

MaduroSLL.Service.prototype.ContentRecordGetByStatus = function (sessionID,enumRequestStatusTypeID, callBackOverride) {
    /// <summary>
    /// Allows a user to delete permission from all reports.
    /// </summary>
    /// <param name="sessionID" type="String">SessionID</param>
    /// <returns type="MaduroDC.VBBoolData">MaduroDC.VBBoolData</returns>

    var args = {

        "sessionID": sessionID,
        "enumRequestStatusTypeID": enumRequestStatusTypeID

    };
    if (!callBackOverride) {
        proxy.invoke("ContentRecordGetByStatus",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("ContentRecordGetByStatus",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};
MaduroSLL.Service.prototype.RequestIngestGetAllByStatus = function (sessionID, enumRequestStatusTypeID, callBackOverride) {
    /// <summary>
    /// Allows a user to delete permission from all reports.
    /// </summary>
    /// <param name="sessionID" type="String">SessionID</param>
    /// <returns type="MaduroDC.VBBoolData">MaduroDC.VBBoolData</returns>

    var args = {

        "sessionID": sessionID,
        "enumRequestStatusTypeID": enumRequestStatusTypeID

    };
    if (!callBackOverride) {
        proxy.invoke("RequestIngestGetAllByStatus",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("RequestIngestGetAllByStatus",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};

MaduroSLL.Service.prototype.RequestFtpGetAllByStatus = function (sessionID, enumRequestStatusTypeID, callBackOverride) {
    /// <summary>
    /// Allows a user to delete permission from all reports.
    /// </summary>
    /// <param name="sessionID" type="String">SessionID</param>
    /// <returns type="MaduroDC.VBBoolData">MaduroDC.VBBoolData</returns>

    var args = {

        "sessionID": sessionID,
        "enumRequestStatusTypeID": enumRequestStatusTypeID

    };
    if (!callBackOverride) {
        proxy.invoke("RequestFtpGetAllByStatus",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("RequestFtpGetAllByStatus",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};
MaduroSLL.Service.prototype.RequestDownloadGetAllByStatus = function (sessionID, enumRequestStatusTypeID, callBackOverride) {
    /// <summary>
    /// Allows a user to delete permission from all reports.
    /// </summary>
    /// <param name="sessionID" type="String">SessionID</param>
    /// <returns type="MaduroDC.VBBoolData">MaduroDC.VBBoolData</returns>

    var args = {

        "sessionID": sessionID,
        "enumRequestStatusTypeID": enumRequestStatusTypeID

    };
    if (!callBackOverride) {
        proxy.invoke("RequestDownloadGetAllByStatus",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("RequestDownloadGetAllByStatus",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};

MaduroSLL.Service.prototype.RequestConvertGetAllByStatus = function (sessionID, enumRequestStatusTypeID, callBackOverride) {
    /// <summary>
    /// Allows a user to delete permission from all reports.
    /// </summary>
    /// <param name="sessionID" type="String">SessionID</param>
    /// <returns type="MaduroDC.VBBoolData">MaduroDC.VBBoolData</returns>

    var args = {

        "sessionID": sessionID,
        "enumRequestStatusTypeID": enumRequestStatusTypeID

    };
    if (!callBackOverride) {
        proxy.invoke("RequestConvertGetAllByStatus",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("RequestConvertGetAllByStatus",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};

MaduroSLL.Service.prototype.RecordingStatusGetAll = function (sessionID,callBackOverride) {
    /// <summary>
    /// Allows a user to delete permission from all reports.
    /// </summary>
    /// <param name="sessionID" type="String">SessionID</param>
    /// <returns type="MaduroDC.VBBoolData">MaduroDC.VBBoolData</returns>

    var args = {

        "sessionID": sessionID

    };
    if (!callBackOverride) {
        proxy.invoke("RecordingStatusGetAll",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("RecordingStatusGetAll",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};

MaduroSLL.Service.prototype.GetCurrentWorkflowForContent = function (selectedContentId, sessionID, callBackOverride) {
    /// <summary>
    /// Allows a user to delete permission from all reports.
    /// </summary>
    /// <param name="sessionID" type="String">SessionID</param>
    /// <returns type="MaduroDC.VBBoolData">MaduroDC.VBBoolData</returns>

    var args = {
        "selectedContentId": selectedContentId,
        "sessionID": sessionID

    };
    if (!callBackOverride) {
        proxy.invoke("GetCurrentWorkflowForContent",
						args,
						onSuccess,
						onFailure,
						false)

    } else {
        proxy.invoke("GetCurrentWorkflowForContent",
						args,
						callBackOverride,
						onFailure,
						false)

    }
};

MaduroSLL.Service.prototype.FeatureSetsGetByUserForPermission = function (userID, sessionID, callBackOverride) {
    /// <summary> Returns a VBList containing all FeatureSets for which the passed User ID has permissions. </summary>
    /// <param name="userID" type="Number" integer="true">User's unique numeric ID.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList"> VBList of VBFeatureSet data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

    var args = {
        "userID": userID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("FeatureSetsGetByUserForPermission",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("FeatureSetsGetByUserForPermission",
	args,
	callBackOverride,
	onFailure,
	false)
    }
};


MaduroSLL.Service.prototype.RefreshSessionStates = function (userIDs, groupIDs, refreshContentPermissions, refreshCategoryPermissions, sessionID, callBackOverride) {
    /// <summary>
    /// Refresh currently logged users filtered by the passed in user IDs and/or group IDs.
    /// This method should be called when user/group's content permissions and/or category permissions have been updated.
    /// </summary>
    /// <param name="userIDs">User IDs.  Set it to null if filter is not needed.</param>
    /// <param name="groupIDs">Group IDs.  Set it to null if filter is not needed</param>
    /// <param name="refreshContentPermissions">Refresh the content permissions in the session states</param>
    /// <param name="refreshCategoryPermissions">Refresh the category permissions in the session states</param>
    /// <param name="sessionID">session ID</param>
    /// <returns>VBVoidData</returns>

    var args = {
        "userIDs": userIDs,
        "groupIDs": groupIDs,
        "refreshContentPermissions": refreshContentPermissions,
        "refreshCategoryPermissions": refreshCategoryPermissions,
        "sessionID": sessionID

    };
    if (!callBackOverride) {
        proxy.invoke("RefreshSessionStates",
					args,
					onSuccess,
					onFailure,
					false)

    } else {
        proxy.invoke("RefreshSessionStates",
					args,
					callBackOverride,
					onFailure,
					false)

    }
};

MaduroSLL.Service.prototype.GetExpiredContentForUser = function (sessionID, pageNumber, pageSize, callBackOverride) {
    /// <summary>
    /// GetExpiredContentForUser
    /// </summary>
    /// <param name="sessionID">session ID</param>
    /// <returns>VBVoidData</returns>

    var args = {
        "sessionID": sessionID,
        "pageNumber": pageNumber,
        "pageSize": pageSize
    };
    if (!callBackOverride) {
        proxy.invoke("GetExpiredContentForUser",
					args,
					onSuccess,
					onFailure,
					false)

    } else {
        proxy.invoke("GetExpiredContentForUser",
					args,
					callBackOverride,
					onFailure,
					false)

    }
};
MaduroSLL.Service.prototype.UpdateContentExpirationAndDeletionDate = function (editContentID, removeEx, expiration, deletion, sessionID, callBackOverride) {
    /// <summary>
    /// UpdateContentExpirationAndDeletionDate
    /// </summary>
    /// <param name="contentID">contentID</param>
    /// <param name="removeExpiration">removeExpiration</param>
    /// <param name="expirationDate">expirationDate</param>
    /// <param name="deletionDate">deletionDate</param>
    /// <param name="sessionID">session ID</param>
    /// <returns>VBVoidData</returns>
    var args = {
        "contentID": editContentID,
        "removeExpiration": removeEx,
        "expirationDate": expiration,
        "deletionDate": deletion,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("UpdateContentExpirationAndDeletionDate",
					args,
					onSuccess,
					onFailure,
					false)

    } else {
        proxy.invoke("UpdateContentExpirationAndDeletionDate",
					args,
					callBackOverride,
					onFailure,
					false)

    }
};
MaduroSLL.Service.prototype.ContentDeleteByID = function (contentID, sessionID, callBackOverride) {
    /// <summary>
    /// ContentDeleteByID
    /// </summary>
    /// <param name="contentID">contentID</param>
    /// <param name="sessionID">sessionID</param>
    /// <returns>VBVoidData</returns>
    var args = {
        "contentID": contentID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("ContentDeleteByID",
					args,
					onSuccess,
					onFailure,
					false)

    } else {
        proxy.invoke("ContentDeleteByID",
					args,
					callBackOverride,
					onFailure,
					false)

    }
};


MaduroSLL.Service.prototype.EnteredURLContentGetAllPaged = function (contentType, sessionID, pageSize, pageNumber, callBackOverride) {
    /// <summary> Returns a collection of all VBContent data contracts in the system that were added to the system via URL rather than discovery, either live or stored. </summary>
    /// <param name="contentType" type="CONTENTTYPE">A choice between Stored and Live content</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList"></returns>
    /// <example>EnteredURLContentGetAllLive("0FFB13F8-11CE-46B5-AA41-5B2703013086")</example>

    var args = {
        "contentType": contentType,
        "sessionID": sessionID,
        "pageSize": pageSize,
        "pageNumber": pageNumber
    };
    if (!callBackOverride) {
        proxy.invoke("EnteredURLContentGetAllPaged",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("EnteredURLContentGetAllPaged",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.GetWebcastLogonInfo = function (contentID,sessionID,callBackOverride) {
    /// <summary> Returns a collection of all VBContent data contracts in the system that were added to the system via URL rather than discovery, either live or stored. </summary>
    /// <param name="contentType" type="CONTENTTYPE">A choice between Stored and Live content</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList"></returns>
    /// <example>EnteredURLContentGetAllLive("0FFB13F8-11CE-46B5-AA41-5B2703013086")</example>

    var args = {
        "contentID": contentID,
        "sessionID": sessionID

    };
    if (!callBackOverride) {
        proxy.invoke("GetWebcastLogonInfo",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("GetWebcastLogonInfo",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.PlaylistUpdatePlaylistItemsAndOwner = function (playlist, updateItems, sessionID, callBackOverride) {
    /// <summary>
    /// Updates playlist items and owner
    /// </summary>
    /// <param name="playlist"></param>
    /// <param name="updateItems"></param>
    /// <param name="sessionID"></param>
    /// <returns></returns>
    var args = {
        "playlist": playlist,
        "bUpdatePlaylistItems": updateItems,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("PlaylistUpdatePlaylistItemsAndOwner",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("PlaylistUpdatePlaylistItemsAndOwner",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.PlaylistGet = function (PlaylistID, sessionID, callBackOverride) {
    /// <summary>
    /// Get a playlist by playlistID
    /// </summary>
    /// <param name="PlaylistID"></param>
    /// <param name="sessionID"></param>
    /// <returns></returns>

    var args = {
        "PlaylistID": PlaylistID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("PlaylistGet",
			args,
			onSuccess,
			onFailure,
			false)
    } else {
        proxy.invoke("PlaylistGet",
			args,
			callBackOverride,
			onFailure,
			false)
    }
}

MaduroSLL.Service.prototype.GetAllClips = function (sessionID, pageSize, pageNumber, callBackOverride) {
    /// <summary>
    /// Get all clips in system
    /// </summary>
    /// <param name="sessionID"></param>
    /// <returns></returns>

    var args = {
        "sessionID": sessionID,
        "pageSize": pageSize,
        "pageNumber": pageNumber
    };
    if (!callBackOverride) {
        proxy.invoke("GetAllClips",
			args,
			onSuccess,
			onFailure,
			false)
    } else {
        proxy.invoke("GetAllClips",
			args,
			callBackOverride,
			onFailure,
			false)
    }
}
MaduroSLL.Service.prototype.ClipUpdateOwner = function (clipID, userID,title, sessionID, callBackOverride) {
    /// <summary>
    /// Updates clip owner
    /// </summary>
    /// <param name="clipID"></param>
    /// <param name="userID"></param>
    /// <param name="sessionID"></param>
    /// <returns></returns>

    var args = {
        "clipID": clipID,
        "ownerID": userID,
        "title" : title,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("ClipUpdateOwner",
			args,
			onSuccess,
			onFailure,
			false)
    } else {
        proxy.invoke("ClipUpdateOwner",
			args,
			callBackOverride,
			onFailure,
			false)
    }
}


MaduroSLL.Service.prototype.PlaylistGetAllPaged = function (sessionID, pageSize, pageNumber, callBackOverride) {
    /// <summary>
    /// Get all clips in system
    /// </summary>
    /// <param name="sessionID"></param>
    /// <returns></returns>

    var args = {
        "sessionID": sessionID,
        "pageSize": pageSize,
        "pageNum": pageNumber
    };
    if (!callBackOverride) {
        proxy.invoke("PlaylistGetAllPaged",
			args,
			onSuccess,
			onFailure,
			false)
    } else {
        proxy.invoke("PlaylistGetAllPaged",
			args,
			callBackOverride,
			onFailure,
			false)
    }
}

MaduroSLL.Service.prototype.CategoriesGetAllWithStoredServers = function (sessionID, callBackOverride) {
    /// <summary> Returns a collection of VBCategory objects </summary>
    /// <param name="sessionID" type="String">sessionID</param>
    /// <returns type="MaduroDC.VBList">VBList of VBCategory data contracts</returns>
    /// <example>CategoriesGetAllWithStoredServers("0FFB13F8-11CE-46B5-AA41-5B2703013086")</example>

    var args = {
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("CategoriesGetAllWithStoredServers",
			args,
			onSuccess,
			onFailure,
			false)
    } else {
        proxy.invoke("CategoriesGetAllWithStoredServers",
			args,
			callBackOverride,
			onFailure,
			false)
    }
}

MaduroSLL.Service.prototype.PlayContentLoadWithPlayerControllerForSharedClips = function (contentID, clipContentID, sessionID, allowUnfiltered, callBackOverride) {
    /// <summary>
    /// Uses the Content Search to find the content record for the passed ContentID and
    /// returns a VBContentInstance data contract containing information
    /// about the selected instance, general information about the content,
    /// and a generated URL to play.
    /// Also returns a VBPlayerController data contract containing an object tag and
    ///   JavaScript to control the appropriate client-side player.
    /// </summary>
    /// <param name="contentID" type="Number" integer="true">Unique numeric ID of Content to play.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBPlayContentInfo">VBPlayContentInfo data contract.</returns>
    var args = {
        "contentID": contentID,
        "clipContentID": clipContentID,
        "sessionID": sessionID,
        "allowUnfiltered": allowUnfiltered
    };
    if (!callBackOverride) {
        JSONPproxy.invoke("PlayContentLoadWithPlayerControllerForSharedClips",
	args,
	onSuccess,
	onFailure,
	false,
	false)
    } else {
        JSONPproxy.invoke("PlayContentLoadWithPlayerControllerForSharedClips",
	args,
	callBackOverride,
	onFailure,
	false,
	false)
    }
}

MaduroSLL.Service.prototype.StoredServersGetAllForCategoriesManagement = function (sessionID, callBackOverride) {
    /// <summary> Returns a VBList containing a list of VBStoredServer data contracts for ALL Stored Servers defined in the system. </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList"> VBList of VBStoredServer data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

    var args = {
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("StoredServersGetAllForCategoriesManagement",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("StoredServersGetAllForCategoriesManagement",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}

MaduroSLL.Service.prototype.IsSMTPServerAvailable = function (sessionID, callBackOverride) {
    /// <summary> Returns a VBList containing a list of VBStoredServer data contracts for ALL Stored Servers defined in the system. </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList"> VBList of VBStoredServer data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

    var args = {
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("IsSMTPServerAvailable",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("IsSMTPServerAvailable",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.UsersGetAllForVODSelect = function (sessionID, callBackOverride) {
    /// <summary> Returns a VBList containing a list of VBStoredServer data contracts for ALL Stored Servers defined in the system. </summary>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBList"> VBList of VBStoredServer data contracts. If an exception is thrown, the.Exception property will be populated. </returns>

    var args = {
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("UsersGetAllForVODSelect",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("UsersGetAllForVODSelect",
	args,
	callBackOverride,
	onFailure,
	false)
    }

}
MaduroSLL.Service.prototype.GetPresentationUploadStatus = function (presentationID, sessionID, callBackOverride) {
    /// <summary> Gets the upload status of presentation . </summary>
    /// <param name="presentationID" type="String">Unique presentation ID.</param>
    /// <param name="sessionID" type="String">Unique session GUID.</param>
    /// <returns type="MaduroDC.VBBoolData"> Booleanvalue indicating upload status. If an exception is thrown, the.Exception property will be populated. </returns>

    var args = {
        "presentationID":presentationID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("GetPresentationUploadStatus",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("GetPresentationUploadStatus",
	args,
	callBackOverride,
	onFailure,
	false)
    }

}
MaduroSLL.Service.prototype.ValidateCredentialsToAddExternalVideo = function (vbExternalVideoAddCredentials, sessionID, callBackOverride) {
    /// <summary> Validates the credentials to add the video </summary>
    /// <param name="vbExternalVideoAddCredentials">External Video Server User Credentials</param>
    /// <param name="sessionID">Unique Session ID</param>
    /// <returns>MaduroDC.VBBoolData</returns>

    var args = {
        "vbExternalVideoAddCredentials": vbExternalVideoAddCredentials,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invokeTimeOut("ValidateCredentialsToAddExternalVideo",
						args,
						onSuccess,
						onFailure,
						false)
    } else {
        proxy.invokeTimeOut("ValidateCredentialsToAddExternalVideo",
						args,
						callBackOverride,
						onFailure,
						false)
    }
}
MaduroSLL.Service.prototype.PresentationViewerQuestionDelete = function (questionID, sessionID, callBackOverride) {
    /// <summary> Validates the credentials to add the video </summary>
    /// <param name="vbExternalVideoAddCredentials">External Video Server User Credentials</param>
    /// <param name="sessionID">Unique Session ID</param>
    /// <returns>MaduroDC.VBBoolData</returns>

    var args = {
        "questionID": questionID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invokeTimeOut("PresentationViewerQuestionDelete",
						args,
						onSuccess,
						onFailure,
						false)
    } else {
        proxy.invokeTimeOut("PresentationViewerQuestionDelete",
						args,
						callBackOverride,
						onFailure,
						false)
    }
}
MaduroSLL.Service.prototype.PresentationPresenterQuestionDelete = function (questionID, sessionID, callBackOverride) {
    var args = {
        "questionID": questionID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invokeTimeOut("PresentationPresenterQuestionDelete",
						args,
						onSuccess,
						onFailure,
						false)
    } else {
        proxy.invokeTimeOut("PresentationPresenterQuestionDelete",
						args,
						callBackOverride,
						onFailure,
						false)
    }
}
MaduroSLL.Service.prototype.ContentResubmitForApprovalByApprover = function (contentID, comments, sessionID, callBackOverride) {
    var args = {
        "contentID": contentID,
        "comments": comments,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("ContentResubmitForApprovalByApprover",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("ContentResubmitForApprovalByApprover",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.DevicePresentationChatSourceAddUpdate = function (vbDevicePresentationChatSource, sessionID, callBackOverride) {
    var args = {
        "vbDevicePresentationChatSource": vbDevicePresentationChatSource,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("DevicePresentationChatSourceAddUpdate",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("DevicePresentationChatSourceAddUpdate",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.DevicePresentationChatSourceGetByContentID = function (contentID, sessionID, callBackOverride) {
    var args = {
        "contentID": contentID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("DevicePresentationChatSourceGetByContentID",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("DevicePresentationChatSourceGetByContentID",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.DevicePresentationChatSourceGetByDeviceID = function (deviceID, sessionID, callBackOverride) {
    var args = {
        "deviceID": deviceID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("DevicePresentationChatSourceGetByDeviceID",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("DevicePresentationChatSourceGetByDeviceID",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.DevicePresentationChatSourceDelete = function (deviceID, sessionID, callBackOverride) {
    var args = {
        "deviceID": deviceID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("DevicePresentationChatSourceDelete",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("DevicePresentationChatSourceDelete",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.DevicePresentationConfigurationsDelete = function (deviceID, sessionID, callBackOverride) {
    var args = {
        "deviceID": deviceID,
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("DevicePresentationConfigurationsDelete",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("DevicePresentationConfigurationsDelete",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
MaduroSLL.Service.prototype.IsUserInAnyWorkflow = function (sessionID, callBackOverride) {
    var args = {
        "sessionID": sessionID
    };
    if (!callBackOverride) {
        proxy.invoke("IsUserInAnyWorkflow",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("IsUserInAnyWorkflow",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}


MaduroSLL.Service.prototype.ValidateCategoryDelete = function (vbCategories, sessionID, ismultidelete, callBackOverride) {
    /// <summary> Validate before deleting a category record </summary>
    /// <param name="vbCategory" type="List<MaduroDC.VBCategory>">The category list object to delete</param>
    /// <param name="sessionID" type="String">Session ID</param>
    /// <param name="ismultidelete" type="Boolean">Multi Delete Flag</param>
    /// <returns type="MaduroDC.VBBoolData">MaduroDC.VBBoolData</returns>
    /// <example>ValidateCategoryDelete(vbCategoryObj, "0FFB13F8-11CE-46B5-AA41-5B2703013086", true)</example>

    var args = {
        "vbCategories": vbCategories,
        "sessionID": sessionID,
        "ismultidelete": ismultidelete
    };
    if (!callBackOverride) {
        proxy.invoke("ValidateCategoryDelete",
	args,
	onSuccess,
	onFailure,
	false)
    } else {
        proxy.invoke("ValidateCategoryDelete",
	args,
	callBackOverride,
	onFailure,
	false)
    }
}
 return new MaduroSLL.Service();

 }]);
